{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F31F0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFCD02530>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "8d0ddc67-9667-44ee-aeb8-e924af34c7ff-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4c7a0c09-aa48-4f23-8cbd-37ecef3c86ad-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4bb3bad7-bd24-4987-a17a-00081228e12d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c4623814-1fbc-471f-ab3f-eb59bd66ef60-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5f102821-995c-4fd9-b74c-4d28986997f7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "af9b4ee5-e2f1-45ab-9e8b-9b4f9f2e70dd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "6d6ba4df-a6ef-4dc2-a75f-fb85a7d69acc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "aab96836-be9c-4735-9556-f013734aa122-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c2cb3555-8738-4c40-a77b-f545e026a411-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5f7a2123-aae4-4211-9190-e9dd8419b7c5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "707dc189-4ba6-474f-8bdc-9b4ea3c56b52-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d769a68b-3a83-4dd0-8462-4221228dd158-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "314bbaa7-0db5-495e-a1dd-ee3ff8392ed9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3deb7452-2705-46a5-8d95-a561d941d031-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1705a991-ed9a-4dd4-b6bc-68297f4c78e2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e382260a-2e2b-4bbe-9fa8-5d223a95540d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1e918248-ae89-49a9-8571-d4568c587b6a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "954c8c36-8fcc-4a87-9cd0-a333fcb71fc7-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748341516367, "stop": 1748341526834, "uuid": "3980c7c2-6940-4560-80c8-f42b5fa958d4", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "42176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}