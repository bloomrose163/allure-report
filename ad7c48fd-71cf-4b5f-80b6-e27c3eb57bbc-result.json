{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001BC6CECAC80>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6E34D150>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "64ff3cdc-a5f8-4658-9ff4-0e30ad46e892-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "977f2eec-36d7-477d-87c0-c694d04a301c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d6282c5e-7e17-4b94-9572-e085f16c98e9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e41dafc6-4ee2-4c24-b0b8-035744fe19e0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "213e9598-4aad-4b8f-9377-6ca6edc6318a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c20cc0d1-92d5-429e-b406-5aa3e7d3f09c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "05ec4040-6b7f-4523-8bf4-791db555b6f8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c20bc841-161d-4d06-8c9c-ab3c3098435d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f2f90785-638e-4b55-a3fd-8d8e58811fb5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3851dc49-e98e-4b02-88cf-ffce40e292c0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f9f16ac6-5bd1-48cf-a78b-173b0f9455d7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "50182722-2252-481c-a64e-3f1af36b6ea1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5e7bce1c-65e4-4ddf-b9d2-381accebccd7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8939fa1a-3906-4971-a267-244e3ac66d76-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2f3269c1-55bb-435b-9b10-66d97295c999-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "49c4d4e8-7540-418a-badf-023452ae92ff-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "165668c1-b126-4bc7-b9dc-dbdc6cc4e443-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3eb244d6-79d2-4ae4-a06c-ee0c382cfa1c-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749140498391, "stop": 1749140507955, "uuid": "0f6f25e3-9b6f-41a2-bd7d-5aac3302f5c5", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}