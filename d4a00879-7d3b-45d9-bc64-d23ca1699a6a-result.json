{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000223EC15ADD0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000223EECCCB50>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "0f6399e5-0ebf-4ec6-9ed9-fd4eeacaa5e2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "324e469d-09d3-4d13-9c71-8b1be2f5a6b4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "656a2f78-604b-4c6c-ab13-ae6cba5e850e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e675d759-9bda-4b57-a3bc-9b1a2b3b2db5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b42d9746-273e-4f7c-8d20-1b03cafd5933-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "25d66717-6b54-4da0-9ffb-37206ed80720-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a46c862e-dd33-43e3-b208-6f1e292c64aa-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "26bc9db5-13bb-4d79-a017-52434b314dbf-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d5f8618d-28a7-4fea-a9ac-031b6da6f679-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0b989b98-de1b-4365-8620-413ab42eeb16-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cb125e68-8c41-4808-b954-e5ac93d3f045-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "da0e12b4-6402-4ccb-ae5e-4328bbfb5c50-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7c490e10-630b-42f6-a676-60b1c13ed698-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7353dfdd-580a-4543-a5cc-76b0f9ed46be-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "08cc3e5a-4abe-46fd-8b63-796021e4e9c9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a79d820f-0f74-4959-8430-237ee21ae97b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7bdfa25a-9966-427f-9c32-2cc52a968251-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fd462ff8-5ff3-46e7-b7a5-b1ad095c8f4e-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749175268724, "stop": 1749175283995, "uuid": "bbe56c8a-7a4c-4fb3-9b26-bfa901eb4d60", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "19868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}