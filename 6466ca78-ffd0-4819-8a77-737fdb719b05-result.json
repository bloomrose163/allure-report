{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001828DCCA7D0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001828F09C7C0>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "dff7eed1-4584-4272-90ff-c31260780130-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1e56c538-9ea0-4377-a7c4-d2e862cba8f6-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c5dac519-9b04-4d92-be91-d24587a2b284-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2160ed88-03b3-46e6-bd72-662758953928-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "66231c73-b22d-48da-81ba-14308f2d7ccc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e05d5f98-9087-497b-af9c-61d382d5b4a5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "abfa3862-30b1-4ea5-ab54-e8057a9cc037-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "aab4d902-7ed0-4147-b13c-67346872038e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c34e1cff-b5ff-4aea-9e61-3aafed0f778e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b0084962-9bf1-49e7-b138-bdf709c0e79f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d0e7ae34-0600-40a4-92e8-403a9eefdbcd-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "691afd06-eaf1-4fbc-9f49-19b97ff91dd2-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749203156707, "stop": 1749203168279, "uuid": "662c7bef-ddac-4037-9c07-073e6e632760", "historyId": "e11d44e563c1949d6ba7935d3333fba8", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "23132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}