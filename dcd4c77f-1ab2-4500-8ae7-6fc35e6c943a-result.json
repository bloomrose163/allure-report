{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C3BF7BF430>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0C0B040>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "d9ef2834-ba57-4068-a9cb-307657881f48-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "461fd78a-e02f-4b2a-ac1f-93c1ea3096ba-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c1fbc718-1b98-4cd3-8fdd-2373d04c7381-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e7d783a4-ea25-43a0-a3be-42c8f856ebe3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cad48d0c-ff31-4764-99fe-7d80013b108c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "32bba0b6-36cb-474e-a99d-e177e959a3bc-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d9e5704d-b0b8-44d2-bf1d-8a391f5e5fba-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e16f1527-8332-4c68-b1f0-fd54de4ff6a7-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "551924e4-d629-4ce6-9da7-d7014b6a1d05-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5cd71c7c-047c-468f-98db-84a1cfc07e92-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9e097f67-967c-42e3-a221-7937386f4cc8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b20dc46e-046c-4d22-87a3-d323d47bfcff-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ca26633c-4993-4a54-97fb-5f32cf280900-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7912d55b-e60e-4ee5-88f4-8d2a173f5ed2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cfe96ea1-2b63-45a6-be26-01c6b8dfc3c1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b062de6c-efa5-4c78-9632-27408eb9a25e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3f85e1cf-58f1-4b20-8542-9c06d036bd41-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c0d33de0-7412-4839-bb6f-7fb17debdbf1-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749201162234, "stop": 1749201177229, "uuid": "9ea4d5ac-4ea3-4ba5-9793-e9e6d375a36d", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}