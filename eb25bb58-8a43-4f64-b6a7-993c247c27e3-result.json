{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000223EC15AD10>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000223EDB60280>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "7ee1d5ce-fc5a-4c19-b2bd-95ae29cb068b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dfeab3cf-110e-4720-a87f-a8536e458db0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "42807268-889b-48fd-acc8-44ae0cb0f3cf-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "86040bcb-8a83-4508-9781-a63889eb155a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "68d1ec27-9cc1-402c-ab37-969668f00259-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "11ad3a3d-b42b-4291-a1a8-8320dd47f3c8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f25e04b7-4c79-4478-a5de-d09ab45f1b9c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "52bd684b-f896-437d-b33b-c3f819225368-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ca1a46a7-79b6-4efb-9733-ee1a6a16efa6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e695ef0f-af0e-481e-a164-b7fb62218210-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "6267e88b-e9a5-4b0c-9b83-6a870648334f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e24c6710-0576-4df9-9307-63cfe7b3b0d9-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2766d6a0-b423-484b-b8eb-e3c82f2d67f1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8ef0fce1-1e77-48db-a1db-4687bdd2d906-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "479b8915-2131-4cb5-841c-d97101c42b4d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "91e86478-9fc0-4ad4-ad4c-5c81ea2a3f52-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8853a2f5-a080-4cd6-9914-ac35ec9ec17e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fdf821b7-c4de-4a40-987c-cfbe19d26550-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749175250779, "stop": 1749175268698, "uuid": "184b914d-c31d-4dfd-92b4-3353a9ca85d6", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "19868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}