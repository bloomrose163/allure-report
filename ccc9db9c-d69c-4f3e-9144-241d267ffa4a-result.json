{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000233633D6800>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000233636673D0>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "34c4ff91-009f-4b37-a665-2fecd69f85b2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b39dd092-9e44-42b3-8fd4-03c1fedcc687-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d0e29e42-d534-409d-9a2d-e6e406eacc5a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "30d7f850-38cf-4053-a5d3-8519b2fb49f6-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3784e159-ff8f-47f7-827c-0877aad0153d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1daa73eb-1fc4-4f88-ae14-43348f8bcf42-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8259f7bc-2666-488c-b0fa-ea9230e6d2eb-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "98518466-724c-440d-ad5d-7cd668c8a54c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "310313a5-e239-4ed8-9a0e-a19dc2c9ca88-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "35912eb9-11da-4908-bd4f-d1cac6494822-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b6b00d58-512b-49e3-b6f9-d468d486cb35-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ac5f45ca-9a88-402b-94bb-20c3a2b77ae8-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749320259023, "stop": 1749320270272, "uuid": "f8623d28-25d8-49ca-9889-1c40e309f316", "historyId": "e11d44e563c1949d6ba7935d3333fba8", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "18960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}