{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C3BF7BEE30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C1180FD0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "98a7eac1-09a4-40a3-9d25-19099b6b68a5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f82f323c-614a-4d4c-a62c-a1ce2d1bc0fa-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "abbbeeab-5e66-4896-b105-3ab066b6e2da-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "308ffefe-e463-45da-91c6-7825f688d6b8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bf66d888-0853-4a7f-9ae8-9d08241ffb33-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "affa094c-355e-4233-90cf-e4920d3c7ce0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "69c5e418-0d60-467b-9d0b-e9089e612363-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "23556e74-256b-46f4-b218-15d404bb0843-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c29b362d-d428-4076-9aa7-777b433785b5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8ecafd3f-2911-4aa5-bcfa-2377b983a6f6-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "885dffd3-5665-4039-95c6-029c3794a422-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3109f10f-e82d-4826-9ecf-ecc7fc2e3d74-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "db16ae11-85e7-49ea-a1ad-116c83fed523-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "152aa2d2-506a-48aa-967f-81c52037a21b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "af7e51ab-67f3-46ee-a20f-4beb911655d6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a55c1258-eafa-40be-9a75-d92e5159e882-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b3867cfa-1480-4d93-89a6-6af227b66eea-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d24da8d2-3c37-4a62-93f2-8b85df3e99e8-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749201177266, "stop": 1749201192472, "uuid": "d67fd319-02fb-457f-854c-69177ad65866", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}