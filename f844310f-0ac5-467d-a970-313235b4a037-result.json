{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E7BC903F40>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E7BDF28820>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "b935ad62-0702-400a-be98-6d6aa9c293c4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c24f8500-bdc5-46fd-9750-b0aaf7617836-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "40a7a4a2-ab77-4b1b-891d-c3a47449566c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6cc04ef6-9e35-481d-bf1a-32a05631c67c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "13383199-fc36-4fdb-9e9a-502755578286-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a63017ef-3129-403b-9594-b40d015cdfe9-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5a887d70-ae33-4390-b584-8e00988cc553-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9e6f69ec-b001-4e14-964d-617b68cc4a5e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "140960c3-c049-4372-8636-4d353ef21f2d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0a8f9b86-ec58-458e-862c-9378ccffae3c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d3b4a4b9-ad16-4b44-bd53-ac07941bba33-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "32f2f8e9-6618-4520-8440-d175544d077f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "724ba00b-2b9e-41fe-88d6-27944e61717e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c44f9165-6920-47ad-8757-7566dabe64f0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c30d18f5-9a01-434f-a80a-00517c72f2c2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "48b6e84b-6ad9-4dc2-b147-b553fc57db63-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "90d91279-037a-45bd-ad9a-a3e7d1dc4ab5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1817d325-60ae-4027-8c3f-59ba67c8de5b-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748496356295, "stop": 1748496369475, "uuid": "7d16bbd5-e328-4b45-9546-b33e8ca86d32", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}