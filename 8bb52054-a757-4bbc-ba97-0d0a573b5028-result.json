{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D1AA252EC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D1ACBC54E0>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "3b7380ca-426f-4839-9dad-50425e2c8634-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "36b73cc1-ba72-4a38-abbe-23681191326f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "501b86a0-dae1-4d6a-a286-bedaef9e647b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "148ac35b-3548-47c2-8841-77da809b8d01-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "325f6cfe-5459-464f-80aa-fe9f948d6670-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a3815239-7c09-4ae8-a01b-0d39a18a2ca5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "257a468e-7c10-4ebb-aaa2-db5ef1e1e923-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e0d3e907-93c5-4408-970f-27adc454ad91-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d9f46141-c584-4e85-b8d8-2600e0ba5f1e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b7afc02e-7ee8-4f0e-b8e9-2c40b18e069e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4480dfd3-50ad-4469-8f8d-c1b7d20c1b2a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f288013c-0ebf-441a-bb5d-27b26e10a574-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "071d2089-830a-4bce-b7f2-ffe36e4fc41d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1655cfbb-7f5e-4a84-b638-319d9390dda1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f2daad50-9f7c-4e22-8982-cad8a87c4605-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e971c94c-b8b2-4e68-b54d-181d8184c93f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bd6bcd27-929d-434c-bfa4-f9e398ff6d40-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "207390c2-4a52-459e-8e9a-5844b9235483-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748425967816, "stop": 1748425982168, "uuid": "164146b8-5cd3-4f15-be49-cbceb152935a", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}