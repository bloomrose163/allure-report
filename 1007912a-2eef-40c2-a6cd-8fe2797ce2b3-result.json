{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E9AE8DF4C0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9B0CC3EB0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "9f1c71e6-ba56-4b02-a894-e82f5268a7b2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e3719ec4-3db2-4b16-b887-2a3416fba2a1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7d2a0e53-b6bb-48d2-bb09-04079c7707ee-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "57ecd0e0-b619-4652-a3d9-e65642d2458e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "09ef07bc-4bab-4093-bf5c-17c6a35ec2d4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b272a9bb-f8b0-43e8-a586-a39d42ad0803-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bf710642-bb2a-4cbd-b038-b26980a8585d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "37c1b830-6938-459e-bbaf-9e88da96feb8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "71968ffb-0b33-4ea5-8853-f984df47a848-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1bb50727-eb3c-45b4-97cd-80e1bb3d6981-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "86e4bd50-0cdb-4b4f-9840-9023d21cc18f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0853779f-5d04-4b26-a8b0-01decdd2a9ed-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ae360bbf-6d94-420b-aee2-ca5878e924e3-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dc513937-a562-4934-89e7-60c3b4159cdc-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a4b8c164-62bb-4bcb-85b9-c8fc6b91926a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "86df898e-fe9f-46f4-b958-337cae7aa196-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7cf62c02-924e-410d-915c-628de36bb0c5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c6a6c2e9-6a6b-4a02-8253-362d37074101-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749100748971, "stop": 1749100757867, "uuid": "08c02bc9-7c66-4d11-9271-5490d01b6647", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "9660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}