{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001FEFF6AF6A0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FEFFD63460>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "2287911c-96c8-486c-8881-bec96082260d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "873c2cd9-7b7d-4f8d-be7a-243dfd918712-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ab1fc743-8f11-4e9e-9fec-444b11f1e70f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d015dcbf-a857-4715-b272-065ea3f6fee7-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2098dd28-bb0e-4a7f-b03a-1d29a102dd34-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "73046322-b603-4960-8f3f-013329526d00-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "559cf54a-7e05-4f3e-82e0-f9d7eb2234c3-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5112c603-4f76-420b-b973-0ded53453ee3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3b390290-e955-43bb-870b-d0f9a95adcdb-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3a95eb35-660c-4b61-9971-21fc48b1d653-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8a89d5a5-9e1f-4d5b-8dbc-c13735a12802-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "535ff191-2895-43b9-8373-ca6dfd04e018-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ce23e557-b7b0-4818-b76c-90b6628ec209-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "47824ca7-f065-4a19-8de8-03cd86131422-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "15df23f5-ed99-4da3-8742-4c4804419e14-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d84b4651-84c1-40cf-970a-ad22cb795d10-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "eb92e5e2-4aeb-4f64-9737-6139af61369e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "266ebcb0-23a9-430e-a69a-08d13c0ecb88-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749451743620, "stop": 1749451763703, "uuid": "86d16a05-84c9-49ec-9063-297b887bbc76", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "12180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}