{"uid":"5dad0158e898a877","name":"Test - delete record ","fullName":"testcase.ACS.test_configuration_profile.TestConfigurationProfile#test_delete_by_param","historyId":"4f649e37b1623eb606f7842ac49e4cc3","time":{"start":1748456167070,"stop":1748456169862,"duration":2792},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x000001AED317E860>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001AED2E17AC0>\nparam = {'name': 'test_ds_hk2_tp4'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"test_ds_hk2_tp4\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Id is required when Deleting configuration-profile!'\n      else:\n        assert response_delete.status_code == 200\n>       assert count  == response_delete.json()['numberOfRecords']\nE       assert 1 == 0\n\ntestcase\\ACS\\test_configuration_profile.py:96: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748456151492,"stop":1748456151571,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1748456151571,"stop":1748456152981,"duration":1410},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1748456167070,"stop":1748456167070,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x000001AED317E860>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001AED2E17AC0>\nparam = {'name': 'test_ds_hk2_tp4'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"test_ds_hk2_tp4\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Id is required when Deleting configuration-profile!'\n      else:\n        assert response_delete.status_code == 200\n>       assert count  == response_delete.json()['numberOfRecords']\nE       assert 1 == 0\n\ntestcase\\ACS\\test_configuration_profile.py:96: AssertionError","steps":[],"attachments":[{"uid":"15b5f30b8195418f","name":"Request Info","source":"15b5f30b8195418f.json","type":"application/json","size":186},{"uid":"c882af9e4343657c","name":"Response Info","source":"c882af9e4343657c.json","type":"application/json","size":73},{"uid":"c6140ab0194c6b70","name":"Request Info","source":"c6140ab0194c6b70.json","type":"application/json","size":189},{"uid":"46c4c7421bd7a4e9","name":"Response Info","source":"46c4c7421bd7a4e9.json","type":"application/json","size":66}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":4,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_configuration_profile"},{"name":"subSuite","value":"TestConfigurationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"43328-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_configuration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'name': 'test_ds_hk2_tp4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"5dad0158e898a877.json","parameterValues":["'test'","{'name': 'test_ds_hk2_tp4'}"]}