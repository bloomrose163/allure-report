{"uid":"23bd6c91e90f28da","name":"Test - create static group member with patameters None- mac address, regId, serial number,provisioning record id","fullName":"testcase.ACS.test_static_group_member.TestStaticGroupMember#test_create_with_param","historyId":"e97273086010adbb421a281225b66405","time":{"start":1749031577100,"stop":1749031581433,"duration":4333},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x00000200752DE830>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020074FF2F50>\nparam = {'memberInfo': 'reg123'}\n\n    @allure.feature('CREATE')\n    @allure.title(f'Test - create static group member with patameters {param}- mac address, regId, serial number,provisioning record id')\n    @pytest.mark.parametrize('param',[\n        {\n            \"memberInfo\": \"e4:6c:d1:43:44:0e\"\n        },\n        {\n            \"memberInfo\":\"reg123\"\n        },\n        {\n            \"memberInfo\":\"CXNK01A8D0C7\"\n        },\n        {\n            \"memberInfo\":\"provisioning-record\"\n        }\n        ])\n    def test_create_with_param(self,base_api,param):\n        # create provisioning-record\n        response_create = base_api.create_when_exist(pr_endpoint,file_paths[\"sip\"],{\"deviceId\": \"CXNK01A8D0C7\"},params=None)\n        pr_id = response_create.json()['_id']\n    \n        # create a static system group\n        group_body =  json_data = load_json(file_paths[\"static\"])\n        static_group_id = base_api.create_get_id(group_endpoint,group_body,need_random=True, field=\"name\")\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        if param[\"memberInfo\"] == \"provisioning-record\":\n            json_data[\"memberInfo\"] = pr_id\n        else:\n            json_data[\"memberInfo\"] = param[\"memberInfo\"]\n    \n        response_member = base_api.create(endpoint,json_data,need_random=False, field=None)\n>       assert response_member.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:153: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749031485603,"stop":1749031485901,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1749031485901,"stop":1749031487281,"duration":1380},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1749031577100,"stop":1749031577100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x00000200752DE830>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020074FF2F50>\nparam = {'memberInfo': 'reg123'}\n\n    @allure.feature('CREATE')\n    @allure.title(f'Test - create static group member with patameters {param}- mac address, regId, serial number,provisioning record id')\n    @pytest.mark.parametrize('param',[\n        {\n            \"memberInfo\": \"e4:6c:d1:43:44:0e\"\n        },\n        {\n            \"memberInfo\":\"reg123\"\n        },\n        {\n            \"memberInfo\":\"CXNK01A8D0C7\"\n        },\n        {\n            \"memberInfo\":\"provisioning-record\"\n        }\n        ])\n    def test_create_with_param(self,base_api,param):\n        # create provisioning-record\n        response_create = base_api.create_when_exist(pr_endpoint,file_paths[\"sip\"],{\"deviceId\": \"CXNK01A8D0C7\"},params=None)\n        pr_id = response_create.json()['_id']\n    \n        # create a static system group\n        group_body =  json_data = load_json(file_paths[\"static\"])\n        static_group_id = base_api.create_get_id(group_endpoint,group_body,need_random=True, field=\"name\")\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        if param[\"memberInfo\"] == \"provisioning-record\":\n            json_data[\"memberInfo\"] = pr_id\n        else:\n            json_data[\"memberInfo\"] = param[\"memberInfo\"]\n    \n        response_member = base_api.create(endpoint,json_data,need_random=False, field=None)\n>       assert response_member.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:153: AssertionError","steps":[],"attachments":[{"uid":"bf64ccbf2718db93","name":"Request Info","source":"bf64ccbf2718db93.json","type":"application/json","size":1176},{"uid":"e8fe5539a5bf9a8a","name":"Response Info","source":"e8fe5539a5bf9a8a.json","type":"application/json","size":119},{"uid":"bb22f5901afd2c92","name":"Request Info","source":"bb22f5901afd2c92.json","type":"application/json","size":186},{"uid":"84a7e3e9b5aa6554","name":"Response Info","source":"84a7e3e9b5aa6554.json","type":"application/json","size":1439},{"uid":"cc2c4933ea55f101","name":"Request Info","source":"cc2c4933ea55f101.json","type":"application/json","size":172},{"uid":"84d89e2af2352c9e","name":"Response Info","source":"84d89e2af2352c9e.json","type":"application/json","size":66},{"uid":"691e17a2c927e2c7","name":"Request Info","source":"691e17a2c927e2c7.json","type":"application/json","size":1176},{"uid":"24e84eb1a11bb078","name":"Response Info","source":"24e84eb1a11bb078.json","type":"application/json","size":1337},{"uid":"17079f77a581c330","name":"Request Info","source":"17079f77a581c330.json","type":"application/json","size":266},{"uid":"28a0d64c2cbaf958","name":"Response Info","source":"28a0d64c2cbaf958.json","type":"application/json","size":314},{"uid":"6f93720176b6a7c9","name":"Request Info","source":"6f93720176b6a7c9.json","type":"application/json","size":237},{"uid":"86489fe5ef1799e9","name":"Response Info","source":"86489fe5ef1799e9.json","type":"application/json","size":225}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":12,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"ACS Static Group Member API"},{"name":"feature","value":"CREATE"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_static_group_member"},{"name":"subSuite","value":"TestStaticGroupMember"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"40176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_static_group_member"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'memberInfo': 'reg123'}"}],"links":[{"name":"CTM-312349","url":"CTM-312349","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"23bd6c91e90f28da.json","parameterValues":["'test'","{'memberInfo': 'reg123'}"]}