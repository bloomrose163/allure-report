{"uid":"a208c797e25f8007","name":"Test - get all the system groups with different params:None","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_get_group_list_param","historyId":"6e906cdfd2675612863b10ab18505683","time":{"start":1748496461418,"stop":1748496462080,"duration":662},"status":"broken","statusMessage":"EOFError","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001E7BC95C910>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E7BDEC2A40>\nparam = {'excludeOnBoot': False, 'limit': 3, 'skip': 1, 'type': 'dynamic'}\n\n    @allure.title(f'Test - get all the system groups with different params:{params}')\n    @pytest.mark.parametrize('param', [\n        {\n        },\n        {\n             \"limit\": 2,\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"dynamic\"\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"static\"\n        }\n    ])\n    def test_get_group_list_param(self,base_api,param):\n>       response = base_api.get_list_by_param(endpoint,param)\n\ntestcase\\ACS\\test_system_group.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_api_acs.py:160: in get_list_by_param\n    return self.request(method='GET',endpoint=endpoint,params=params)\nutils\\base_api_acs.py:81: in request\n    self.attach_to_allure(method, url, params, data, json_data, headers, response)\nutils\\base_api_acs.py:119: in attach_to_allure\n    self.write_json_to_excel('C:\\git\\gcp_acs_api_mid.xlsx',request_json,response_json)\nutils\\base_api_acs.py:131: in write_json_to_excel\n    workbook = load_workbook(filename=file_path)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\reader\\excel.py:348: in load_workbook\n    reader.read()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\reader\\excel.py:303: in read\n    self.read_worksheets()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\reader\\excel.py:237: in read_worksheets\n    ws_parser.bind_all()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\worksheet\\_reader.py:465: in bind_all\n    self.bind_cells()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\worksheet\\_reader.py:368: in bind_cells\n    for idx, row in self.parser.parse():\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\worksheet\\_reader.py:156: in parse\n    for _, element in it:\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\xml\\etree\\ElementTree.py:1255: in iterator\n    data = source.read(16 * 1024)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\zipfile.py:925: in read\n    data = self._read1(n)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\zipfile.py:993: in _read1\n    data += self._read2(n - len(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipExtFile name='xl/worksheets/sheet1.xml' mode='r' compress_type=deflate>\nn = 4096\n\n    def _read2(self, n):\n        if self._compress_left <= 0:\n            return b''\n    \n        n = max(n, self.MIN_READ_SIZE)\n        n = min(n, self._compress_left)\n    \n        data = self._fileobj.read(n)\n        self._compress_left -= len(data)\n        if not data:\n>           raise EOFError\nE           EOFError\n\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\zipfile.py:1028: EOFError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748496142678,"stop":1748496142899,"duration":221},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1748496142899,"stop":1748496144284,"duration":1385},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"base_api","time":{"start":1748496461418,"stop":1748496461418,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"EOFError","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001E7BC95C910>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E7BDEC2A40>\nparam = {'excludeOnBoot': False, 'limit': 3, 'skip': 1, 'type': 'dynamic'}\n\n    @allure.title(f'Test - get all the system groups with different params:{params}')\n    @pytest.mark.parametrize('param', [\n        {\n        },\n        {\n             \"limit\": 2,\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"dynamic\"\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"static\"\n        }\n    ])\n    def test_get_group_list_param(self,base_api,param):\n>       response = base_api.get_list_by_param(endpoint,param)\n\ntestcase\\ACS\\test_system_group.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_api_acs.py:160: in get_list_by_param\n    return self.request(method='GET',endpoint=endpoint,params=params)\nutils\\base_api_acs.py:81: in request\n    self.attach_to_allure(method, url, params, data, json_data, headers, response)\nutils\\base_api_acs.py:119: in attach_to_allure\n    self.write_json_to_excel('C:\\git\\gcp_acs_api_mid.xlsx',request_json,response_json)\nutils\\base_api_acs.py:131: in write_json_to_excel\n    workbook = load_workbook(filename=file_path)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\reader\\excel.py:348: in load_workbook\n    reader.read()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\reader\\excel.py:303: in read\n    self.read_worksheets()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\reader\\excel.py:237: in read_worksheets\n    ws_parser.bind_all()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\worksheet\\_reader.py:465: in bind_all\n    self.bind_cells()\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\worksheet\\_reader.py:368: in bind_cells\n    for idx, row in self.parser.parse():\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\openpyxl\\worksheet\\_reader.py:156: in parse\n    for _, element in it:\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\xml\\etree\\ElementTree.py:1255: in iterator\n    data = source.read(16 * 1024)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\zipfile.py:925: in read\n    data = self._read1(n)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\zipfile.py:993: in _read1\n    data += self._read2(n - len(data))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipExtFile name='xl/worksheets/sheet1.xml' mode='r' compress_type=deflate>\nn = 4096\n\n    def _read2(self, n):\n        if self._compress_left <= 0:\n            return b''\n    \n        n = max(n, self.MIN_READ_SIZE)\n        n = min(n, self._compress_left)\n    \n        data = self._fileobj.read(n)\n        self._compress_left -= len(data)\n        if not data:\n>           raise EOFError\nE           EOFError\n\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\zipfile.py:1028: EOFError","steps":[],"attachments":[{"uid":"3d48889b677555b1","name":"Exception","source":"3d48889b677555b1.txt","type":"text/plain","size":0}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44636-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"param","value":"{'skip': 1, 'limit': 3, 'excludeOnBoot': False, 'type': 'dynamic'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"a208c797e25f8007.json","parameterValues":["'aws'","{'skip': 1, 'limit': 3, 'excludeOnBoot': False, 'type': 'dynamic'}"]}