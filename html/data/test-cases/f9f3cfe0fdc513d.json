{"uid":"f9f3cfe0fdc513d","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"9263e604e50e9044ae7213f6b8554e44","time":{"start":1748341504714,"stop":1748341516343,"duration":11629},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F1D50>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB3C1720>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748341295951,"stop":1748341296045,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1748341296045,"stop":1748341297421,"duration":1376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"base_api","time":{"start":1748341504711,"stop":1748341504713,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F1D50>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB3C1720>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError","steps":[],"attachments":[{"uid":"28a13aa874a48878","name":"Request Info","source":"28a13aa874a48878.json","type":"application/json","size":688},{"uid":"a9818c4af3cfcbc9","name":"Response Info","source":"a9818c4af3cfcbc9.json","type":"application/json","size":119},{"uid":"64008dd24a1ea9d1","name":"Request Info","source":"64008dd24a1ea9d1.json","type":"application/json","size":186},{"uid":"a8aebdd5eede0f26","name":"Response Info","source":"a8aebdd5eede0f26.json","type":"application/json","size":1447},{"uid":"d49dec609b5e586","name":"Request Info","source":"d49dec609b5e586.json","type":"application/json","size":172},{"uid":"cd94a4c562751843","name":"Response Info","source":"cd94a4c562751843.json","type":"application/json","size":66},{"uid":"976854003c971d21","name":"Request Info","source":"976854003c971d21.json","type":"application/json","size":688},{"uid":"89122a79872453f6","name":"Response Info","source":"89122a79872453f6.json","type":"application/json","size":921},{"uid":"4c21c8a12d237701","name":"Request Info","source":"4c21c8a12d237701.json","type":"application/json","size":169},{"uid":"367e2685c50c918f","name":"Response Info","source":"367e2685c50c918f.json","type":"application/json","size":921},{"uid":"f80fa0a9c0fcffc9","name":"Request Info","source":"f80fa0a9c0fcffc9.json","type":"application/json","size":723},{"uid":"91a0f5311d0f012e","name":"Response Info","source":"91a0f5311d0f012e.json","type":"application/json","size":920},{"uid":"a97ea36cb9953ba9","name":"Request Info","source":"a97ea36cb9953ba9.json","type":"application/json","size":186},{"uid":"a5aaa24661fcf0e8","name":"Response Info","source":"a5aaa24661fcf0e8.json","type":"application/json","size":1000},{"uid":"d1815f41d8035dfc","name":"Request Info","source":"d1815f41d8035dfc.json","type":"application/json","size":1011},{"uid":"432b8d9f75726569","name":"Response Info","source":"432b8d9f75726569.json","type":"application/json","size":919},{"uid":"ae0678ef5d22e251","name":"Request Info","source":"ae0678ef5d22e251.json","type":"application/json","size":181},{"uid":"d119e5602b9ccac2","name":"Response Info","source":"d119e5602b9ccac2.json","type":"application/json","size":101}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":18,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"42176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_service_off.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"f9f3cfe0fdc513d.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_service_off.json'"]}