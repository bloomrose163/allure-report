{"uid":"92fd4e108ec055ed","name":"Test - Query device count with invalid ","fullName":"testcase.ACS.test_device.TestDevice#test_get_invalid_param","historyId":"43cdde2d7b9f9882c6f6916901cb11e1","time":{"start":1749806304535,"stop":1749806309767,"duration":5232},"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001C2C2429B40>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C2C4E97190>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749806249152,"stop":1749806249231,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749806249231,"stop":1749806250516,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"base_api","time":{"start":1749806304532,"stop":1749806304534,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001C2C2429B40>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C2C4E97190>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","steps":[],"attachments":[{"uid":"9766d8b4c5beb6ef","name":"Request Info","source":"9766d8b4c5beb6ef.json","type":"application/json","size":175},{"uid":"76d6116bb646fd8e","name":"Response Info","source":"76d6116bb646fd8e.json","type":"application/json","size":56},{"uid":"2581ff1a4cf2fd0b","name":"Request Info","source":"2581ff1a4cf2fd0b.json","type":"application/json","size":169},{"uid":"9e2d9341d5d75b49","name":"Response Info","source":"9e2d9341d5d75b49.json","type":"application/json","size":101}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"5088-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14685","url":"GCPT-14685","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"92fd4e108ec055ed.json","parameterValues":["'test'"]}