{"uid":"d91b40065127cdca","name":"Test - get provisioning record list","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_get_list","historyId":"721257186b7061db99c1b4ced36029fd","time":{"start":1748590173089,"stop":1748590173550,"duration":461},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000019F99DC9030>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000019F99CE6DD0>\nparams = {'deviceId': 'aereg123'}\n\n    @allure.title('Test - get provisioning record list')\n    @pytest.mark.parametrize('params',[\n        {\n            \"limit\": 2\n        },\n        {\n    \n            \"deviceId\": \"CXNK00AFB83B\"\n        },\n                {\n    \n            \"deviceId\": \"60:db:98:6f:27:dd\"\n    \n        },              {\n    \n            \"deviceId\": \"aereg123\"\n        },\n        {\n    \n            \"deviceId\": \"10.245.222.132\"\n        },\n        {\n    \n            \"deviceId\": \"2550-60db98-CXNK00AFB83B\"\n        },\n                {\n            \"opMode\": \"AE\"\n        },\n                {\n           \"opMode\": \"Managed ONT\",\n            \"limit\": 2\n        }\n    ])\n    def test_get_list(self,base_api,params):\n      response = base_api.get_list_by_param(endpoint,params)\n>     assert response.status_code == 200\nE     assert 500 == 200\nE      +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:221: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748590122300,"stop":1748590122547,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1748590122547,"stop":1748590123981,"duration":1434},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1748590173087,"stop":1748590173088,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000019F99DC9030>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000019F99CE6DD0>\nparams = {'deviceId': 'aereg123'}\n\n    @allure.title('Test - get provisioning record list')\n    @pytest.mark.parametrize('params',[\n        {\n            \"limit\": 2\n        },\n        {\n    \n            \"deviceId\": \"CXNK00AFB83B\"\n        },\n                {\n    \n            \"deviceId\": \"60:db:98:6f:27:dd\"\n    \n        },              {\n    \n            \"deviceId\": \"aereg123\"\n        },\n        {\n    \n            \"deviceId\": \"10.245.222.132\"\n        },\n        {\n    \n            \"deviceId\": \"2550-60db98-CXNK00AFB83B\"\n        },\n                {\n            \"opMode\": \"AE\"\n        },\n                {\n           \"opMode\": \"Managed ONT\",\n            \"limit\": 2\n        }\n    ])\n    def test_get_list(self,base_api,params):\n      response = base_api.get_list_by_param(endpoint,params)\n>     assert response.status_code == 200\nE     assert 500 == 200\nE      +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:221: AssertionError","steps":[],"attachments":[{"uid":"a0bcf92b95a743e0","name":"Request Info","source":"a0bcf92b95a743e0.json","type":"application/json","size":177},{"uid":"34fed6e71d887876","name":"Response Info","source":"34fed6e71d887876.json","type":"application/json","size":162}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"23348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"},{"name":"params","value":"{'deviceId': 'aereg123'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d91b40065127cdca.json","parameterValues":["'dev'","{'deviceId': 'aereg123'}"]}