{"uid":"722606fd5da14ec6","name":"Test - create record & delete twice ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test__create_get_delete_twice","historyId":"e82da96c011a1a932e21351fd4ae68c6","time":{"start":1750099049889,"stop":1750099070256,"duration":20367},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x00000263F67745E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000263F6903AF0>\n\n    @allure.title('Test - create record & delete twice ')\n    def test__create_get_delete_twice(self,base_api):\n       # create a group\n      group_endpoint = \"group\"\n      json_data = load_json(file_paths[\"filter\"])\n      response_create = base_api.create(group_endpoint,json_data,need_random=True, field=\"name\")\n      assert response_create.status_code == 200\n      group_id = response_create.json()['_id']\n    \n      # create workflow\n      random = base_api.generate_ramdom(endpoint)\n      json_data = load_json(file_paths[\"workflow\"])\n      json_data[\"name\"] = random\n      json_data[\"groups\"] = [group_id]\n>     ACSAPI.verify_create_get_delete_twice(self,base_api,endpoint,json_data)\n\ntestcase\\ACS\\test_workflow.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_workflow.TestWorkflow object at 0x00000263F67745E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000263F6903AF0>\nendpoint = 'workflow'\njson_data = {'actions': [{'actionType': 'Reboot'}], 'bPriorNewAndFailed': True, 'description': 'created by apple', 'execPolicy': {'initialTrigger': {'cpeEvent': 'CC EVENT - On Boot', 'type': 'CPE Event'}}, ...}\n\n    def verify_create_get_delete_twice(self,base_api,endpoint,json_data):\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n        # check if the record could be created with same key, 200 means Yes, 409 means No\n        print(\"create the same body again\")\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 409\n    \n        # get the record\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n    \n        #  delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_api_acs_common.py:51: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750097856594,"stop":1750097856894,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1750097856894,"stop":1750097858111,"duration":1217},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"base_api","time":{"start":1750099049887,"stop":1750099049889,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x00000263F67745E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000263F6903AF0>\n\n    @allure.title('Test - create record & delete twice ')\n    def test__create_get_delete_twice(self,base_api):\n       # create a group\n      group_endpoint = \"group\"\n      json_data = load_json(file_paths[\"filter\"])\n      response_create = base_api.create(group_endpoint,json_data,need_random=True, field=\"name\")\n      assert response_create.status_code == 200\n      group_id = response_create.json()['_id']\n    \n      # create workflow\n      random = base_api.generate_ramdom(endpoint)\n      json_data = load_json(file_paths[\"workflow\"])\n      json_data[\"name\"] = random\n      json_data[\"groups\"] = [group_id]\n>     ACSAPI.verify_create_get_delete_twice(self,base_api,endpoint,json_data)\n\ntestcase\\ACS\\test_workflow.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_workflow.TestWorkflow object at 0x00000263F67745E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000263F6903AF0>\nendpoint = 'workflow'\njson_data = {'actions': [{'actionType': 'Reboot'}], 'bPriorNewAndFailed': True, 'description': 'created by apple', 'execPolicy': {'initialTrigger': {'cpeEvent': 'CC EVENT - On Boot', 'type': 'CPE Event'}}, ...}\n\n    def verify_create_get_delete_twice(self,base_api,endpoint,json_data):\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n        # check if the record could be created with same key, 200 means Yes, 409 means No\n        print(\"create the same body again\")\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 409\n    \n        # get the record\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n    \n        #  delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_api_acs_common.py:51: AssertionError","steps":[],"attachments":[{"uid":"e46a2deddc61010d","name":"Request Info","source":"e46a2deddc61010d.json","type":"application/json","size":418},{"uid":"8f693845c004d1db","name":"Response Info","source":"8f693845c004d1db.json","type":"application/json","size":681},{"uid":"800ac88c2834ec68","name":"Request Info","source":"800ac88c2834ec68.json","type":"application/json","size":545},{"uid":"b08387843da6bd59","name":"Response Info","source":"b08387843da6bd59.json","type":"application/json","size":675},{"uid":"197dde5ee2889be3","name":"Request Info","source":"197dde5ee2889be3.json","type":"application/json","size":545},{"uid":"da483b4e67c5a376","name":"Response Info","source":"da483b4e67c5a376.json","type":"application/json","size":234},{"uid":"2d4da56dcbf16820","name":"Request Info","source":"2d4da56dcbf16820.json","type":"application/json","size":158},{"uid":"7c3b21b5d62e7e4e","name":"Response Info","source":"7c3b21b5d62e7e4e.json","type":"application/json","size":685},{"uid":"7ab35d3abe0c4792","name":"Request Info","source":"7ab35d3abe0c4792.json","type":"application/json","size":161},{"uid":"c440b9ad4c299744","name":"Response Info","source":"c440b9ad4c299744.json","type":"application/json","size":59}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":10,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"2488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"722606fd5da14ec6.json","parameterValues":["'test'"]}