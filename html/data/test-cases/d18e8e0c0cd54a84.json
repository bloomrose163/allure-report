{"uid":"d18e8e0c0cd54a84","name":"Test - create static system group, create static group members , display the system group and check this group can't be deleted","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_group_static","historyId":"6419f39ea8ee9a26f43b002bb19b56f9","time":{"start":1748370128572,"stop":1748370133652,"duration":5080},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x00000227BDE174C0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227BF2713C0>\n\n    @allure.title('Test - create static system group, create static group members , display the system group and check this group can\\'t be deleted')\n    def test_create_group_static(self,base_api):\n        # create a static system group\n        response = base_api.create(endpoint,file_paths['static'],need_random=True, field=\"name\")\n        assert response.status_code == 200\n        static_group_id = response.json()['_id']\n    \n        #  create a static group member to this group\n        member_endpoint = 'static-group-member'\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n    \n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n    \n        response_member = base_api.create_with_jsondata(member_endpoint,json_data,need_random=False, field=None)\n        member_id = response_member.json()['_id']\n        assert response_member.status_code == 200\n    \n        # get static system group with member info\n        response_static_group = base_api.get_by_id(endpoint,static_group_id)\n        assert response_static_group.status_code == 200\n        # assert response_static_group.json()['members'][0]['_id'] == member_id\n        #    will add compare all the  response_static_group['members'][0] with response_member\n            # delete the group\n        response_delete= base_api.delete(endpoint,params,static_group_id)\n>       assert response_delete.status_code == 403\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:272: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748369745210,"stop":1748369745301,"duration":91},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1748369745302,"stop":1748369746628,"duration":1326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1748370128570,"stop":1748370128571,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x00000227BDE174C0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227BF2713C0>\n\n    @allure.title('Test - create static system group, create static group members , display the system group and check this group can\\'t be deleted')\n    def test_create_group_static(self,base_api):\n        # create a static system group\n        response = base_api.create(endpoint,file_paths['static'],need_random=True, field=\"name\")\n        assert response.status_code == 200\n        static_group_id = response.json()['_id']\n    \n        #  create a static group member to this group\n        member_endpoint = 'static-group-member'\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n    \n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n    \n        response_member = base_api.create_with_jsondata(member_endpoint,json_data,need_random=False, field=None)\n        member_id = response_member.json()['_id']\n        assert response_member.status_code == 200\n    \n        # get static system group with member info\n        response_static_group = base_api.get_by_id(endpoint,static_group_id)\n        assert response_static_group.status_code == 200\n        # assert response_static_group.json()['members'][0]['_id'] == member_id\n        #    will add compare all the  response_static_group['members'][0] with response_member\n            # delete the group\n        response_delete= base_api.delete(endpoint,params,static_group_id)\n>       assert response_delete.status_code == 403\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:272: AssertionError","steps":[],"attachments":[{"uid":"342b32298866edfe","name":"Request Info","source":"342b32298866edfe.json","type":"application/json","size":266},{"uid":"3491d242625298ff","name":"Response Info","source":"3491d242625298ff.json","type":"application/json","size":314},{"uid":"b9e0dc389557d7c6","name":"Request Info","source":"b9e0dc389557d7c6.json","type":"application/json","size":263},{"uid":"a0313cad6478d3a1","name":"Response Info","source":"a0313cad6478d3a1.json","type":"application/json","size":247},{"uid":"473ef4ec699e4c7f","name":"Request Info","source":"473ef4ec699e4c7f.json","type":"application/json","size":155},{"uid":"cab7267cc7e39771","name":"Response Info","source":"cab7267cc7e39771.json","type":"application/json","size":614},{"uid":"ad58409f09686b28","name":"Request Info","source":"ad58409f09686b28.json","type":"application/json","size":158},{"uid":"9c06f2fa4b65103e","name":"Response Info","source":"9c06f2fa4b65103e.json","type":"application/json","size":148}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":8,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"32716-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d18e8e0c0cd54a84.json","parameterValues":["'test'"]}