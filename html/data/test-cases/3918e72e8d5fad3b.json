{"uid":"3918e72e8d5fad3b","name":"Test - delete record ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_delete_by_param","historyId":"f3fb29a8c87de00c4aff0c481625e741","time":{"start":1749623443714,"stop":1749623449994,"duration":6280},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023D6CCAE350>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6FB8D6F0>\nparam = {'name': 'workflowhBjghi'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"workflowhBjghi\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Missing Document ID Or Filter(s)!'\n      else:\n        assert response_delete.status_code == 200\n>       assert count  == response_delete.json()['numberOfRecords']\nE       assert 1 == 0\n\ntestcase\\ACS\\test_workflow.py:127: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749622690689,"stop":1749622690900,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749622690901,"stop":1749622692264,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749623443703,"stop":1749623443713,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023D6CCAE350>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6FB8D6F0>\nparam = {'name': 'workflowhBjghi'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"workflowhBjghi\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Missing Document ID Or Filter(s)!'\n      else:\n        assert response_delete.status_code == 200\n>       assert count  == response_delete.json()['numberOfRecords']\nE       assert 1 == 0\n\ntestcase\\ACS\\test_workflow.py:127: AssertionError","steps":[],"attachments":[{"uid":"da1c706a6949969e","name":"Request Info","source":"da1c706a6949969e.json","type":"application/json","size":171},{"uid":"cc3e1947d07142b8","name":"Response Info","source":"cc3e1947d07142b8.json","type":"application/json","size":429},{"uid":"5e03e37cdab56fb2","name":"Request Info","source":"5e03e37cdab56fb2.json","type":"application/json","size":174},{"uid":"1bee8dbe4b843743","name":"Response Info","source":"1bee8dbe4b843743.json","type":"application/json","size":66}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":4},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'name': 'workflowhBjghi'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"3918e72e8d5fad3b.json","parameterValues":["'test'","{'name': 'workflowhBjghi'}"]}