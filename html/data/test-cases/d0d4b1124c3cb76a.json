{"uid":"d0d4b1124c3cb76a","name":"Test - test the paramter are case-insensitive ","fullName":"testcase.ACS.test_configuration_profile.TestConfigurationProfile#test_get_case_sensitive","historyId":"b98e730da32255a90444dae343e94bde","time":{"start":1748628999279,"stop":1748629000385,"duration":1106},"status":"failed","statusMessage":"AssertionError: assert 1 != 1","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x000001B320E55870>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001B32074D720>\n\n    @allure.title('Test - test the paramter are case-insensitive ')\n    def test_get_case_sensitive(self,base_api):\n      name = \"test_ds_hk3_tp\"\n      params={\"name\":name}\n>     ACSAPI.verify_get_case_sensitive(self,base_api,endpoint,params,case_sen=True,get_count=False)\n\ntestcase\\ACS\\test_configuration_profile.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x000001B320E55870>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001B32074D720>\nendpoint = 'configuration-profile', params = {'name': 'test_ds_hk3_tp'}\ncase_sen = True, get_count = False\n\n    def verify_get_case_sensitive(self,base_api,endpoint,params,case_sen=False,get_count=False):\n    #   check query with lower charactors\n        response = base_api.get_list_by_param(endpoint,params)\n        assert response.status_code == 200\n        count_lower = len(response.json())\n    \n      #   check query with super charactors\n        upper_params=uppercased_dict = {key: value.upper() for key, value in params.items()}\n        response_upper = base_api.get_list_by_param(endpoint,upper_params)\n        assert response_upper.status_code == 200\n        count_upper = len(response_upper.json())\n        print(f\"the lower count is {count_lower} and the upper count is {count_upper}\")\n        if case_sen == False:\n         assert count_lower == count_upper\n        else:\n>        assert count_lower != count_upper\nE        assert 1 != 1\n\ntestcase\\ACS\\test_api_acs_common.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748628992557,"stop":1748628992826,"duration":269},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1748628992826,"stop":1748628994234,"duration":1408},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"base_api","time":{"start":1748628999279,"stop":1748628999279,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 != 1","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x000001B320E55870>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001B32074D720>\n\n    @allure.title('Test - test the paramter are case-insensitive ')\n    def test_get_case_sensitive(self,base_api):\n      name = \"test_ds_hk3_tp\"\n      params={\"name\":name}\n>     ACSAPI.verify_get_case_sensitive(self,base_api,endpoint,params,case_sen=True,get_count=False)\n\ntestcase\\ACS\\test_configuration_profile.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x000001B320E55870>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001B32074D720>\nendpoint = 'configuration-profile', params = {'name': 'test_ds_hk3_tp'}\ncase_sen = True, get_count = False\n\n    def verify_get_case_sensitive(self,base_api,endpoint,params,case_sen=False,get_count=False):\n    #   check query with lower charactors\n        response = base_api.get_list_by_param(endpoint,params)\n        assert response.status_code == 200\n        count_lower = len(response.json())\n    \n      #   check query with super charactors\n        upper_params=uppercased_dict = {key: value.upper() for key, value in params.items()}\n        response_upper = base_api.get_list_by_param(endpoint,upper_params)\n        assert response_upper.status_code == 200\n        count_upper = len(response_upper.json())\n        print(f\"the lower count is {count_lower} and the upper count is {count_upper}\")\n        if case_sen == False:\n         assert count_lower == count_upper\n        else:\n>        assert count_lower != count_upper\nE        assert 1 != 1\n\ntestcase\\ACS\\test_api_acs_common.py:81: AssertionError","steps":[],"attachments":[{"uid":"64fcea4d1f0b9f36","name":"Request Info","source":"64fcea4d1f0b9f36.json","type":"application/json","size":183},{"uid":"c238bfbdea3bee19","name":"Response Info","source":"c238bfbdea3bee19.json","type":"application/json","size":929},{"uid":"b8409320488fbb21","name":"Request Info","source":"b8409320488fbb21.json","type":"application/json","size":183},{"uid":"ba51771220aeb002","name":"Response Info","source":"ba51771220aeb002.json","type":"application/json","size":929}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_configuration_profile"},{"name":"subSuite","value":"TestConfigurationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"50656-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_configuration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d0d4b1124c3cb76a.json","parameterValues":["'dev'"]}