{"uid":"ef4903f374b264aa","name":"Test - create system group with special characters :{params}","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_group_special","historyId":"a713aba09674f0c501a167b3c23153d2","time":{"start":1749201725920,"stop":1749201727485,"duration":1565},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001C3BF8CC0D0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C2576AA0>\ngroup_name = '{var}'\n\n    @allure.title('Test - create system group with special characters :{params}')\n    @pytest.mark.parametrize(\"group_name\",['~!@#$%^&*{}?/+-','{var}'])\n    def test_create_group_special(self,base_api,group_name):\n        json_data = load_json(file_paths[\"dynamic\"])\n        json_data[\"group_name\"] = group_name\n        response = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:244: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749200886081,"stop":1749200886181,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1749200886181,"stop":1749200887728,"duration":1547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1749201725904,"stop":1749201725920,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001C3BF8CC0D0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C2576AA0>\ngroup_name = '{var}'\n\n    @allure.title('Test - create system group with special characters :{params}')\n    @pytest.mark.parametrize(\"group_name\",['~!@#$%^&*{}?/+-','{var}'])\n    def test_create_group_special(self,base_api,group_name):\n        json_data = load_json(file_paths[\"dynamic\"])\n        json_data[\"group_name\"] = group_name\n        response = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:244: AssertionError","steps":[],"attachments":[{"uid":"2820298a1f7d3107","name":"Request Info","source":"2820298a1f7d3107.json","type":"application/json","size":279},{"uid":"a8948e21e53e799e","name":"Response Info","source":"a8948e21e53e799e.json","type":"application/json","size":114}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44708-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"group_name","value":"'{var}'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"ef4903f374b264aa.json","parameterValues":["'aws'","'{var}'"]}