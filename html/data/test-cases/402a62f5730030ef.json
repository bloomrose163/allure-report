{"uid":"402a62f5730030ef","name":"Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_sop_crud","historyId":"c0934e2f6dbc0229bd7f6d9f59785128","time":{"start":1750184662845,"stop":1750184666939,"duration":4094},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000002C9869E00D0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002C98AF57A30>\n\n    @allure.feature('CREATE')\n    # @allure.issue('GCPT-14626')\n    @allure.issue('GCPT-14831')\n    @allure.title('Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"service_orchestration_profile_create\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:49: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750184251184,"stop":1750184251484,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1750184251484,"stop":1750184252696,"duration":1212},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1750184662845,"stop":1750184662845,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000002C9869E00D0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002C98AF57A30>\n\n    @allure.feature('CREATE')\n    # @allure.issue('GCPT-14626')\n    @allure.issue('GCPT-14831')\n    @allure.title('Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"service_orchestration_profile_create\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:49: AssertionError","steps":[],"attachments":[{"uid":"1a93098528903c88","name":"Request Info","source":"1a93098528903c88.json","type":"application/json","size":655},{"uid":"3f99920c3813a92f","name":"Response Info","source":"3f99920c3813a92f.json","type":"application/json","size":86}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"feature","value":"CREATE"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"40028-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14831","url":"GCPT-14831","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"402a62f5730030ef.json","parameterValues":["'test'"]}