{"uid":"4ad176e1a16b9573","name":"Test - get list ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_get_list","historyId":"41d51ff3da9a32a0b6a40b6ad75fc47e","time":{"start":1748341710947,"stop":1748341711781,"duration":834},"status":"failed","statusMessage":"AssertionError: assert 0 == 2\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000020EF9E4F2B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB822CE0>\nparams = {'opMode': 'AE'}\n\n    @allure.title('Test - get list ')\n    # @pytest.mark.parametrize('params',[{\"deviceId\":\"CXNK0151C334\"},{\"deviceId\":\"04:bc:9f:21:d0:6d\"},{\"deviceId\":\"reg123\"},{\"limit\": 3}])\n    # @pytest.mark.parametrize('params',[{\"limit\": 5,\"sort\": \"name_desc\"}])\n    @pytest.mark.parametrize('params',[\n        {\n            \"skip\": 1,\n            \"limit\": 3\n        },\n        {\n            \"opMode\": \"AE\"\n        },\n    \n    ])\n    def test_get_list(self,base_api,params):\n      response = base_api.get_list_by_param(endpoint,params)\n      assert response.status_code == 200\n>     assert len(response.json())  == 2\nE     assert 0 == 2\nE      +  where 0 = len([])\nE      +    where [] = <bound method Response.json of <Response [200]>>()\nE      +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntestcase\\ACS\\test_workflow.py:41: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748341295951,"stop":1748341296045,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1748341296045,"stop":1748341297421,"duration":1376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"base_api","time":{"start":1748341710945,"stop":1748341710947,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 0 == 2\n +  where 0 = len([])\n +    where [] = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000020EF9E4F2B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB822CE0>\nparams = {'opMode': 'AE'}\n\n    @allure.title('Test - get list ')\n    # @pytest.mark.parametrize('params',[{\"deviceId\":\"CXNK0151C334\"},{\"deviceId\":\"04:bc:9f:21:d0:6d\"},{\"deviceId\":\"reg123\"},{\"limit\": 3}])\n    # @pytest.mark.parametrize('params',[{\"limit\": 5,\"sort\": \"name_desc\"}])\n    @pytest.mark.parametrize('params',[\n        {\n            \"skip\": 1,\n            \"limit\": 3\n        },\n        {\n            \"opMode\": \"AE\"\n        },\n    \n    ])\n    def test_get_list(self,base_api,params):\n      response = base_api.get_list_by_param(endpoint,params)\n      assert response.status_code == 200\n>     assert len(response.json())  == 2\nE     assert 0 == 2\nE      +  where 0 = len([])\nE      +    where [] = <bound method Response.json of <Response [200]>>()\nE      +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntestcase\\ACS\\test_workflow.py:41: AssertionError","steps":[],"attachments":[{"uid":"7709dbeac9bf63d5","name":"Request Info","source":"7709dbeac9bf63d5.json","type":"application/json","size":148},{"uid":"2a39d1c15b4d95aa","name":"Response Info","source":"2a39d1c15b4d95aa.json","type":"application/json","size":38}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"42176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"params","value":"{'opMode': 'AE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"4ad176e1a16b9573.json","parameterValues":["'aws'","{'opMode': 'AE'}"]}