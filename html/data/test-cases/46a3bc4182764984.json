{"uid":"46a3bc4182764984","name":"Test - Query device count with invalid ","fullName":"testcase.ACS.test_device.TestDevice#test_get_invalid_param","historyId":"43cdde2d7b9f9882c6f6916901cb11e1","time":{"start":1750357081845,"stop":1750357090691,"duration":8846},"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x00000277377DE020>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002773A34F0D0>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750357007158,"stop":1750357007381,"duration":223},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1750357007381,"stop":1750357009170,"duration":1789},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1750357081845,"stop":1750357081845,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x00000277377DE020>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002773A34F0D0>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","steps":[],"attachments":[{"uid":"4e565990d3ad9eb4","name":"Request Info","source":"4e565990d3ad9eb4.json","type":"application/json","size":175},{"uid":"a0f88d2c6f8b9be2","name":"Response Info","source":"a0f88d2c6f8b9be2.json","type":"application/json","size":56},{"uid":"b990f9bfa552e250","name":"Request Info","source":"b990f9bfa552e250.json","type":"application/json","size":169},{"uid":"cdaa6f997d1d35b7","name":"Response Info","source":"cdaa6f997d1d35b7.json","type":"application/json","size":101}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":4},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"25216-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14685","url":"GCPT-14685","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"46a3bc4182764984.json","parameterValues":["'test'"]}