{"uid":"9057cd46a4e81500","name":"Test - create service orchestration profile, display the service orchestration profile and check this profile can't be deleted","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_group_static_delete","historyId":"1af266c0830ab43f1dec40d6ebde20b8","time":{"start":1748945439849,"stop":1748945444732,"duration":4883},"status":"failed","statusMessage":"AssertionError: assert 400 == 404\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x0000026456A77A30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000026456A07C40>\n\n    @allure.feature('CREATE')\n    @allure.title('Test - create service orchestration profile, display the service orchestration profile and check this profile can\\'t be deleted')\n    def test_create_group_static_delete(self,base_api):\n        json_data = load_json(file_paths[\"sop_create\"])\n        # json_data ={\"category\" : \"Video Service\"}\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\",no_org=True)\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # get service orchestration profile member info\n        response_get = base_api.get_by_id_without_org(endpoint,model_id)\n        assert response_get.status_code == 200\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response_get.json()))\n    \n    \n        # delete the group\n        response_delete= base_api.delete(endpoint,param,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n        # assert response_delete.json()['error'] == \"This group is currently in use by one or more static group member(s) thus cannot be deleted\"\n    \n        #  # delete the memner\n        response_delete= base_api.delete(endpoint,param,model_id)\n>       assert response_delete.status_code == 404\nE       assert 400 == 404\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:56: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748945322286,"stop":1748945322531,"duration":245},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1748945322531,"stop":1748945323934,"duration":1403},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"base_api","time":{"start":1748945439846,"stop":1748945439849,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 404\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x0000026456A77A30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000026456A07C40>\n\n    @allure.feature('CREATE')\n    @allure.title('Test - create service orchestration profile, display the service orchestration profile and check this profile can\\'t be deleted')\n    def test_create_group_static_delete(self,base_api):\n        json_data = load_json(file_paths[\"sop_create\"])\n        # json_data ={\"category\" : \"Video Service\"}\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\",no_org=True)\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # get service orchestration profile member info\n        response_get = base_api.get_by_id_without_org(endpoint,model_id)\n        assert response_get.status_code == 200\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response_get.json()))\n    \n    \n        # delete the group\n        response_delete= base_api.delete(endpoint,param,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n        # assert response_delete.json()['error'] == \"This group is currently in use by one or more static group member(s) thus cannot be deleted\"\n    \n        #  # delete the memner\n        response_delete= base_api.delete(endpoint,param,model_id)\n>       assert response_delete.status_code == 404\nE       assert 400 == 404\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:56: AssertionError","steps":[],"attachments":[{"uid":"631fb4bd1dc003ad","name":"Request Info","source":"631fb4bd1dc003ad.json","type":"application/json","size":645},{"uid":"a7903d54e71613af","name":"Response Info","source":"a7903d54e71613af.json","type":"application/json","size":1539},{"uid":"4028de78aece4277","name":"Request Info","source":"4028de78aece4277.json","type":"application/json","size":168},{"uid":"31ae19923cabade9","name":"Response Info","source":"31ae19923cabade9.json","type":"application/json","size":604},{"uid":"338702bd7b6e635e","name":"Request Info","source":"338702bd7b6e635e.json","type":"application/json","size":182},{"uid":"c78b2c00c80b4301","name":"Response Info","source":"c78b2c00c80b4301.json","type":"application/json","size":66},{"uid":"aab8f41be0d35d9e","name":"Request Info","source":"aab8f41be0d35d9e.json","type":"application/json","size":182},{"uid":"91cebb6aee4ab2b5","name":"Response Info","source":"91cebb6aee4ab2b5.json","type":"application/json","size":72}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":8,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"feature","value":"CREATE"},{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"48060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"9057cd46a4e81500.json","parameterValues":["'test'"]}