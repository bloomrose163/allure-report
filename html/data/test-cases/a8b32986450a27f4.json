{"uid":"a8b32986450a27f4","name":"Test - CRUD - create service orchestration profile with Voice Service SIP","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_data_voice","historyId":"1762be9836671dbd85ec2b88d1e2a52b","time":{"start":1749623113681,"stop":1749623116608,"duration":2927},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x0000023D6CD30730>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6E2D6BC0>\nvoice_type = 'SIP'\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14802')\n    @allure.title('Test - CRUD - create service orchestration profile with Voice Service {voice_type}')\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    @pytest.mark.parametrize('voice_type', [ \"SIP\", \"H.248\", \"MGCP\", \"X_000631_TDMGW\" ])\n    def test_create_data_voice(self,base_api,voice_type):\n        json_data = load_body(\"service_orchestration_profile_voice\")\n        json_data[\"type\"] = voice_type\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:247: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749622690689,"stop":1749622690900,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749622690901,"stop":1749622692264,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749623113666,"stop":1749623113680,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x0000023D6CD30730>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6E2D6BC0>\nvoice_type = 'SIP'\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14802')\n    @allure.title('Test - CRUD - create service orchestration profile with Voice Service {voice_type}')\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    @pytest.mark.parametrize('voice_type', [ \"SIP\", \"H.248\", \"MGCP\", \"X_000631_TDMGW\" ])\n    def test_create_data_voice(self,base_api,voice_type):\n        json_data = load_body(\"service_orchestration_profile_voice\")\n        json_data[\"type\"] = voice_type\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:247: AssertionError","steps":[],"attachments":[{"uid":"ffdb7785d7ee499d","name":"Request Info","source":"ffdb7785d7ee499d.json","type":"application/json","size":2032},{"uid":"94cb6daf48774d6c","name":"Response Info","source":"94cb6daf48774d6c.json","type":"application/json","size":225}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"feature","value":"CREATE"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"voice_type","value":"'SIP'"}],"links":[{"name":"GCPT-14802","url":"GCPT-14802","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"a8b32986450a27f4.json","parameterValues":["'test'","'SIP'"]}