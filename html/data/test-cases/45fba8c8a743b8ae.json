{"uid":"45fba8c8a743b8ae","name":"Test - crud record ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_crud","historyId":"8cfdcf974e704d628700c640c0cdeae3","time":{"start":1748715531339,"stop":1748715533995,"duration":2656},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023DBDD8CC10>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBEFC3910>\n\n    @allure.title('Test - crud record ')\n    def test_crud(self,base_api):\n        global model_id\n        # create a record\n        global groups\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        model_id = response_create.json()['_id']\n        assert response_create.status_code == 200\n        # model_id = 'e002e1f5-8382-4f49-a445-1da88df9e99a'\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"update\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,True,\"name\")\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_workflow.py:141: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748715328519,"stop":1748715328724,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1748715328724,"stop":1748715330109,"duration":1385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1748715531339,"stop":1748715531339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023DBDD8CC10>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBEFC3910>\n\n    @allure.title('Test - crud record ')\n    def test_crud(self,base_api):\n        global model_id\n        # create a record\n        global groups\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        model_id = response_create.json()['_id']\n        assert response_create.status_code == 200\n        # model_id = 'e002e1f5-8382-4f49-a445-1da88df9e99a'\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"update\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,True,\"name\")\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_workflow.py:141: AssertionError","steps":[],"attachments":[{"uid":"4ee0fda5580bebf9","name":"Request Info","source":"4ee0fda5580bebf9.json","type":"application/json","size":490},{"uid":"d56acc4888f160c6","name":"Response Info","source":"d56acc4888f160c6.json","type":"application/json","size":603},{"uid":"9e47a23aa87c6a73","name":"Request Info","source":"9e47a23aa87c6a73.json","type":"application/json","size":157},{"uid":"145594b753bdc354","name":"Response Info","source":"145594b753bdc354.json","type":"application/json","size":613},{"uid":"fa7251977035fd2","name":"Request Info","source":"fa7251977035fd2.json","type":"application/json","size":528},{"uid":"767f790386eb5888","name":"Response Info","source":"767f790386eb5888.json","type":"application/json","size":95}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":6,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"46036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"45fba8c8a743b8ae.json","parameterValues":["'dev'"]}