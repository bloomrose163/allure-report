{"uid":"427dcf96f22a36ae","name":"Test - delete record ","fullName":"testcase.ACS.test_configuration_profile.TestConfigurationProfile#test_delete_by_param","historyId":"6da82e3fb1176ed9075be55a5065945f","time":{"start":1748590131464,"stop":1748590132394,"duration":930},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x0000019F99F51450>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000019F99E53280>\nparam = {'name': 'test_ds_hk2_tp4'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"test_ds_hk2_tp4\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Id is required when Deleting configuration-profile!'\n      else:\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_configuration_profile.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748590122300,"stop":1748590122547,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1748590122547,"stop":1748590123981,"duration":1434},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1748590131460,"stop":1748590131463,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x0000019F99F51450>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000019F99E53280>\nparam = {'name': 'test_ds_hk2_tp4'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"test_ds_hk2_tp4\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Id is required when Deleting configuration-profile!'\n      else:\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_configuration_profile.py:95: AssertionError","steps":[],"attachments":[{"uid":"6c300d59ed6d3e75","name":"Request Info","source":"6c300d59ed6d3e75.json","type":"application/json","size":185},{"uid":"4196047e454104ee","name":"Response Info","source":"4196047e454104ee.json","type":"application/json","size":162},{"uid":"3eff735d6aed5fe6","name":"Request Info","source":"3eff735d6aed5fe6.json","type":"application/json","size":188},{"uid":"fe427dac40721485","name":"Response Info","source":"fe427dac40721485.json","type":"application/json","size":162}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_configuration_profile"},{"name":"subSuite","value":"TestConfigurationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"23348-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_configuration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"},{"name":"param","value":"{'name': 'test_ds_hk2_tp4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"427dcf96f22a36ae.json","parameterValues":["'dev'","{'name': 'test_ds_hk2_tp4'}"]}