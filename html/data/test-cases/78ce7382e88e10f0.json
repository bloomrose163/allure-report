{"uid":"78ce7382e88e10f0","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"0cbcd0ca8e8200a89f576ef561e7e789","time":{"start":1749406639043,"stop":1749406645713,"duration":6670},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002B814B58940>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002B815FC5B10>\nfile_path = './testdata/ACS/provisioning_record_voice_TDMGW.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749406486809,"stop":1749406486900,"duration":91},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1749406486900,"stop":1749406488390,"duration":1490},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1749406639041,"stop":1749406639043,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002B814B58940>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002B815FC5B10>\nfile_path = './testdata/ACS/provisioning_record_voice_TDMGW.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","steps":[],"attachments":[{"uid":"337beb9724d6ace4","name":"Request Info","source":"337beb9724d6ace4.json","type":"application/json","size":712},{"uid":"5ca184ec4b2301cf","name":"Response Info","source":"5ca184ec4b2301cf.json","type":"application/json","size":119},{"uid":"888c4fae092c3fe7","name":"Request Info","source":"888c4fae092c3fe7.json","type":"application/json","size":186},{"uid":"1250854037e0f413","name":"Response Info","source":"1250854037e0f413.json","type":"application/json","size":1297},{"uid":"f68fbaa1e3863ce3","name":"Request Info","source":"f68fbaa1e3863ce3.json","type":"application/json","size":172},{"uid":"d4031bcfb74339df","name":"Response Info","source":"d4031bcfb74339df.json","type":"application/json","size":66},{"uid":"24dfc1d0b283f0e3","name":"Request Info","source":"24dfc1d0b283f0e3.json","type":"application/json","size":712},{"uid":"53574a4215fb0b19","name":"Response Info","source":"53574a4215fb0b19.json","type":"application/json","size":111}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":8,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"36588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_TDMGW.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"78ce7382e88e10f0.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_voice_TDMGW.json'"]}