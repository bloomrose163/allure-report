{"uid":"83e831c8dcffc919","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"30848868ef8e3aa00ebfe171c6200631","time":{"start":1749801744858,"stop":1749801767959,"duration":23101},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002387CF639D0>\nbase_api = <utils.base_api.BaseAPI object at 0x00000238026A5360>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749801515235,"stop":1749801515320,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1749801515320,"stop":1749801516605,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1749801744847,"stop":1749801744858,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002387CF639D0>\nbase_api = <utils.base_api.BaseAPI object at 0x00000238026A5360>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError","steps":[],"attachments":[{"uid":"1231e8fee32aefd2","name":"Request Info","source":"1231e8fee32aefd2.json","type":"application/json","size":831},{"uid":"1e07b334147ee029","name":"Response Info","source":"1e07b334147ee029.json","type":"application/json","size":119},{"uid":"b5e5dd5ff04f2439","name":"Request Info","source":"b5e5dd5ff04f2439.json","type":"application/json","size":186},{"uid":"8bae5d939cbb91a9","name":"Response Info","source":"8bae5d939cbb91a9.json","type":"application/json","size":999},{"uid":"a376ebcd28760600","name":"Request Info","source":"a376ebcd28760600.json","type":"application/json","size":172},{"uid":"248bd0012537ab59","name":"Response Info","source":"248bd0012537ab59.json","type":"application/json","size":66},{"uid":"db80d2b725b3ee3b","name":"Request Info","source":"db80d2b725b3ee3b.json","type":"application/json","size":831},{"uid":"f2a02b23504b82ab","name":"Response Info","source":"f2a02b23504b82ab.json","type":"application/json","size":1064},{"uid":"e87a17aa8a2a951","name":"Request Info","source":"e87a17aa8a2a951.json","type":"application/json","size":169},{"uid":"ed9b762c9e8ce993","name":"Response Info","source":"ed9b762c9e8ce993.json","type":"application/json","size":1064},{"uid":"ed3c907db46400ef","name":"Request Info","source":"ed3c907db46400ef.json","type":"application/json","size":712},{"uid":"6d5e2047f9b06b2c","name":"Response Info","source":"6d5e2047f9b06b2c.json","type":"application/json","size":1196},{"uid":"87ee88afd61cac4f","name":"Request Info","source":"87ee88afd61cac4f.json","type":"application/json","size":186},{"uid":"689690054633f6f6","name":"Response Info","source":"689690054633f6f6.json","type":"application/json","size":1298},{"uid":"7712c333dbfa0a97","name":"Request Info","source":"7712c333dbfa0a97.json","type":"application/json","size":1287},{"uid":"a1afac5bba555bd2","name":"Response Info","source":"a1afac5bba555bd2.json","type":"application/json","size":1195},{"uid":"5dcca4692107f2f3","name":"Request Info","source":"5dcca4692107f2f3.json","type":"application/json","size":170},{"uid":"17705ef04a32a79","name":"Response Info","source":"17705ef04a32a79.json","type":"application/json","size":101}],"parameters":[],"attachmentsCount":18,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"41128-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_H248.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"83e831c8dcffc919.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_voice_H248.json'"]}