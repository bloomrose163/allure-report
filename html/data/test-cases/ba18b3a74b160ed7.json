{"uid":"ba18b3a74b160ed7","name":"Test - test the paramter are case-insensitive ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_get_case_sensitive","historyId":"866fb79dde45ac856287ec7204bc8178","time":{"start":1749452609857,"stop":1749452613734,"duration":3877},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x000001FEFF802CE0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FEFFB430A0>\n\n    @allure.title('Test - test the paramter are case-insensitive ')\n    def test_get_case_sensitive(self,base_api):\n      name = \"test_workflow\"\n      params={\"name\": name,\"limit\": 2}\n      response = base_api.get_list_by_param(endpoint,params)\n      assert response.status_code == 200\n      count_lower = len(response.json())\n      params={\"name\": name.upper(),\"limit\": 2}\n    #  params={\"name\": name,\"limit\": 2}\n      response_upper = base_api.get_list_by_param(endpoint,params)\n      assert response_upper.status_code == 200\n      count_upper = len(response_upper.json())\n      print(f\"the lower count is {count_lower} and the upper count is {count_upper}\")\n>     assert count_lower == count_upper\nE     assert 1 == 0\n\ntestcase\\ACS\\test_workflow.py:96: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749451326138,"stop":1749451326517,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1749451326517,"stop":1749451327902,"duration":1385},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1749452609855,"stop":1749452609857,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x000001FEFF802CE0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FEFFB430A0>\n\n    @allure.title('Test - test the paramter are case-insensitive ')\n    def test_get_case_sensitive(self,base_api):\n      name = \"test_workflow\"\n      params={\"name\": name,\"limit\": 2}\n      response = base_api.get_list_by_param(endpoint,params)\n      assert response.status_code == 200\n      count_lower = len(response.json())\n      params={\"name\": name.upper(),\"limit\": 2}\n    #  params={\"name\": name,\"limit\": 2}\n      response_upper = base_api.get_list_by_param(endpoint,params)\n      assert response_upper.status_code == 200\n      count_upper = len(response_upper.json())\n      print(f\"the lower count is {count_lower} and the upper count is {count_upper}\")\n>     assert count_lower == count_upper\nE     assert 1 == 0\n\ntestcase\\ACS\\test_workflow.py:96: AssertionError","steps":[],"attachments":[{"uid":"201cb180cd37d7e2","name":"Request Info","source":"201cb180cd37d7e2.json","type":"application/json","size":190},{"uid":"4fa9a02476af9620","name":"Response Info","source":"4fa9a02476af9620.json","type":"application/json","size":1275},{"uid":"7fa0808ba6bc07e1","name":"Request Info","source":"7fa0808ba6bc07e1.json","type":"application/json","size":190},{"uid":"8203740774b93be6","name":"Response Info","source":"8203740774b93be6.json","type":"application/json","size":38}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"12180-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"ba18b3a74b160ed7.json","parameterValues":["'aws'"]}