{"uid":"a8b1014748722940","name":"Test - can not delete group associated with group","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_cpe_filter","historyId":"53503af982c703328c37166da7bc0a49","time":{"start":1747965417304,"stop":1747965420508,"duration":3204},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000018D79F5B160>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x0000018D79F7D3C0>\n\n    @allure.title('Test - can not delete group associated with group')\n    def test_create_cpe_filter(self,base_api):\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":False}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n    \n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 403\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":True}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n>       assert response_delete.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntestcase\\ACS\\test_system_group.py:64: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747965415538,"stop":1747965415654,"duration":116},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1747965415654,"stop":1747965417302,"duration":1648},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1747965417302,"stop":1747965417304,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000018D79F5B160>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x0000018D79F7D3C0>\n\n    @allure.title('Test - can not delete group associated with group')\n    def test_create_cpe_filter(self,base_api):\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":False}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n    \n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 403\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":True}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n>       assert response_delete.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntestcase\\ACS\\test_system_group.py:64: AssertionError","steps":[],"attachments":[{"uid":"2e130fa8e67df3f9","name":"Request Info","source":"2e130fa8e67df3f9.json","type":"application/json","size":374},{"uid":"3ee5c622f77277f5","name":"Response Info","source":"3ee5c622f77277f5.json","type":"application/json","size":91},{"uid":"b9f06831a3e9fdc4","name":"Request Info","source":"b9f06831a3e9fdc4.json","type":"application/json","size":199},{"uid":"4175e662f3daf128","name":"Response Info","source":"4175e662f3daf128.json","type":"application/json","size":66},{"uid":"f39da8719d1b8011","name":"Request Info","source":"f39da8719d1b8011.json","type":"application/json","size":374},{"uid":"c3d22f085869fc88","name":"Response Info","source":"c3d22f085869fc88.json","type":"application/json","size":91},{"uid":"c1c45d45bed05231","name":"Request Info","source":"c1c45d45bed05231.json","type":"application/json","size":542},{"uid":"ee6a48a45bcb54ec","name":"Response Info","source":"ee6a48a45bcb54ec.json","type":"application/json","size":91},{"uid":"47ab8e77f2316b14","name":"Request Info","source":"47ab8e77f2316b14.json","type":"application/json","size":155},{"uid":"7601f693b46cfe69","name":"Response Info","source":"7601f693b46cfe69.json","type":"application/json","size":138},{"uid":"1c3f6d4dc9111fcb","name":"Request Info","source":"1c3f6d4dc9111fcb.json","type":"application/json","size":197},{"uid":"5201abb372b88d7b","name":"Response Info","source":"5201abb372b88d7b.json","type":"application/json","size":138}],"parameters":[],"attachmentsCount":12,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"23904-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a8b1014748722940.json","parameterValues":["'aws'"]}