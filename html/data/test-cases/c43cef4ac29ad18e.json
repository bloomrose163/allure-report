{"uid":"c43cef4ac29ad18e","name":"Test - CRUD - create service orchestration profile with Voice Service H.248","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_data_voice","historyId":"18a1a0be1b6e47b254a53a55a5616d3f","time":{"start":1749801939173,"stop":1749801941378,"duration":2205},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000002387CFA3580>\nbase_api = <utils.base_api.BaseAPI object at 0x0000023801015540>\nvoice_type = 'H.248'\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14802')\n    @allure.title('Test - CRUD - create service orchestration profile with Voice Service {voice_type}')\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    @pytest.mark.parametrize('voice_type', [ \"SIP\", \"H.248\", \"MGCP\", \"X_000631_TDMGW\" ])\n    def test_create_data_voice(self,base_api,voice_type):\n        json_data = load_body(\"service_orchestration_profile_voice\")\n        json_data[\"type\"] = voice_type\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:247: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749801515235,"stop":1749801515320,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1749801515320,"stop":1749801516605,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1749801939166,"stop":1749801939172,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000002387CFA3580>\nbase_api = <utils.base_api.BaseAPI object at 0x0000023801015540>\nvoice_type = 'H.248'\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14802')\n    @allure.title('Test - CRUD - create service orchestration profile with Voice Service {voice_type}')\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    @pytest.mark.parametrize('voice_type', [ \"SIP\", \"H.248\", \"MGCP\", \"X_000631_TDMGW\" ])\n    def test_create_data_voice(self,base_api,voice_type):\n        json_data = load_body(\"service_orchestration_profile_voice\")\n        json_data[\"type\"] = voice_type\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:247: AssertionError","steps":[],"attachments":[{"uid":"d6bb43caba00aa6e","name":"Request Info","source":"d6bb43caba00aa6e.json","type":"application/json","size":2034},{"uid":"720de6a3a406eb8","name":"Response Info","source":"720de6a3a406eb8.json","type":"application/json","size":225}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"feature","value":"CREATE"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"41128-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"voice_type","value":"'H.248'"}],"links":[{"name":"GCPT-14802","url":"GCPT-14802","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"c43cef4ac29ad18e.json","parameterValues":["'test'","'H.248'"]}