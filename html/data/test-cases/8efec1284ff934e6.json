{"uid":"8efec1284ff934e6","name":"Test - create static group member twice","fullName":"testcase.ACS.test_static_group_member.TestStaticGroupMember#test_create_group_static_member_twice","historyId":"6165ff2af8af66fb10e7d765311feeb6","time":{"start":1748715446642,"stop":1748715448619,"duration":1977},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x0000023DBDD0E9B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBEEB8040>\n\n    @allure.feature('CREATE')\n    @allure.issue(\"GCPT-14097\")\n    @allure.title('Test - create static group member twice')\n    def test_create_group_static_member_twice(self,base_api):\n        # create a static system group\n        group_endpoint = 'group'\n        response = base_api.create(group_endpoint,file_paths['static'],need_random=True, field=\"name\")\n        assert response.status_code == 200\n        static_group_id = response.json()['_id']\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n    \n        response_member = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=None)\n        assert response_member.status_code == 200\n        member_id = response_member.json()['_id']\n    \n        # GCPT-14097\n        response_member = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=None)\n>       assert response_member.status_code == 403\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:110: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748715328519,"stop":1748715328724,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1748715328724,"stop":1748715330109,"duration":1385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1748715446638,"stop":1748715446638,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x0000023DBDD0E9B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBEEB8040>\n\n    @allure.feature('CREATE')\n    @allure.issue(\"GCPT-14097\")\n    @allure.title('Test - create static group member twice')\n    def test_create_group_static_member_twice(self,base_api):\n        # create a static system group\n        group_endpoint = 'group'\n        response = base_api.create(group_endpoint,file_paths['static'],need_random=True, field=\"name\")\n        assert response.status_code == 200\n        static_group_id = response.json()['_id']\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n    \n        response_member = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=None)\n        assert response_member.status_code == 200\n        member_id = response_member.json()['_id']\n    \n        # GCPT-14097\n        response_member = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=None)\n>       assert response_member.status_code == 403\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:110: AssertionError","steps":[],"attachments":[{"uid":"4f9b3a1684944c02","name":"Request Info","source":"4f9b3a1684944c02.json","type":"application/json","size":265},{"uid":"390c49c968d1dd68","name":"Response Info","source":"390c49c968d1dd68.json","type":"application/json","size":314},{"uid":"4e0bba0f7b2c2f18","name":"Request Info","source":"4e0bba0f7b2c2f18.json","type":"application/json","size":242},{"uid":"7da1028da525f642","name":"Response Info","source":"7da1028da525f642.json","type":"application/json","size":2555},{"uid":"8767f737f2b03b34","name":"Request Info","source":"8767f737f2b03b34.json","type":"application/json","size":242},{"uid":"daa01391a2e6bb6","name":"Response Info","source":"daa01391a2e6bb6.json","type":"application/json","size":141}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":6,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"CREATE"},{"name":"epic","value":"ACS Stati cGroup Member API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_static_group_member"},{"name":"subSuite","value":"TestStaticGroupMember"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"46036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_static_group_member"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[{"name":"GCPT-14097","url":"GCPT-14097","type":"issue"},{"name":"CTM-312349","url":"CTM-312349","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"8efec1284ff934e6.json","parameterValues":["'dev'"]}