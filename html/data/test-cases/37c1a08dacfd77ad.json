{"uid":"37c1a08dacfd77ad","name":"Test - CRUD - create service orchestration profile with Data Service ","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_group_static_delete","historyId":"e78c5ffb76910bd889e1b3e8fb8e43c7","time":{"start":1749140546342,"stop":1749140547935,"duration":1593},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000001BC6CEF8EB0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6FD311E0>\n\n    @allure.feature('CREATE')\n    @allure.title('Test - CRUD - create service orchestration profile with Data Service ')\n    def test_create_group_static_delete(self,base_api):\n    \n        # bandwidth_body = load_body(\"service_orchestration_profile_bandwidth\")\n        # mvr_body = load_body(\"service_orchestration_profille_video_MVR\")\n        # bandwidth_id = base_api.create_get_id(endpoint,bandwidth_body,need_random=True, field=\"name\")\n        # # response= base_api.create(endpoint,bandwidth_body,need_random=True, field=\"name\")\n        # # bandwidth_id = response.json()[\"configurations\"][0][\"id\"]\n        # mvr_id = base_api.create_get_id(endpoint,mvr_body,need_random=True, field=\"name\")\n    \n    \n        json_data = load_body(\"service_orchestration_profile_data\")\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        # json_data[\"vlanId\"] = 32\n        # json_data[\"bwProfile\"] = bandwidth_id\n        # json_data[\"mvrProfile\"] = mvr_id\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:117: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749140293448,"stop":1749140293525,"duration":77},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1749140293525,"stop":1749140294840,"duration":1315},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1749140546330,"stop":1749140546342,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000001BC6CEF8EB0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6FD311E0>\n\n    @allure.feature('CREATE')\n    @allure.title('Test - CRUD - create service orchestration profile with Data Service ')\n    def test_create_group_static_delete(self,base_api):\n    \n        # bandwidth_body = load_body(\"service_orchestration_profile_bandwidth\")\n        # mvr_body = load_body(\"service_orchestration_profille_video_MVR\")\n        # bandwidth_id = base_api.create_get_id(endpoint,bandwidth_body,need_random=True, field=\"name\")\n        # # response= base_api.create(endpoint,bandwidth_body,need_random=True, field=\"name\")\n        # # bandwidth_id = response.json()[\"configurations\"][0][\"id\"]\n        # mvr_id = base_api.create_get_id(endpoint,mvr_body,need_random=True, field=\"name\")\n    \n    \n        json_data = load_body(\"service_orchestration_profile_data\")\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        # json_data[\"vlanId\"] = 32\n        # json_data[\"bwProfile\"] = bandwidth_id\n        # json_data[\"mvrProfile\"] = mvr_id\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:117: AssertionError","steps":[],"attachments":[{"uid":"f8958e5413a2e23c","name":"Request Info","source":"f8958e5413a2e23c.json","type":"application/json","size":734},{"uid":"ab78f4d8bd007b41","name":"Response Info","source":"ab78f4d8bd007b41.json","type":"application/json","size":143}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"CREATE"},{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"50112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"37c1a08dacfd77ad.json","parameterValues":["'dev'"]}