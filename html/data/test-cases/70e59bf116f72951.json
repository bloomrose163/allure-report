{"uid":"70e59bf116f72951","name":"Test - create system group with special characters :{params}","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_group_special","historyId":"11b5f04e9109335c2329a8ff7c8c2106","time":{"start":1749014178426,"stop":1749014179526,"duration":1100},"status":"failed","statusMessage":"AssertionError: assert 409 == 200\n +  where 409 = <Response [409]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001F1D04B9330>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001F1D1FCF100>\ngroup_name = '{var}'\n\n    @allure.title('Test - create system group with special characters :{params}')\n    @pytest.mark.parametrize(\"group_name\",['~!@#$%^&*{}?/+-','{var}'])\n    def test_create_group_special(self,base_api,group_name):\n        json_data = load_json(file_paths[\"dynamic\"])\n        json_data[\"group_name\"] = group_name\n        response = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n>       assert response.status_code == 200\nE       assert 409 == 200\nE        +  where 409 = <Response [409]>.status_code\n\ntestcase\\ACS\\test_system_group.py:242: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749013957443,"stop":1749013957660,"duration":217},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749013957660,"stop":1749013959074,"duration":1414},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749014178424,"stop":1749014178426,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 409 == 200\n +  where 409 = <Response [409]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001F1D04B9330>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001F1D1FCF100>\ngroup_name = '{var}'\n\n    @allure.title('Test - create system group with special characters :{params}')\n    @pytest.mark.parametrize(\"group_name\",['~!@#$%^&*{}?/+-','{var}'])\n    def test_create_group_special(self,base_api,group_name):\n        json_data = load_json(file_paths[\"dynamic\"])\n        json_data[\"group_name\"] = group_name\n        response = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n>       assert response.status_code == 200\nE       assert 409 == 200\nE        +  where 409 = <Response [409]>.status_code\n\ntestcase\\ACS\\test_system_group.py:242: AssertionError","steps":[],"attachments":[{"uid":"5e8ce52621569cae","name":"Request Info","source":"5e8ce52621569cae.json","type":"application/json","size":281},{"uid":"e50598a00a4b696b","name":"Response Info","source":"e50598a00a4b696b.json","type":"application/json","size":248}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"52404-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"},{"name":"group_name","value":"'{var}'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"70e59bf116f72951.json","parameterValues":["'dev'","'{var}'"]}