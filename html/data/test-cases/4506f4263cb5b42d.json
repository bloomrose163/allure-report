{"uid":"4506f4263cb5b42d","name":"Test - crud record ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_crud","historyId":"ce94767f27f842d643289db6d5ac0ddc","time":{"start":1749406997241,"stop":1749407006100,"duration":8859},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x000002B814BFBA60>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002B8176267A0>\n\n    @allure.title('Test - crud record ')\n    def test_crud(self,base_api):\n        global model_id\n        # create a record\n        global groups\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        model_id = response_create.json()['_id']\n        assert response_create.status_code == 200\n        # model_id = 'e002e1f5-8382-4f49-a445-1da88df9e99a'\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"update\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_put = base_api.update(endpoint,model_id,json_data,True,\"name\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n            # get info\n        name = \"test_workflow_11\"\n        new_param={\"name\": name.upper(),\"limit\": 3}\n        response_get = base_api.get_list_by_param(endpoint,new_param)\n        assert response_get.status_code == 200\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_workflow.py:155: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749406486809,"stop":1749406486900,"duration":91},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1749406486900,"stop":1749406488390,"duration":1490},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1749406997240,"stop":1749406997241,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x000002B814BFBA60>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002B8176267A0>\n\n    @allure.title('Test - crud record ')\n    def test_crud(self,base_api):\n        global model_id\n        # create a record\n        global groups\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        model_id = response_create.json()['_id']\n        assert response_create.status_code == 200\n        # model_id = 'e002e1f5-8382-4f49-a445-1da88df9e99a'\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"update\"])\n        json_data[\"groups\"] = groups\n        # json_data[\"actions\"] = list(response.json()[0][\"actions\"])\n        response_put = base_api.update(endpoint,model_id,json_data,True,\"name\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n            # get info\n        name = \"test_workflow_11\"\n        new_param={\"name\": name.upper(),\"limit\": 3}\n        response_get = base_api.get_list_by_param(endpoint,new_param)\n        assert response_get.status_code == 200\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_workflow.py:155: AssertionError","steps":[],"attachments":[{"uid":"fe3b0b17290387a2","name":"Request Info","source":"fe3b0b17290387a2.json","type":"application/json","size":495},{"uid":"b9630bd23ac101b","name":"Response Info","source":"b9630bd23ac101b.json","type":"application/json","size":607},{"uid":"8201819ff136e0c","name":"Request Info","source":"8201819ff136e0c.json","type":"application/json","size":158},{"uid":"4f0f9fbf1004e6cc","name":"Response Info","source":"4f0f9fbf1004e6cc.json","type":"application/json","size":617},{"uid":"71d6afda67d045d9","name":"Request Info","source":"71d6afda67d045d9.json","type":"application/json","size":520},{"uid":"a04c36b6a24c8772","name":"Response Info","source":"a04c36b6a24c8772.json","type":"application/json","size":607},{"uid":"207f7088269632b7","name":"Request Info","source":"207f7088269632b7.json","type":"application/json","size":199},{"uid":"9f4ea79750413a3b","name":"Response Info","source":"9f4ea79750413a3b.json","type":"application/json","size":38},{"uid":"41b6cca94de42999","name":"Request Info","source":"41b6cca94de42999.json","type":"application/json","size":161},{"uid":"7f9e7b4b6df782ff","name":"Response Info","source":"7f9e7b4b6df782ff.json","type":"application/json","size":59}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":10,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"36588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"4506f4263cb5b42d.json","parameterValues":["'test'"]}