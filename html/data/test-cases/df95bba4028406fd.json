{"uid":"df95bba4028406fd","name":"Test - get all the system groups with different params:None","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_get_group_list_param","historyId":"5ad6dbc82df5854fead74d46e75bddc9","time":{"start":1748542974421,"stop":1748542976049,"duration":1628},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x00000188095C2B30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001880AAF0F40>\nparam = {'excludeOnBoot': False, 'limit': 3, 'skip': 1, 'type': 'static'}\n\n    @allure.title(f'Test - get all the system groups with different params:{params}')\n    @pytest.mark.parametrize('param', [\n        {\n        },\n        {\n             \"limit\": 2,\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"dynamic\"\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"static\"\n        }\n    ])\n    def test_get_group_list_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:213: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748542606067,"stop":1748542606383,"duration":316},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1748542606383,"stop":1748542607833,"duration":1450},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1748542974421,"stop":1748542974421,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x00000188095C2B30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001880AAF0F40>\nparam = {'excludeOnBoot': False, 'limit': 3, 'skip': 1, 'type': 'static'}\n\n    @allure.title(f'Test - get all the system groups with different params:{params}')\n    @pytest.mark.parametrize('param', [\n        {\n        },\n        {\n             \"limit\": 2,\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"dynamic\"\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"static\"\n        }\n    ])\n    def test_get_group_list_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:213: AssertionError","steps":[],"attachments":[{"uid":"e7f1e36d2d87e02","name":"Request Info","source":"e7f1e36d2d87e02.json","type":"application/json","size":135},{"uid":"6f05e4b8592be37","name":"Response Info","source":"6f05e4b8592be37.json","type":"application/json","size":94}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"23192-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"param","value":"{'skip': 1, 'limit': 3, 'excludeOnBoot': False, 'type': 'static'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"df95bba4028406fd.json","parameterValues":["'aws'","{'skip': 1, 'limit': 3, 'excludeOnBoot': False, 'type': 'static'}"]}