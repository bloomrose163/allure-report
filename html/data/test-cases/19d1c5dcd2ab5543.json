{"uid":"19d1c5dcd2ab5543","name":"Negative Test - get all the static group member with different param:None","fullName":"testcase.ACS.test_static_group_member.TestStaticGroupMember#test_get_member_list_negative","historyId":"9813573aac4323414d5a7ec587fe59cf","time":{"start":1748370052985,"stop":1748370054228,"duration":1243},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x00000227BDDD0790>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227C09F4430>\nparam = {'_id': 'non-exsit'}\n\n    @allure.title(f'Negative Test - get all the static group member with different param:{param}')\n    @pytest.mark.parametrize('param', [\n        None,\n        {\n            \"limit\": -2\n        },\n        {\n            \"_id\": \"non-exsit\"\n        },\n        {\n            \"groupId\":\"non-exsit\"\n        },\n         {\n            \"memberInfo\":\"non-exsit\"\n        }\n    ])\n    \n    def test_get_member_list_negative(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n        if param == {\"limit\": -2} :\n            assert response.status_code == 500\n        else:\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:151: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748369745210,"stop":1748369745301,"duration":91},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1748369745302,"stop":1748369746628,"duration":1326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1748370052982,"stop":1748370052984,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x00000227BDDD0790>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227C09F4430>\nparam = {'_id': 'non-exsit'}\n\n    @allure.title(f'Negative Test - get all the static group member with different param:{param}')\n    @pytest.mark.parametrize('param', [\n        None,\n        {\n            \"limit\": -2\n        },\n        {\n            \"_id\": \"non-exsit\"\n        },\n        {\n            \"groupId\":\"non-exsit\"\n        },\n         {\n            \"memberInfo\":\"non-exsit\"\n        }\n    ])\n    \n    def test_get_member_list_negative(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n        if param == {\"limit\": -2} :\n            assert response.status_code == 500\n        else:\n>           assert response.status_code == 200\nE           assert 404 == 200\nE            +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:151: AssertionError","steps":[],"attachments":[{"uid":"5b3511335ee78d54","name":"Request Info","source":"5b3511335ee78d54.json","type":"application/json","size":167},{"uid":"841b45ef846249da","name":"Response Info","source":"841b45ef846249da.json","type":"application/json","size":114}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - StaticGroupMember API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_static_group_member"},{"name":"subSuite","value":"TestStaticGroupMember"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"32716-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_static_group_member"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"param","value":"{'_id': 'non-exsit'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"19d1c5dcd2ab5543.json","parameterValues":["'aws'","{'_id': 'non-exsit'}"]}