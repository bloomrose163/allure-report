{"uid":"7c2eb53a8abfb56b","name":"Test - get all the system groups with different params:{params}","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_get_group_list_param","historyId":"bbda80b3bcc9c5af3d62d9b331d8d3ef","time":{"start":1749666547955,"stop":1749666550845,"duration":2890},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000027E7ABA3BB0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027E7ADCCCA0>\nparam = {'limit': 2}\n\n    @allure.title('Test - get all the system groups with different params:{params}')\n    @pytest.mark.parametrize('param', [\n        {\n        },\n        {\n             \"limit\": 2,\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"dynamic\"\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"static\"\n        }\n    ])\n    def test_get_group_list_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_system_group.py:215: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749665848420,"stop":1749665848485,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749665848485,"stop":1749665849786,"duration":1301},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749666547936,"stop":1749666547955,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000027E7ABA3BB0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027E7ADCCCA0>\nparam = {'limit': 2}\n\n    @allure.title('Test - get all the system groups with different params:{params}')\n    @pytest.mark.parametrize('param', [\n        {\n        },\n        {\n             \"limit\": 2,\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"dynamic\"\n        },\n        {\n            \"skip\": 1,\n            \"limit\": 3,\n            \"excludeOnBoot\":False,\n            \"type\": \"static\"\n        }\n    ])\n    def test_get_group_list_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_system_group.py:215: AssertionError","steps":[],"attachments":[{"uid":"818c89b951e5c3a2","name":"Request Info","source":"818c89b951e5c3a2.json","type":"application/json","size":142},{"uid":"311840ba418480f6","name":"Response Info","source":"311840ba418480f6.json","type":"application/json","size":429}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"8644-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'limit': 2}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"7c2eb53a8abfb56b.json","parameterValues":["'test'","{'limit': 2}"]}