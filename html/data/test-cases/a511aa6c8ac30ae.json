{"uid":"a511aa6c8ac30ae","name":"Test - Query device count with invalid ","fullName":"testcase.ACS.test_device.TestDevice#test_get_invalid_param","historyId":"43cdde2d7b9f9882c6f6916901cb11e1","time":{"start":1749200918340,"stop":1749200921291,"duration":2951},"status":"failed","statusMessage":"AssertionError: assert 500 == 404\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001C3BF7D6F50>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0DA7580>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 500 == 404\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749200886081,"stop":1749200886181,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1749200886181,"stop":1749200887728,"duration":1547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1749200918328,"stop":1749200918340,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 404\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001C3BF7D6F50>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0DA7580>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 500 == 404\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","steps":[],"attachments":[{"uid":"18a4d0df69a577d8","name":"Request Info","source":"18a4d0df69a577d8.json","type":"application/json","size":175},{"uid":"97a313bed60928f0","name":"Response Info","source":"97a313bed60928f0.json","type":"application/json","size":56},{"uid":"129a96056380d3ec","name":"Request Info","source":"129a96056380d3ec.json","type":"application/json","size":169},{"uid":"f28ff5b580f79648","name":"Response Info","source":"f28ff5b580f79648.json","type":"application/json","size":59}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44708-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14685","url":"GCPT-14685","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"a511aa6c8ac30ae.json","parameterValues":["'test'"]}