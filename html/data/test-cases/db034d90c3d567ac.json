{"uid":"db034d90c3d567ac","name":"Test - test the paramter are case-insensitive ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_get_case_sensitive","historyId":"866fb79dde45ac856287ec7204bc8178","time":{"start":1748496983116,"stop":1748496986068,"duration":2952},"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000014D3AF905B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000014D3AE65FF0>\n\n    @allure.title('Test - test the paramter are case-insensitive ')\n    def test_get_case_sensitive(self,base_api):\n      name = \"test_workflow\"\n      params={\"name\": name,\"limit\": 2}\n      response = base_api.get_list_by_param(endpoint,params)\n      assert response.status_code == 200\n      count_lower = len(response.json())\n      params={\"name\": name.upper(),\"limit\": 2}\n    #  params={\"name\": name,\"limit\": 2}\n      response_upper = base_api.get_list_by_param(endpoint,params)\n      assert response_upper.status_code == 200\n      count_upper = len(response_upper.json())\n      print(f\"the lower count is {count_lower} and the upper count is {count_upper}\")\n>     assert count_lower == count_upper\nE     assert 1 == 0\n\ntestcase\\ACS\\test_workflow.py:75: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748496616837,"stop":1748496617142,"duration":305},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1748496617142,"stop":1748496618475,"duration":1333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"base_api","time":{"start":1748496983113,"stop":1748496983116,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 1 == 0","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000014D3AF905B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000014D3AE65FF0>\n\n    @allure.title('Test - test the paramter are case-insensitive ')\n    def test_get_case_sensitive(self,base_api):\n      name = \"test_workflow\"\n      params={\"name\": name,\"limit\": 2}\n      response = base_api.get_list_by_param(endpoint,params)\n      assert response.status_code == 200\n      count_lower = len(response.json())\n      params={\"name\": name.upper(),\"limit\": 2}\n    #  params={\"name\": name,\"limit\": 2}\n      response_upper = base_api.get_list_by_param(endpoint,params)\n      assert response_upper.status_code == 200\n      count_upper = len(response_upper.json())\n      print(f\"the lower count is {count_lower} and the upper count is {count_upper}\")\n>     assert count_lower == count_upper\nE     assert 1 == 0\n\ntestcase\\ACS\\test_workflow.py:75: AssertionError","steps":[],"attachments":[{"uid":"6aa2c9772c4b8b46","name":"Request Info","source":"6aa2c9772c4b8b46.json","type":"application/json","size":190},{"uid":"f58ee78dfab4ec5d","name":"Response Info","source":"f58ee78dfab4ec5d.json","type":"application/json","size":1275},{"uid":"c7cb717a2d88866a","name":"Request Info","source":"c7cb717a2d88866a.json","type":"application/json","size":190},{"uid":"135aac50e6a670ae","name":"Response Info","source":"135aac50e6a670ae.json","type":"application/json","size":38}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"12704-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"db034d90c3d567ac.json","parameterValues":["'aws'"]}