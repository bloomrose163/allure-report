{"uid":"4cea6e6195e251ea","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"30848868ef8e3aa00ebfe171c6200631","time":{"start":1749806503375,"stop":1749806533374,"duration":29999},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C2C241BD30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C2C51E3B50>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749806249152,"stop":1749806249231,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749806249231,"stop":1749806250516,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"base_api","time":{"start":1749806503372,"stop":1749806503374,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C2C241BD30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C2C51E3B50>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError","steps":[],"attachments":[{"uid":"6889580a88850a1c","name":"Request Info","source":"6889580a88850a1c.json","type":"application/json","size":831},{"uid":"1e16a8daf79e6bc7","name":"Response Info","source":"1e16a8daf79e6bc7.json","type":"application/json","size":119},{"uid":"d8db5a54d591ccdb","name":"Request Info","source":"d8db5a54d591ccdb.json","type":"application/json","size":186},{"uid":"bdf254948f53a25b","name":"Response Info","source":"bdf254948f53a25b.json","type":"application/json","size":999},{"uid":"7c11eff7b865628","name":"Request Info","source":"7c11eff7b865628.json","type":"application/json","size":172},{"uid":"38fe83a157120566","name":"Response Info","source":"38fe83a157120566.json","type":"application/json","size":66},{"uid":"d0a86a6ec1f8e064","name":"Request Info","source":"d0a86a6ec1f8e064.json","type":"application/json","size":831},{"uid":"dbc5ea0ad87a89a8","name":"Response Info","source":"dbc5ea0ad87a89a8.json","type":"application/json","size":1064},{"uid":"44ba20c6b9fc3ee2","name":"Request Info","source":"44ba20c6b9fc3ee2.json","type":"application/json","size":169},{"uid":"a5cdb3fbe74aa24b","name":"Response Info","source":"a5cdb3fbe74aa24b.json","type":"application/json","size":1064},{"uid":"fe59035af0afe51a","name":"Request Info","source":"fe59035af0afe51a.json","type":"application/json","size":712},{"uid":"ebf10bf75f5db9e6","name":"Response Info","source":"ebf10bf75f5db9e6.json","type":"application/json","size":1196},{"uid":"40159c81b9ab2254","name":"Request Info","source":"40159c81b9ab2254.json","type":"application/json","size":186},{"uid":"b6413d36b885f3fe","name":"Response Info","source":"b6413d36b885f3fe.json","type":"application/json","size":1298},{"uid":"c761f9d187c4a1ec","name":"Request Info","source":"c761f9d187c4a1ec.json","type":"application/json","size":1287},{"uid":"240b141c3ef5ca1a","name":"Response Info","source":"240b141c3ef5ca1a.json","type":"application/json","size":1195},{"uid":"5b16ca37bd9f1920","name":"Request Info","source":"5b16ca37bd9f1920.json","type":"application/json","size":170},{"uid":"89b4aa43675ec28f","name":"Response Info","source":"89b4aa43675ec28f.json","type":"application/json","size":101}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":18,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"5088-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_H248.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"4cea6e6195e251ea.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_voice_H248.json'"]}