{"uid":"7b61b905fd017b84","name":"Test - 1.can not delete group associated with group 2.forceDelete","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_cpe_filter","historyId":"d39f75db2be3fadafce6656944b2679a","time":{"start":1748240092362,"stop":1748240096261,"duration":3899},"status":"failed","statusMessage":"AssertionError: assert 'Scheduled' == 'Completed'\n  \n  - Completed\n  + Scheduled","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001C86C6AB0A0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C86DD5D000>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n    \n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n>       assert response_get.json()[\"state\"] == \"Completed\"\nE       AssertionError: assert 'Scheduled' == 'Completed'\nE         \nE         - Completed\nE         + Scheduled\n\ntestcase\\ACS\\test_system_group.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748240013215,"stop":1748240013326,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1748240013326,"stop":1748240014643,"duration":1317},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0},{"name":"base_api","time":{"start":1748240092362,"stop":1748240092362,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'Scheduled' == 'Completed'\n  \n  - Completed\n  + Scheduled","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001C86C6AB0A0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C86DD5D000>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n    \n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n>       assert response_get.json()[\"state\"] == \"Completed\"\nE       AssertionError: assert 'Scheduled' == 'Completed'\nE         \nE         - Completed\nE         + Scheduled\n\ntestcase\\ACS\\test_system_group.py:61: AssertionError","steps":[],"attachments":[{"uid":"c106eef39482ada1","name":"Request Info","source":"c106eef39482ada1.json","type":"application/json","size":265},{"uid":"2d040680ca1fb4bb","name":"Response Info","source":"2d040680ca1fb4bb.json","type":"application/json","size":314},{"uid":"91077216ceb8c77e","name":"Request Info","source":"91077216ceb8c77e.json","type":"application/json","size":376},{"uid":"6acd3308601cd475","name":"Response Info","source":"6acd3308601cd475.json","type":"application/json","size":636},{"uid":"e58aa2963be1133c","name":"Request Info","source":"e58aa2963be1133c.json","type":"application/json","size":843},{"uid":"77d352d8c80a7d9b","name":"Response Info","source":"77d352d8c80a7d9b.json","type":"application/json","size":1018},{"uid":"70fbe310fa0d09c6","name":"Request Info","source":"70fbe310fa0d09c6.json","type":"application/json","size":157},{"uid":"869bb74dc22b6f50","name":"Response Info","source":"869bb74dc22b6f50.json","type":"application/json","size":1028}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":8,"attachmentStep":false,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"47028-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"7b61b905fd017b84.json","parameterValues":["'dev'"]}