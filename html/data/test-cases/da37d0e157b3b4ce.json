{"uid":"da37d0e157b3b4ce","name":"Test - 1.can not delete group associated with group 2.forceDelete","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_cpe_filter","historyId":"d39f75db2be3fadafce6656944b2679a","time":{"start":1747984189433,"stop":1747984191845,"duration":2412},"status":"failed","statusMessage":"AssertionError: assert 'Scheduled' == 'Completed'\n  \n  - Completed\n  + Scheduled","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000002CD93B39DE0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x000002CD93B3DF30>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n    \n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n>       assert response_get.json()[\"state\"] == \"Completed\"\nE       AssertionError: assert 'Scheduled' == 'Completed'\nE         \nE         - Completed\nE         + Scheduled\n\ntestcase\\ACS\\test_system_group.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":20,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1747984184236,"stop":1747984184355,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1747984184355,"stop":1747984185665,"duration":1310},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1747984189431,"stop":1747984189433,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'Scheduled' == 'Completed'\n  \n  - Completed\n  + Scheduled","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000002CD93B39DE0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x000002CD93B3DF30>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n    \n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n>       assert response_get.json()[\"state\"] == \"Completed\"\nE       AssertionError: assert 'Scheduled' == 'Completed'\nE         \nE         - Completed\nE         + Scheduled\n\ntestcase\\ACS\\test_system_group.py:61: AssertionError","steps":[],"attachments":[{"uid":"75b2fd44b1415045","name":"Request Info","source":"75b2fd44b1415045.json","type":"application/json","size":265},{"uid":"a9490b7be7df0330","name":"Response Info","source":"a9490b7be7df0330.json","type":"application/json","size":314},{"uid":"e943b23a763198be","name":"Request Info","source":"e943b23a763198be.json","type":"application/json","size":376},{"uid":"d1e8ac85095aaba7","name":"Response Info","source":"d1e8ac85095aaba7.json","type":"application/json","size":636},{"uid":"d74cb07f3a08e74f","name":"Request Info","source":"d74cb07f3a08e74f.json","type":"application/json","size":843},{"uid":"a6f432e5b9be74c1","name":"Response Info","source":"a6f432e5b9be74c1.json","type":"application/json","size":1018},{"uid":"2688f04de9ec2658","name":"Request Info","source":"2688f04de9ec2658.json","type":"application/json","size":157},{"uid":"e8f6c9e373e081ab","name":"Response Info","source":"e8f6c9e373e081ab.json","type":"application/json","size":1028}],"parameters":[],"attachmentsCount":8,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"33960-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"83cd7843acb18453","status":"broken","statusDetails":"TypeError: 'Response' object is not subscriptable","time":{"start":1747984098229,"stop":1747984101346,"duration":3117}},{"uid":"d31582a40c28919","status":"failed","statusDetails":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1747983995923,"stop":1747983999449,"duration":3526}},{"uid":"8af0dc17d8a7cc56","status":"failed","statusDetails":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1747983827119,"stop":1747983830012,"duration":2893}},{"uid":"e2ee6eafcd919354","status":"failed","statusDetails":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","time":{"start":1747983724039,"stop":1747983726065,"duration":2026}},{"uid":"5d4277691acef077","status":"failed","statusDetails":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","time":{"start":1747983679896,"stop":1747983681698,"duration":1802}},{"uid":"6b2b8a1ed87582df","status":"failed","statusDetails":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","time":{"start":1747983303230,"stop":1747983306065,"duration":2835}},{"uid":"52ef5902eaf1fb8a","status":"failed","statusDetails":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1747983127188,"stop":1747983131853,"duration":4665}},{"uid":"6df873d8596787c3","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747970169762,"stop":1747970169762,"duration":0}},{"uid":"c491dcfb0dab3fdb","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747970015710,"stop":1747970015710,"duration":0}},{"uid":"e462f8981cb03e4a","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747969946729,"stop":1747969946729,"duration":0}},{"uid":"8953467a91a2a121","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747969773817,"stop":1747969773817,"duration":0}},{"uid":"b1a34b590efdd71b","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747969692403,"stop":1747969692403,"duration":0}},{"uid":"987aff47fcd7c68a","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747969643829,"stop":1747969643829,"duration":0}},{"uid":"cbc626be9246ede1","status":"failed","statusDetails":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1747965420743,"stop":1747965424845,"duration":4102}},{"uid":"e0a70814acf697f2","status":"failed","statusDetails":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1747964902822,"stop":1747964905095,"duration":2273}},{"uid":"66a8e15538f09eb8","status":"failed","statusDetails":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","time":{"start":1747964439393,"stop":1747964442454,"duration":3061}},{"uid":"df0eb53603ee8c4f","status":"broken","statusDetails":"UnboundLocalError: local variable 'params' referenced before assignment","time":{"start":1747964368548,"stop":1747964370374,"duration":1826}},{"uid":"31495fd9dfaa139c","status":"failed","statusDetails":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","time":{"start":1747910145895,"stop":1747910146438,"duration":543}},{"uid":"7fb8b24ceba9c3a2","status":"failed","statusDetails":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","time":{"start":1747908267771,"stop":1747908268305,"duration":534}},{"uid":"40f58ba5b3da7532","status":"failed","statusDetails":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","time":{"start":1747908243556,"stop":1747908244276,"duration":720}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"da37d0e157b3b4ce.json","parameterValues":["'dev'"]}