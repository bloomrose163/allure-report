{"uid":"d5ea0e58f0939e43","name":"Test - 1.can not delete group associated with group 2.forceDelete","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_cpe_filter","historyId":"53503af982c703328c37166da7bc0a49","time":{"start":1747983123587,"stop":1747983126981,"duration":3394},"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x00000286B725EDA0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x00000286B72A77F0>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":False}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n    \n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 403\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":True}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n>       assert response_delete.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntestcase\\ACS\\test_system_group.py:65: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747983122150,"stop":1747983122261,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1747983122261,"stop":1747983123585,"duration":1324},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1747983123585,"stop":1747983123586,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 403 == 200\n +  where 403 = <Response [403]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x00000286B725EDA0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x00000286B72A77F0>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":False}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n    \n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 403\n    \n        # delete the record\n        flase_delete = {\"forceDelete\":True}\n        response_delete= base_api.delete(endpoint,flase_delete,model_id)\n>       assert response_delete.status_code == 200\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntestcase\\ACS\\test_system_group.py:65: AssertionError","steps":[],"attachments":[{"uid":"755f5af048e8669e","name":"Request Info","source":"755f5af048e8669e.json","type":"application/json","size":374},{"uid":"2211694a0e44a0e5","name":"Response Info","source":"2211694a0e44a0e5.json","type":"application/json","size":91},{"uid":"104c34b5da7c13e0","name":"Request Info","source":"104c34b5da7c13e0.json","type":"application/json","size":199},{"uid":"42d264a5f5453ec1","name":"Response Info","source":"42d264a5f5453ec1.json","type":"application/json","size":66},{"uid":"2ddf7e0e9b771dd3","name":"Request Info","source":"2ddf7e0e9b771dd3.json","type":"application/json","size":374},{"uid":"919773d34a3fb946","name":"Response Info","source":"919773d34a3fb946.json","type":"application/json","size":91},{"uid":"eee6f423580bdd6c","name":"Request Info","source":"eee6f423580bdd6c.json","type":"application/json","size":542},{"uid":"38b47a13467e782","name":"Response Info","source":"38b47a13467e782.json","type":"application/json","size":91},{"uid":"e61aa46c27769d04","name":"Request Info","source":"e61aa46c27769d04.json","type":"application/json","size":155},{"uid":"16d6933fbe5cc6d","name":"Response Info","source":"16d6933fbe5cc6d.json","type":"application/json","size":138},{"uid":"e83145d48a617e8f","name":"Request Info","source":"e83145d48a617e8f.json","type":"application/json","size":197},{"uid":"211cb89a72823db0","name":"Response Info","source":"211cb89a72823db0.json","type":"application/json","size":138}],"parameters":[],"attachmentsCount":12,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"38396-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d5ea0e58f0939e43.json","parameterValues":["'aws'"]}