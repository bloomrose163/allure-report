{"uid":"f65b5689ab351fda","name":"Test - Query device count with invalid ","fullName":"testcase.ACS.test_device.TestDevice#test_get_invalid_param","historyId":"43cdde2d7b9f9882c6f6916901cb11e1","time":{"start":1749801562817,"stop":1749801567341,"duration":4524},"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000002387CF217E0>\nbase_api = <utils.base_api.BaseAPI object at 0x000002387D3293C0>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749801515235,"stop":1749801515320,"duration":85},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1749801515320,"stop":1749801516605,"duration":1285},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1749801562805,"stop":1749801562817,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000002387CF217E0>\nbase_api = <utils.base_api.BaseAPI object at 0x000002387D3293C0>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","steps":[],"attachments":[{"uid":"28ced9cae0e5fb76","name":"Request Info","source":"28ced9cae0e5fb76.json","type":"application/json","size":175},{"uid":"170e8c4befda304f","name":"Response Info","source":"170e8c4befda304f.json","type":"application/json","size":56},{"uid":"d42c37a39a42befd","name":"Request Info","source":"d42c37a39a42befd.json","type":"application/json","size":169},{"uid":"cbed3de795f6ffed","name":"Response Info","source":"cbed3de795f6ffed.json","type":"application/json","size":101}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"41128-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14685","url":"GCPT-14685","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"f65b5689ab351fda.json","parameterValues":["'test'"]}