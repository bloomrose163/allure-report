{"uid":"aac4eaa4d8957379","name":"Test - delete record with parameter {'deviceRecordId': '50-E46CD1-CXNK01A8D0C7'}","fullName":"testcase.ACS.test_static_group_member.TestStaticGroupMember#test_delete_by_param","historyId":"b1cb158c4079104740fd3d1a4594ebe0","time":{"start":1749100896015,"stop":1749100900242,"duration":4227},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x000001E9AE9094E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AE639E10>\nparam = {'deviceRecordId': '2550-e46cd1-CXNK01A8D0C7'}\n\n    @allure.feature('DELETE')\n    @allure.title('Test - delete record with parameter {param}')\n    @allure.issue(\"GCPT-14617\")\n    @pytest.mark.parametrize('param',[\n        {\n            \"_id\": \"\"\n        },\n        {\n            \"memberInfo\":\"CXNK01A8D0C7\"\n        },\n        {\n            \"groupId\":\"\"\n        },\n        {\n            \"deviceRecordId\":\"CXNK01A8D0C7\"\n        }\n        ])\n    def test_delete_by_param(self,base_api,param):\n        group_body =  json_data = load_json(file_paths[\"static\"])\n        static_group_id = base_api.create_get_id(group_endpoint,group_body,need_random=True, field=\"name\")\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n    \n        response_member = base_api.create(endpoint,json_data,need_random=False, field=None)\n        assert response_member.status_code == 200\n        member_id = response_member.json()['_id']\n    \n    \n        if \"_id\" in param:\n            param[\"_id\"] = member_id\n        if \"groupId\" in param:\n            param[\"groupId\"] = static_group_id\n    \n        # query parameters not include deviceRecordId, use query by id to get deviceRecordId info\n        if \"deviceRecordId\" in param:\n            response =  base_api.get_by_id(endpoint,member_id)\n            assert response.status_code == 200\n            deviceRecordId = response.json()['deviceRecordId']\n            param[\"deviceRecordId\"] = deviceRecordId\n        else:\n            response = base_api.get_list_by_param(endpoint,param)\n            assert response.status_code == 200\n    \n        response = base_api.delete_with_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:215: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749100609104,"stop":1749100609335,"duration":231},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749100609335,"stop":1749100610791,"duration":1456},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749100896013,"stop":1749100896015,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x000001E9AE9094E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AE639E10>\nparam = {'deviceRecordId': '2550-e46cd1-CXNK01A8D0C7'}\n\n    @allure.feature('DELETE')\n    @allure.title('Test - delete record with parameter {param}')\n    @allure.issue(\"GCPT-14617\")\n    @pytest.mark.parametrize('param',[\n        {\n            \"_id\": \"\"\n        },\n        {\n            \"memberInfo\":\"CXNK01A8D0C7\"\n        },\n        {\n            \"groupId\":\"\"\n        },\n        {\n            \"deviceRecordId\":\"CXNK01A8D0C7\"\n        }\n        ])\n    def test_delete_by_param(self,base_api,param):\n        group_body =  json_data = load_json(file_paths[\"static\"])\n        static_group_id = base_api.create_get_id(group_endpoint,group_body,need_random=True, field=\"name\")\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n    \n        response_member = base_api.create(endpoint,json_data,need_random=False, field=None)\n        assert response_member.status_code == 200\n        member_id = response_member.json()['_id']\n    \n    \n        if \"_id\" in param:\n            param[\"_id\"] = member_id\n        if \"groupId\" in param:\n            param[\"groupId\"] = static_group_id\n    \n        # query parameters not include deviceRecordId, use query by id to get deviceRecordId info\n        if \"deviceRecordId\" in param:\n            response =  base_api.get_by_id(endpoint,member_id)\n            assert response.status_code == 200\n            deviceRecordId = response.json()['deviceRecordId']\n            param[\"deviceRecordId\"] = deviceRecordId\n        else:\n            response = base_api.get_list_by_param(endpoint,param)\n            assert response.status_code == 200\n    \n        response = base_api.delete_with_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_static_group_member.py:215: AssertionError","steps":[],"attachments":[{"uid":"1ace584f8b2c945f","name":"Request Info","source":"1ace584f8b2c945f.json","type":"application/json","size":266},{"uid":"501a0c25bacec094","name":"Response Info","source":"501a0c25bacec094.json","type":"application/json","size":314},{"uid":"9edd1671b99cd90b","name":"Request Info","source":"9edd1671b99cd90b.json","type":"application/json","size":243},{"uid":"c01903ed465c8aff","name":"Response Info","source":"c01903ed465c8aff.json","type":"application/json","size":2630},{"uid":"477ea88ab3d41650","name":"Request Info","source":"477ea88ab3d41650.json","type":"application/json","size":169},{"uid":"b14e173227d27767","name":"Response Info","source":"b14e173227d27767.json","type":"application/json","size":2660},{"uid":"96e73c7bc0a6751f","name":"Request Info","source":"96e73c7bc0a6751f.json","type":"application/json","size":225},{"uid":"cc0b681696be5311","name":"Response Info","source":"cc0b681696be5311.json","type":"application/json","size":386}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":8},"afterStages":[],"labels":[{"name":"feature","value":"DELETE"},{"name":"epic","value":"ACS Static Group Member API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_static_group_member"},{"name":"subSuite","value":"TestStaticGroupMember"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"9660-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_static_group_member"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'deviceRecordId': '50-E46CD1-CXNK01A8D0C7'}"}],"links":[{"name":"GCPT-14617","url":"GCPT-14617","type":"issue"},{"name":"CTM-312349","url":"CTM-312349","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"aac4eaa4d8957379.json","parameterValues":["'test'","{'deviceRecordId': '50-E46CD1-CXNK01A8D0C7'}"]}