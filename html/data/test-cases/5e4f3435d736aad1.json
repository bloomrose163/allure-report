{"uid":"5e4f3435d736aad1","name":"Test - delete record ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test_delete_by_param","historyId":"f3fb29a8c87de00c4aff0c481625e741","time":{"start":1748945483527,"stop":1748945485369,"duration":1842},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000026456B0B8B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000264566D2530>\nparam = {'name': 'workflowhBjghi'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"workflowhBjghi\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Missing Document ID Or Filter(s)!'\n      else:\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_workflow.py:105: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748945322286,"stop":1748945322531,"duration":245},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1748945322531,"stop":1748945323934,"duration":1403},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"base_api","time":{"start":1748945483527,"stop":1748945483527,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000026456B0B8B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000264566D2530>\nparam = {'name': 'workflowhBjghi'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"workflowhBjghi\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Missing Document ID Or Filter(s)!'\n      else:\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_workflow.py:105: AssertionError","steps":[],"attachments":[{"uid":"b8fa5a7ce736157f","name":"Request Info","source":"b8fa5a7ce736157f.json","type":"application/json","size":171},{"uid":"1e5762ad149a97b5","name":"Response Info","source":"1e5762ad149a97b5.json","type":"application/json","size":73},{"uid":"c232c592db634462","name":"Request Info","source":"c232c592db634462.json","type":"application/json","size":174},{"uid":"7d94358a1cc67f65","name":"Response Info","source":"7d94358a1cc67f65.json","type":"application/json","size":542}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"48060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'name': 'workflowhBjghi'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"5e4f3435d736aad1.json","parameterValues":["'test'","{'name': 'workflowhBjghi'}"]}