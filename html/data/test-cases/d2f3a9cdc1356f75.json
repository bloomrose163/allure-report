{"uid":"d2f3a9cdc1356f75","name":"Test - create record & delete twice ","fullName":"testcase.ACS.test_workflow.TestWorkflow#test__create_get_delete_twice","historyId":"e59f644abb6542640980602c80ed5333","time":{"start":1748715523537,"stop":1748715527602,"duration":4065},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023DBDD8CCD0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBF6F0F40>\n\n    @allure.title('Test - create record & delete twice ')\n    def test__create_get_delete_twice(self,base_api):\n       # create a group\n      group_endpoint = \"group\"\n      json_data = load_json(file_paths[\"filter\"])\n      response_create = base_api.create_with_jsondata(group_endpoint,json_data,need_random=True, field=\"name\")\n      assert response_create.status_code == 200\n      group_id = response_create.json()['_id']\n    \n      # create workflow\n      random = base_api.generate_ramdom(endpoint)\n      json_data = load_json(file_paths[\"workflow\"])\n      json_data[\"name\"] = random\n      json_data[\"groups\"] = [group_id]\n>     ACSAPI.verify_create_get_delete_twice(self,base_api,endpoint,json_data)\n\ntestcase\\ACS\\test_workflow.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023DBDD8CCD0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBF6F0F40>\nendpoint = 'workflow'\njson_data = {'actions': [{'actionType': 'Reboot'}], 'bPriorNewAndFailed': True, 'description': 'created by apple', 'execPolicy': {'initialTrigger': {'cpeEvent': 'CC EVENT - On Boot', 'type': 'CPE Event'}}, ...}\n\n    def verify_create_get_delete_twice(self,base_api,endpoint,json_data):\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n        # check if the record could be created with same key, 200 means Yes, 409 means No\n        print(\"create the same body again\")\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 409\n    \n        # get the record\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n    \n        #  delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_api_acs_common.py:50: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748715328519,"stop":1748715328724,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1748715328724,"stop":1748715330109,"duration":1385},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1748715523537,"stop":1748715523537,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023DBDD8CCD0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBF6F0F40>\n\n    @allure.title('Test - create record & delete twice ')\n    def test__create_get_delete_twice(self,base_api):\n       # create a group\n      group_endpoint = \"group\"\n      json_data = load_json(file_paths[\"filter\"])\n      response_create = base_api.create_with_jsondata(group_endpoint,json_data,need_random=True, field=\"name\")\n      assert response_create.status_code == 200\n      group_id = response_create.json()['_id']\n    \n      # create workflow\n      random = base_api.generate_ramdom(endpoint)\n      json_data = load_json(file_paths[\"workflow\"])\n      json_data[\"name\"] = random\n      json_data[\"groups\"] = [group_id]\n>     ACSAPI.verify_create_get_delete_twice(self,base_api,endpoint,json_data)\n\ntestcase\\ACS\\test_workflow.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_workflow.TestWorkflow object at 0x0000023DBDD8CCD0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBF6F0F40>\nendpoint = 'workflow'\njson_data = {'actions': [{'actionType': 'Reboot'}], 'bPriorNewAndFailed': True, 'description': 'created by apple', 'execPolicy': {'initialTrigger': {'cpeEvent': 'CC EVENT - On Boot', 'type': 'CPE Event'}}, ...}\n\n    def verify_create_get_delete_twice(self,base_api,endpoint,json_data):\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n        # check if the record could be created with same key, 200 means Yes, 409 means No\n        print(\"create the same body again\")\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 409\n    \n        # get the record\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n    \n        #  delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_api_acs_common.py:50: AssertionError","steps":[],"attachments":[{"uid":"f23d40da0bb69104","name":"Request Info","source":"f23d40da0bb69104.json","type":"application/json","size":376},{"uid":"bb10337adf0d276a","name":"Response Info","source":"bb10337adf0d276a.json","type":"application/json","size":636},{"uid":"3b7f0e3de30f4d50","name":"Request Info","source":"3b7f0e3de30f4d50.json","type":"application/json","size":540},{"uid":"5e28b4830da8016b","name":"Response Info","source":"5e28b4830da8016b.json","type":"application/json","size":671},{"uid":"b719febd120e791e","name":"Request Info","source":"b719febd120e791e.json","type":"application/json","size":540},{"uid":"7543969971552369","name":"Response Info","source":"7543969971552369.json","type":"application/json","size":234},{"uid":"2a51001e3efb9e99","name":"Request Info","source":"2a51001e3efb9e99.json","type":"application/json","size":157},{"uid":"5428fb8ee3eaa0e9","name":"Response Info","source":"5428fb8ee3eaa0e9.json","type":"application/json","size":681},{"uid":"b6d5e6a80d658072","name":"Request Info","source":"b6d5e6a80d658072.json","type":"application/json","size":160},{"uid":"355d197b4bb4d0e9","name":"Response Info","source":"355d197b4bb4d0e9.json","type":"application/json","size":59}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":10,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_workflow"},{"name":"subSuite","value":"TestWorkflow"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"46036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_workflow"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d2f3a9cdc1356f75.json","parameterValues":["'dev'"]}