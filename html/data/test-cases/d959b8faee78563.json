{"uid":"d959b8faee78563","name":"Test - Query device count with different paramters:{'additionalHardwareVersion': ''}","fullName":"testcase.ACS.test_device.TestDevice#test_get_device_count_by_param","historyId":"1f022e955d49ff5592b0a8688c9d1ed9","time":{"start":1749200952055,"stop":1749200953208,"duration":1153},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001C3BF7560E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0C72E00>\nparam = {'additionalHardwareVersion': ''}\n\n    @allure.title('Test - Query device count with different paramters:{param}')\n    # @pytest.mark.skip()\n    @pytest.mark.parametrize(\"param\", load_json(\"./testdata/ACS/params_get_device.json\"))\n    def test_get_device_count_by_param(self,base_api,param):\n        response = base_api.get_count(endpoint,param)\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_device.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749200886081,"stop":1749200886181,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1749200886181,"stop":1749200887728,"duration":1547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1749200952039,"stop":1749200952055,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001C3BF7560E0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0C72E00>\nparam = {'additionalHardwareVersion': ''}\n\n    @allure.title('Test - Query device count with different paramters:{param}')\n    # @pytest.mark.skip()\n    @pytest.mark.parametrize(\"param\", load_json(\"./testdata/ACS/params_get_device.json\"))\n    def test_get_device_count_by_param(self,base_api,param):\n        response = base_api.get_count(endpoint,param)\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_device.py:34: AssertionError","steps":[],"attachments":[{"uid":"84b7b9147c3b47df","name":"Request Info","source":"84b7b9147c3b47df.json","type":"application/json","size":186},{"uid":"d6b3fb7a9b28f4b3","name":"Response Info","source":"d6b3fb7a9b28f4b3.json","type":"application/json","size":97}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44708-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"param","value":"{'additionalHardwareVersion': ''}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d959b8faee78563.json","parameterValues":["'aws'","{'additionalHardwareVersion': ''}"]}