{"uid":"e4797b2bfb2cefa1","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"bc75a019da3e0a88ce16913844e1666a","time":{"start":1750098277971,"stop":1750098293736,"duration":15765},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000263F66C1570>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000263FAA67490>\nfile_path = './testdata/ACS/provisioning_record_voice_MGCP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750097856594,"stop":1750097856894,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1750097856894,"stop":1750097858111,"duration":1217},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false},{"name":"base_api","time":{"start":1750098277967,"stop":1750098277970,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000263F66C1570>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000263FAA67490>\nfile_path = './testdata/ACS/provisioning_record_voice_MGCP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","steps":[],"attachments":[{"uid":"f717e153cff5f5e","name":"Request Info","source":"f717e153cff5f5e.json","type":"application/json","size":695},{"uid":"ccacfc023369ba40","name":"Response Info","source":"ccacfc023369ba40.json","type":"application/json","size":119},{"uid":"fd71267e98488230","name":"Request Info","source":"fd71267e98488230.json","type":"application/json","size":186},{"uid":"6035072b5050c88d","name":"Response Info","source":"6035072b5050c88d.json","type":"application/json","size":1638},{"uid":"17b37dedf7f5ec27","name":"Request Info","source":"17b37dedf7f5ec27.json","type":"application/json","size":172},{"uid":"da9205e3dfbb10a3","name":"Response Info","source":"da9205e3dfbb10a3.json","type":"application/json","size":66},{"uid":"c8774764b9e83a59","name":"Request Info","source":"c8774764b9e83a59.json","type":"application/json","size":695},{"uid":"569ef5ef7441cde5","name":"Response Info","source":"569ef5ef7441cde5.json","type":"application/json","size":111}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":8,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"2488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_MGCP.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"e4797b2bfb2cefa1.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_voice_MGCP.json'"]}