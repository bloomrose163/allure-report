{"uid":"f387dd1168d87a9","name":"Test - CRUD - create images, display the images and check this profile can be deleted","fullName":"testcase.ACS.test_images.TestImages#test_create_sop_crud","historyId":"34ae35726f77032b389213cdce9215b9","time":{"start":1749666061038,"stop":1749666070217,"duration":9179},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_images.TestImages object at 0x0000027E7AB5DAB0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027E7F0D7D30>\n\n    @allure.feature('CREATE')\n    # @allure.issue('GCPT-14626')\n    @allure.issue('GCPT-14831')\n    @allure.title('Test - CRUD - create images, display the images and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"images\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # create the entity again\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 409\n    \n        # get images info\n        response = base_api.get_by_id_no_org(endpoint,model_id)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_images.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749665848420,"stop":1749665848485,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749665848485,"stop":1749665849786,"duration":1301},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749666061038,"stop":1749666061038,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_images.TestImages object at 0x0000027E7AB5DAB0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027E7F0D7D30>\n\n    @allure.feature('CREATE')\n    # @allure.issue('GCPT-14626')\n    @allure.issue('GCPT-14831')\n    @allure.title('Test - CRUD - create images, display the images and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"images\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # create the entity again\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 409\n    \n        # get images info\n        response = base_api.get_by_id_no_org(endpoint,model_id)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_images.py:54: AssertionError","steps":[],"attachments":[{"uid":"42e18b11ac4ab4ec","name":"Request Info","source":"42e18b11ac4ab4ec.json","type":"application/json","size":353},{"uid":"6f0ce1882b409f22","name":"Response Info","source":"6f0ce1882b409f22.json","type":"application/json","size":551},{"uid":"b57f5ff869600a39","name":"Request Info","source":"b57f5ff869600a39.json","type":"application/json","size":353},{"uid":"637e67ec46219d19","name":"Response Info","source":"637e67ec46219d19.json","type":"application/json","size":226},{"uid":"39b5344d93e3ead8","name":"Request Info","source":"39b5344d93e3ead8.json","type":"application/json","size":145},{"uid":"5467fcbaced32687","name":"Response Info","source":"5467fcbaced32687.json","type":"application/json","size":429}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":6},"afterStages":[],"labels":[{"name":"feature","value":"CREATE"},{"name":"epic","value":"ACS images API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_images"},{"name":"subSuite","value":"TestImages"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"8644-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_images"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14831","url":"GCPT-14831","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"f387dd1168d87a9.json","parameterValues":["'test'"]}