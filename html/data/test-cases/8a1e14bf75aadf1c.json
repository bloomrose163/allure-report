{"uid":"8a1e14bf75aadf1c","name":"Test - delete record ","fullName":"testcase.ACS.test_configuration_profile.TestConfigurationProfile#test_delete_by_param","historyId":"4f649e37b1623eb606f7842ac49e4cc3","time":{"start":1749622743551,"stop":1749622749700,"duration":6149},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x0000023D6CC8FD60>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6E2F2950>\nparam = {'name': 'test_ds_hk2_tp4'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"test_ds_hk2_tp4\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Id is required when Deleting configuration-profile!'\n      else:\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_configuration_profile.py:92: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749622690689,"stop":1749622690900,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749622690901,"stop":1749622692264,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749622743536,"stop":1749622743550,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x0000023D6CC8FD60>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6E2F2950>\nparam = {'name': 'test_ds_hk2_tp4'}\n\n    @allure.title('Test - delete record ')\n    @pytest.mark.parametrize('param',[{\"name\": \"test_ds_hk2_tp4\"}])\n    def test_delete_by_param(self,base_api,param):\n      response_get = base_api.get_list_by_param(endpoint,param)\n      # configuration-profile has no count API\n      # response_get_count = base_api.get_count(endpoint,params)\n      count = len(response_get.json())\n      # assert count == response_get_count.json()[\"count\"]\n      print(f\"There are {count} record will be deleted\")\n    \n      response_delete = base_api.delete_with_param(endpoint,param)\n      if base_api.env == \"aws\":\n        assert response_delete.status_code == 400\n        assert response_delete.json()['error'] == 'Id is required when Deleting configuration-profile!'\n      else:\n>       assert response_delete.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_configuration_profile.py:92: AssertionError","steps":[],"attachments":[{"uid":"e7ed1c71d1eb9e37","name":"Request Info","source":"e7ed1c71d1eb9e37.json","type":"application/json","size":186},{"uid":"94be0f4949d2a89f","name":"Response Info","source":"94be0f4949d2a89f.json","type":"application/json","size":38},{"uid":"5993a50c99a2486b","name":"Request Info","source":"5993a50c99a2486b.json","type":"application/json","size":189},{"uid":"718a68f64f406bf7","name":"Response Info","source":"718a68f64f406bf7.json","type":"application/json","size":225}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":4},"afterStages":[],"labels":[{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_configuration_profile"},{"name":"subSuite","value":"TestConfigurationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_configuration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'name': 'test_ds_hk2_tp4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"8a1e14bf75aadf1c.json","parameterValues":["'test'","{'name': 'test_ds_hk2_tp4'}"]}