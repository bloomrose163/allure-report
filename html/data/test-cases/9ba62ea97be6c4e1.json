{"uid":"9ba62ea97be6c4e1","name":"Test - create service orchestration profile, display the service orchestration profile and check this profile can't be deleted","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_group_static_delete","historyId":"1af266c0830ab43f1dec40d6ebde20b8","time":{"start":1749031558922,"stop":1749031562309,"duration":3387},"status":"failed","statusMessage":"AssertionError: assert 400 == 404\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x00000200752DE740>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000200750C27A0>\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14626')\n    @allure.title('Test - create service orchestration profile, display the service orchestration profile and check this profile can\\'t be deleted')\n    def test_create_group_static_delete(self,base_api):\n        json_data = load_json(file_paths[\"sop_create\"])\n        # json_data ={\"category\" : \"Video Service\"}\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # get service orchestration profile member info\n        response_get = base_api.get_by_id_no_org(endpoint,model_id)\n        assert response_get.status_code == 200\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response_get.json()))\n    \n        # delete the group\n        response_delete= base_api.delete(endpoint,param,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n        #  # delete the memner\n        response_delete= base_api.delete(endpoint,param,model_id)\n>       assert response_delete.status_code == 404\nE       assert 400 == 404\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749031485603,"stop":1749031485901,"duration":298},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1749031485901,"stop":1749031487281,"duration":1380},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1749031558922,"stop":1749031558922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 404\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x00000200752DE740>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000200750C27A0>\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14626')\n    @allure.title('Test - create service orchestration profile, display the service orchestration profile and check this profile can\\'t be deleted')\n    def test_create_group_static_delete(self,base_api):\n        json_data = load_json(file_paths[\"sop_create\"])\n        # json_data ={\"category\" : \"Video Service\"}\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # get service orchestration profile member info\n        response_get = base_api.get_by_id_no_org(endpoint,model_id)\n        assert response_get.status_code == 200\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response_get.json()))\n    \n        # delete the group\n        response_delete= base_api.delete(endpoint,param,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n        #  # delete the memner\n        response_delete= base_api.delete(endpoint,param,model_id)\n>       assert response_delete.status_code == 404\nE       assert 400 == 404\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:55: AssertionError","steps":[],"attachments":[{"uid":"172df01e0518cd51","name":"Request Info","source":"172df01e0518cd51.json","type":"application/json","size":660},{"uid":"db6087344302e720","name":"Response Info","source":"db6087344302e720.json","type":"application/json","size":1547},{"uid":"ebd4f924af83b013","name":"Request Info","source":"ebd4f924af83b013.json","type":"application/json","size":168},{"uid":"38e97ef131409382","name":"Response Info","source":"38e97ef131409382.json","type":"application/json","size":608},{"uid":"835199fb11efb314","name":"Request Info","source":"835199fb11efb314.json","type":"application/json","size":182},{"uid":"66bb2873a8e94ee9","name":"Response Info","source":"66bb2873a8e94ee9.json","type":"application/json","size":66},{"uid":"f384ef67bedfb077","name":"Request Info","source":"f384ef67bedfb077.json","type":"application/json","size":182},{"uid":"90c743cbcfb2c8fb","name":"Response Info","source":"90c743cbcfb2c8fb.json","type":"application/json","size":72}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"attachmentsCount":8,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"CREATE"},{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"40176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14626","url":"GCPT-14626","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"9ba62ea97be6c4e1.json","parameterValues":["'test'"]}