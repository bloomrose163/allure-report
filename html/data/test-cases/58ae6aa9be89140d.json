{"uid":"58ae6aa9be89140d","name":"Test - CRUD - create service orchestration profile with Data Service and query with name","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_query_with_params","historyId":"ee9e94370f87c667c7ff6e3b5cd2a4dc","time":{"start":1749320341782,"stop":1749320347255,"duration":5473},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x00000233633C2E00>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023364C906A0>\nbody_key = 'service_orchestration_profile_data'\n\n    @allure.feature('UPDATE')\n    @allure.issue('GCPT-14802')\n    @allure.issue('GCPT-14848')\n    @allure.title('Test - CRUD - create service orchestration profile with Data Service and query with name')\n    @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\"])\n    def test_create_query_with_params(self,base_api,body_key):\n        json_data = load_body(body_key)\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n        response = base_api.get_by_id_no_org(endpoint,model_id)\n        assert response.status_code == 200\n    \n        response = base_api.update(endpoint,model_id,load_body(\"service_orchestration_profile_data_update\"),need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:138: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749320102106,"stop":1749320102220,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749320102220,"stop":1749320103583,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749320341778,"stop":1749320341781,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x00000233633C2E00>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023364C906A0>\nbody_key = 'service_orchestration_profile_data'\n\n    @allure.feature('UPDATE')\n    @allure.issue('GCPT-14802')\n    @allure.issue('GCPT-14848')\n    @allure.title('Test - CRUD - create service orchestration profile with Data Service and query with name')\n    @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\"])\n    def test_create_query_with_params(self,base_api,body_key):\n        json_data = load_body(body_key)\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n        response = base_api.get_by_id_no_org(endpoint,model_id)\n        assert response.status_code == 200\n    \n        response = base_api.update(endpoint,model_id,load_body(\"service_orchestration_profile_data_update\"),need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:138: AssertionError","steps":[],"attachments":[{"uid":"88113ece25a538c5","name":"Request Info","source":"88113ece25a538c5.json","type":"application/json","size":863},{"uid":"765a1bcbd1f5e4c9","name":"Response Info","source":"765a1bcbd1f5e4c9.json","type":"application/json","size":1711},{"uid":"6de453c75d104bc8","name":"Request Info","source":"6de453c75d104bc8.json","type":"application/json","size":168},{"uid":"45320d91fe8328b4","name":"Response Info","source":"45320d91fe8328b4.json","type":"application/json","size":791},{"uid":"98f91509beaec20b","name":"Request Info","source":"98f91509beaec20b.json","type":"application/json","size":868},{"uid":"b41a967aa4036174","name":"Response Info","source":"b41a967aa4036174.json","type":"application/json","size":129}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":6},"afterStages":[],"labels":[{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"feature","value":"UPDATE"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"18960-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"body_key","value":"'service_orchestration_profile_data'"}],"links":[{"name":"GCPT-14848","url":"GCPT-14848","type":"issue"},{"name":"GCPT-14802","url":"GCPT-14802","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"58ae6aa9be89140d.json","parameterValues":["'test'","'service_orchestration_profile_data'"]}