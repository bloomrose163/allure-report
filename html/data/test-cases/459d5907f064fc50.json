{"uid":"459d5907f064fc50","name":"Test - Query device with different paramters:{'lastDiscoverTime': '2025-03-28T07:10:00.069Z'}","fullName":"testcase.ACS.test_device.TestDevice#test_get_device_by_param","historyId":"e8ab784c27788849e6ba44bea8b67207","time":{"start":1747910084966,"stop":1747910085461,"duration":495},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x0000014006541E40>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x0000014007BE0190>, param = {'lastDiscoverTime': '2025-03-28T07:10:00.069Z'}\n\n    @allure.title('Test - Query device with different paramters:{param}')\n    #@pytest.mark.skip()\n    @pytest.mark.parametrize(\"param\", load_json(\"./testdata/ACS/params_get_device.json\"))\n    def test_get_device_by_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_device.py:41: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747910047428,"stop":1747910047530,"duration":102},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1747910047530,"stop":1747910049127,"duration":1597},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1747910084964,"stop":1747910084966,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x0000014006541E40>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x0000014007BE0190>, param = {'lastDiscoverTime': '2025-03-28T07:10:00.069Z'}\n\n    @allure.title('Test - Query device with different paramters:{param}')\n    #@pytest.mark.skip()\n    @pytest.mark.parametrize(\"param\", load_json(\"./testdata/ACS/params_get_device.json\"))\n    def test_get_device_by_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_device.py:41: AssertionError","steps":[],"attachments":[{"uid":"68214f73e769e43a","name":"Request Info","source":"68214f73e769e43a.json","type":"application/json","size":214},{"uid":"29d1f6a417d8c7ff","name":"Response Info","source":"29d1f6a417d8c7ff.json","type":"application/json","size":88}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"24568-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"param","value":"{'lastDiscoverTime': '2025-03-28T07:10:00.069Z'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"459d5907f064fc50.json","parameterValues":["'aws'","{'lastDiscoverTime': '2025-03-28T07:10:00.069Z'}"]}