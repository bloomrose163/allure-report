{"uid":"d31582a40c28919","name":"Test - 1.can not delete group associated with group 2.forceDelete","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_cpe_filter","historyId":"d39f75db2be3fadafce6656944b2679a","time":{"start":1747983995923,"stop":1747983999449,"duration":3526},"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000024FC024DED0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x0000024FC024DA20>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n    \n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n        # assert\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 403\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_system_group.py:65: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747983990510,"stop":1747983990617,"duration":107},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1747983990617,"stop":1747983992056,"duration":1439},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_api","time":{"start":1747983995922,"stop":1747983995923,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 403\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000024FC024DED0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x0000024FC024DA20>\n\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n    \n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create_with_jsondata(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        response = base_api.create_with_jsondata(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n        # assert\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 403\nE       assert 200 == 403\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_system_group.py:65: AssertionError","steps":[],"attachments":[{"uid":"438c1dd23e68bac1","name":"Request Info","source":"438c1dd23e68bac1.json","type":"application/json","size":265},{"uid":"e361fbaa80a500f0","name":"Response Info","source":"e361fbaa80a500f0.json","type":"application/json","size":314},{"uid":"4dc0a97ed92a81e5","name":"Request Info","source":"4dc0a97ed92a81e5.json","type":"application/json","size":376},{"uid":"98403ae35044c7c0","name":"Response Info","source":"98403ae35044c7c0.json","type":"application/json","size":636},{"uid":"d02381d87e618498","name":"Request Info","source":"d02381d87e618498.json","type":"application/json","size":843},{"uid":"5b7a61a3529c5c34","name":"Response Info","source":"5b7a61a3529c5c34.json","type":"application/json","size":1018},{"uid":"7d8be8303e56412a","name":"Request Info","source":"7d8be8303e56412a.json","type":"application/json","size":157},{"uid":"a18fad4717210b14","name":"Response Info","source":"a18fad4717210b14.json","type":"application/json","size":1028},{"uid":"4c3621b59420630a","name":"Request Info","source":"4c3621b59420630a.json","type":"application/json","size":157},{"uid":"a0afbf37970c0d3b","name":"Response Info","source":"a0afbf37970c0d3b.json","type":"application/json","size":66}],"parameters":[],"attachmentsCount":10,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"16812-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d31582a40c28919.json","parameterValues":["'dev'"]}