{"uid":"aaeb612a13bea181","name":"Test - 1.can not delete group associated with group 2.forceDelete","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_create_cpe_filter","historyId":"4a7a0f8e90b6f4b33bd1253f26ed3a7f","time":{"start":1749100970962,"stop":1749100976925,"duration":5963},"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001E9AD401CC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9B0C64460>\n\n    @allure.issue('GCPT-14694')\n    @allure.issue('GCPT-13268')\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        # current_time = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n        current_time = TimeHandler.get_time_with_offset(self,1)\n        print(\"\\ncurrent_time\",current_time)\n        json_data[\"execPolicy\"][\"window\"][\"startDateTime\"] = current_time\n    \n        response = base_api.create(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n        # assert response_get.json()[\"state\"] == \"Completed\"\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 403\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749100609104,"stop":1749100609335,"duration":231},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749100609335,"stop":1749100610791,"duration":1456},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749100970962,"stop":1749100970962,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 403\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001E9AD401CC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9B0C64460>\n\n    @allure.issue('GCPT-14694')\n    @allure.issue('GCPT-13268')\n    @allure.title('Test - 1.can not delete group associated with group 2.forceDelete')\n    def test_create_cpe_filter(self,base_api):\n        # Prediction -  apply static group for workflow\n        json_data = load_json(file_paths[\"static\"])\n        response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        static_group = response_create.json()['_id']\n    \n        # create a group\n        json_data = load_json(file_paths[\"filter\"])\n        response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n    \n        # create a workflow with this group\n        workflow_endpoint = \"workflow\"\n        json_data = load_json(file_paths[\"workflow\"])\n        json_data[\"groups\"] = [model_id]\n        json_data[\"actions\"][0][\"staticGroupId\"] = static_group\n        # current_time = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n        current_time = TimeHandler.get_time_with_offset(self,1)\n        print(\"\\ncurrent_time\",current_time)\n        json_data[\"execPolicy\"][\"window\"][\"startDateTime\"] = current_time\n    \n        response = base_api.create(workflow_endpoint,json_data,True,\"name\")\n        assert response.status_code == 200\n        workflow_id = response.json()['_id']\n    \n    \n          # get the record of workflow\n        response_get = base_api.get_by_id(workflow_endpoint,workflow_id)\n        assert response_get.status_code == 200\n        # assert response_get.json()[\"state\"] == \"Completed\"\n    \n        # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n>       assert response_delete.status_code == 403\nE       assert 400 == 403\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_system_group.py:77: AssertionError","steps":[],"attachments":[{"uid":"79cff346029f3de8","name":"Request Info","source":"79cff346029f3de8.json","type":"application/json","size":266},{"uid":"d21972cb88984987","name":"Response Info","source":"d21972cb88984987.json","type":"application/json","size":314},{"uid":"a0690e29721f55d4","name":"Request Info","source":"a0690e29721f55d4.json","type":"application/json","size":377},{"uid":"a907a4c1071a6406","name":"Response Info","source":"a907a4c1071a6406.json","type":"application/json","size":636},{"uid":"50e245661f23431e","name":"Request Info","source":"50e245661f23431e.json","type":"application/json","size":844},{"uid":"e9956c91dbd3a14d","name":"Response Info","source":"e9956c91dbd3a14d.json","type":"application/json","size":1018},{"uid":"dd3a9877ff4c5e76","name":"Request Info","source":"dd3a9877ff4c5e76.json","type":"application/json","size":158},{"uid":"1427674e6b355bac","name":"Response Info","source":"1427674e6b355bac.json","type":"application/json","size":1028},{"uid":"4999b5028e06e3c0","name":"Request Info","source":"4999b5028e06e3c0.json","type":"application/json","size":158},{"uid":"eab32bcd40823989","name":"Response Info","source":"eab32bcd40823989.json","type":"application/json","size":135}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":10},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"9660-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-13268","url":"GCPT-13268","type":"issue"},{"name":"GCPT-14694","url":"GCPT-14694","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"aaeb612a13bea181.json","parameterValues":["'test'"]}