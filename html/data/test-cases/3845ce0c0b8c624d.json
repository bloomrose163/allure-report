{"uid":"3845ce0c0b8c624d","name":"Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_sop_crud","historyId":"6f6da280ad139fc36095d9b733de460a","time":{"start":1749201255119,"stop":1749201259561,"duration":4442},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000001C3BF78DFC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0FABE50>\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14626')\n    @allure.title('Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"service_orchestration_profile_create\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # create the entity again\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 409\n    \n        # get configuration profile info\n        response_get = base_api.get_by_id_no_org(endpoints[\"configuration\"],model_id)\n>       assert response_get.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749200886081,"stop":1749200886181,"duration":100},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"get_and_refresh_access_token","time":{"start":1749200886181,"stop":1749200887728,"duration":1547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"base_api","time":{"start":1749201255102,"stop":1749201255119,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000001C3BF78DFC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0FABE50>\n\n    @allure.feature('CREATE')\n    @allure.issue('GCPT-14626')\n    @allure.title('Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"service_orchestration_profile_create\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n    \n        # create the entity again\n        response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response.status_code == 409\n    \n        # get configuration profile info\n        response_get = base_api.get_by_id_no_org(endpoints[\"configuration\"],model_id)\n>       assert response_get.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:57: AssertionError","steps":[],"attachments":[{"uid":"e4d35a8fe2b631c7","name":"Request Info","source":"e4d35a8fe2b631c7.json","type":"application/json","size":650},{"uid":"7899f763a06fcd42","name":"Response Info","source":"7899f763a06fcd42.json","type":"application/json","size":91},{"uid":"f5baa5846d75452c","name":"Request Info","source":"f5baa5846d75452c.json","type":"application/json","size":650},{"uid":"9e2ce2fc1062e60d","name":"Response Info","source":"9e2ce2fc1062e60d.json","type":"application/json","size":210},{"uid":"2002490309c34278","name":"Request Info","source":"2002490309c34278.json","type":"application/json","size":159},{"uid":"e4b5bcf5eef80c42","name":"Response Info","source":"e4b5bcf5eef80c42.json","type":"application/json","size":116}],"parameters":[],"attachmentsCount":6,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"CREATE"},{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44708-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"}],"links":[{"name":"GCPT-14626","url":"GCPT-14626","type":"issue"},{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"3845ce0c0b8c624d.json","parameterValues":["'aws'"]}