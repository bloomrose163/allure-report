{"uid":"ee7e1ed3d2db4eaf","name":"Test - Query device count","fullName":"testcase.ACS.test_device.TestDevice#test_get_invalid_param","historyId":"af9d4cfbd3a511c327b6761c66766428","time":{"start":1748341323234,"stop":1748341325272,"duration":2038},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x0000020EFA1FB9A0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB3F6800>\n\n    @allure.title('Test - Query device count')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_device.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748341295951,"stop":1748341296045,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"get_and_refresh_access_token","time":{"start":1748341296045,"stop":1748341297421,"duration":1376},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false},{"name":"base_api","time":{"start":1748341323219,"stop":1748341323234,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x0000020EFA1FB9A0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB3F6800>\n\n    @allure.title('Test - Query device count')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_device.py:25: AssertionError","steps":[],"attachments":[{"uid":"8a2108768d237e53","name":"Request Info","source":"8a2108768d237e53.json","type":"application/json","size":172},{"uid":"fd9da57ec76402a8","name":"Response Info","source":"fd9da57ec76402a8.json","type":"application/json","size":56},{"uid":"5c824b1c432b8ae1","name":"Request Info","source":"5c824b1c432b8ae1.json","type":"application/json","size":166},{"uid":"c1dcc71986a7de49","name":"Response Info","source":"c1dcc71986a7de49.json","type":"application/json","size":101}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"stepsCount":0,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"42176-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"ee7e1ed3d2db4eaf.json","parameterValues":["'aws'"]}