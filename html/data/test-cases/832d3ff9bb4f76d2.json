{"uid":"832d3ff9bb4f76d2","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"0cbcd0ca8e8200a89f576ef561e7e789","time":{"start":1748425995719,"stop":1748426001194,"duration":5475},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D1AA2532B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D1AB62F160>\nfile_path = './testdata/ACS/provisioning_record_voice_TDMGW.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748425875732,"stop":1748425875864,"duration":132},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1748425875864,"stop":1748425877190,"duration":1326},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1748425995716,"stop":1748425995718,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D1AA2532B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D1AB62F160>\nfile_path = './testdata/ACS/provisioning_record_voice_TDMGW.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","steps":[],"attachments":[{"uid":"997ffc9d9b956cc4","name":"Request Info","source":"997ffc9d9b956cc4.json","type":"application/json","size":712},{"uid":"1154e7bc0e8ed485","name":"Response Info","source":"1154e7bc0e8ed485.json","type":"application/json","size":119},{"uid":"bad7fb537b82525c","name":"Request Info","source":"bad7fb537b82525c.json","type":"application/json","size":186},{"uid":"d6607a9ce0a693c4","name":"Response Info","source":"d6607a9ce0a693c4.json","type":"application/json","size":1297},{"uid":"c709c19ff130d326","name":"Request Info","source":"c709c19ff130d326.json","type":"application/json","size":172},{"uid":"8d5930c13d6eb94e","name":"Response Info","source":"8d5930c13d6eb94e.json","type":"application/json","size":66},{"uid":"29d2da5f50ec9147","name":"Request Info","source":"29d2da5f50ec9147.json","type":"application/json","size":712},{"uid":"53dd3bb58a9f5ab1","name":"Response Info","source":"53dd3bb58a9f5ab1.json","type":"application/json","size":111}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":8},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"50116-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_TDMGW.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"832d3ff9bb4f76d2.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_voice_TDMGW.json'"]}