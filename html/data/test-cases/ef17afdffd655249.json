{"uid":"ef17afdffd655249","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_crud","historyId":"4760fa35075f088d01e296b1664f97b0","time":{"start":1747908274138,"stop":1747908277335,"duration":3197},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001F86124B3D0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x000001F8628D2E60>, file_path = './testdata/ACS/system_group_dynamic.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    # @pytest.mark.parametrize('file_path',file_paths.values())\n    @pytest.mark.parametrize('file_path',[file_paths[\"dynamic\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create(endpoint,file_path,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record , not support this PUT in ACS-NG\n        # json_data = load_json(file_paths[\"update\"])\n        # response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"name\")\n        # assert response_put.status_code == 200\n        # # aws return 200 and null body when put configuration profile\n        # if base_api.env != \"aws\":\n        #   assert response_put.json()['_id'] == model_id\n        #   print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n         # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 404\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n>       assert response_get.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_system_group.py:140: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"_session_faker","time":{"start":1747908265468,"stop":1747908265594,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1747908265594,"stop":1747908267249,"duration":1655},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1747908274136,"stop":1747908274138,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001F86124B3D0>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x000001F8628D2E60>, file_path = './testdata/ACS/system_group_dynamic.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    # @pytest.mark.parametrize('file_path',file_paths.values())\n    @pytest.mark.parametrize('file_path',[file_paths[\"dynamic\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create(endpoint,file_path,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record , not support this PUT in ACS-NG\n        # json_data = load_json(file_paths[\"update\"])\n        # response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"name\")\n        # assert response_put.status_code == 200\n        # # aws return 200 and null body when put configuration profile\n        # if base_api.env != \"aws\":\n        #   assert response_put.json()['_id'] == model_id\n        #   print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n         # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 404\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n>       assert response_get.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_system_group.py:140: AssertionError","steps":[],"attachments":[{"uid":"95f442d187383de6","name":"Request Info","source":"95f442d187383de6.json","type":"application/json","size":245},{"uid":"4ed35352cdf99f4e","name":"Response Info","source":"4ed35352cdf99f4e.json","type":"application/json","size":315},{"uid":"297da2254f724515","name":"Request Info","source":"297da2254f724515.json","type":"application/json","size":154},{"uid":"89333442ba6a7189","name":"Response Info","source":"89333442ba6a7189.json","type":"application/json","size":315},{"uid":"f039ea8d4d81319c","name":"Request Info","source":"f039ea8d4d81319c.json","type":"application/json","size":157},{"uid":"6469fa240831ec81","name":"Response Info","source":"6469fa240831ec81.json","type":"application/json","size":66},{"uid":"26332497ed1ea20","name":"Request Info","source":"26332497ed1ea20.json","type":"application/json","size":157},{"uid":"6ce3a81961b59967","name":"Response Info","source":"6ce3a81961b59967.json","type":"application/json","size":100},{"uid":"c06922cc095ef347","name":"Request Info","source":"c06922cc095ef347.json","type":"application/json","size":154},{"uid":"339d4bd202312963","name":"Response Info","source":"339d4bd202312963.json","type":"application/json","size":72}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"41860-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"},{"name":"file_path","value":"'./testdata/ACS/system_group_dynamic.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e5d857f3b4c4060b","status":"skipped","statusDetails":"Skipped: unconditional skip","time":{"start":1747908244479,"stop":1747908244479,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"ef17afdffd655249.json","parameterValues":["'dev'","'./testdata/ACS/system_group_dynamic.json'"]}