{"uid":"d54b37290bcb9208","name":"Test - test create & delete twice","fullName":"testcase.ACS.test_configuration_profile.TestConfigurationProfile#test_get_create_delete_twice","historyId":"1c7db9e6ef880553bf693fa93addde2d","time":{"start":1750443435743,"stop":1750443447336,"duration":11593},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x00000127E8085600>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000127EB17E6E0>\n\n    @allure.feature('COMMON')\n    @allure.title('Test - test create & delete twice')\n    def test_get_create_delete_twice(self,base_api):\n      json_data = load_body(\"profile_create\")\n>     ACSAPI.verify_create_get_delete_twice(self,base_api,endpoint,json_data)\n\ntestcase\\ACS\\test_configuration_profile.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x00000127E8085600>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000127EB17E6E0>\nendpoint = 'configuration-profile'\njson_data = {'configurations': [{'category': 'Data Service', 'parameterValues': {'AddressingType': 'DHCP', 'ConnectionType': 'IP_Routed', 'FramingType': 'IPoE', 'Mode': 'RG Routed', ...}}], 'name': 'configuration_profilevZk8vP'}\n\n    def verify_create_get_delete_twice(self,base_api,endpoint,json_data):\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n        # check if the record could be created with same key, 200 means Yes, 409 means No\n        print(\"create the same body again\")\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 409\n    \n        # get the record\n        response_get = base_api.get_by_id(endpoint,model_id)\n>       assert response_get.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_api_acs_common.py:47: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750443408219,"stop":1750443408503,"duration":284},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1750443408503,"stop":1750443409839,"duration":1336},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1750443435729,"stop":1750443435740,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x00000127E8085600>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000127EB17E6E0>\n\n    @allure.feature('COMMON')\n    @allure.title('Test - test create & delete twice')\n    def test_get_create_delete_twice(self,base_api):\n      json_data = load_body(\"profile_create\")\n>     ACSAPI.verify_create_get_delete_twice(self,base_api,endpoint,json_data)\n\ntestcase\\ACS\\test_configuration_profile.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcase.ACS.test_configuration_profile.TestConfigurationProfile object at 0x00000127E8085600>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000127EB17E6E0>\nendpoint = 'configuration-profile'\njson_data = {'configurations': [{'category': 'Data Service', 'parameterValues': {'AddressingType': 'DHCP', 'ConnectionType': 'IP_Routed', 'FramingType': 'IPoE', 'Mode': 'RG Routed', ...}}], 'name': 'configuration_profilevZk8vP'}\n\n    def verify_create_get_delete_twice(self,base_api,endpoint,json_data):\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n        # check if the record could be created with same key, 200 means Yes, 409 means No\n        print(\"create the same body again\")\n        response_create = base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n        assert response_create.status_code == 409\n    \n        # get the record\n        response_get = base_api.get_by_id(endpoint,model_id)\n>       assert response_get.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_api_acs_common.py:47: AssertionError","steps":[],"attachments":[{"uid":"6173fb2586f799d6","name":"Request Info","source":"6173fb2586f799d6.json","type":"application/json","size":847},{"uid":"22aed0a9e28e6fc0","name":"Response Info","source":"22aed0a9e28e6fc0.json","type":"application/json","size":878},{"uid":"fae30c4dc0ded722","name":"Request Info","source":"fae30c4dc0ded722.json","type":"application/json","size":847},{"uid":"bee31da6182e1153","name":"Response Info","source":"bee31da6182e1153.json","type":"application/json","size":160},{"uid":"d77e9ab769623e8b","name":"Request Info","source":"d77e9ab769623e8b.json","type":"application/json","size":171},{"uid":"333c591006f6e189","name":"Response Info","source":"333c591006f6e189.json","type":"application/json","size":86}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":6},"afterStages":[],"labels":[{"name":"feature","value":"COMMON"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_configuration_profile"},{"name":"subSuite","value":"TestConfigurationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"36600-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_configuration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d54b37290bcb9208.json","parameterValues":["'test'"]}