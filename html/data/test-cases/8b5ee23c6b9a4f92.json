{"uid":"8b5ee23c6b9a4f92","name":"Test - Query device with different paramters:{'$matcher': {'serialNumber': 'CXNK01A8D0C7'}}","fullName":"testcase.ACS.test_device.TestDevice#test_get_device_by_param","historyId":"986e5965ad86eae9b9c610f6035e85ba","time":{"start":1749100683106,"stop":1749100683886,"duration":780},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001E9AE8DC250>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AD4B8130>\nparam = {'$matcher': {'serialNumber': 'CXNK01A8D0C7'}}\n\n    @allure.title('Test - Query device with different paramters:{param}')\n    @allure.issue('GCPT-14686')\n    # @pytest.mark.skip()\n    @pytest.mark.parametrize(\"param\", load_json(\"./testdata/ACS/params_get_device.json\"))\n    def test_get_device_by_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_device.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749100609104,"stop":1749100609335,"duration":231},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749100609335,"stop":1749100610791,"duration":1456},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749100683106,"stop":1749100683106,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001E9AE8DC250>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AD4B8130>\nparam = {'$matcher': {'serialNumber': 'CXNK01A8D0C7'}}\n\n    @allure.title('Test - Query device with different paramters:{param}')\n    @allure.issue('GCPT-14686')\n    # @pytest.mark.skip()\n    @pytest.mark.parametrize(\"param\", load_json(\"./testdata/ACS/params_get_device.json\"))\n    def test_get_device_by_param(self,base_api,param):\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_device.py:43: AssertionError","steps":[],"attachments":[{"uid":"d4b1d9c2dc7c663b","name":"Request Info","source":"d4b1d9c2dc7c663b.json","type":"application/json","size":205},{"uid":"353ce6725863b553","name":"Response Info","source":"353ce6725863b553.json","type":"application/json","size":168}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"9660-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"param","value":"{'$matcher': {'serialNumber': 'CXNK01A8D0C7'}}"}],"links":[{"name":"GCPT-14686","url":"GCPT-14686","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"8b5ee23c6b9a4f92.json","parameterValues":["'test'","{'$matcher': {'serialNumber': 'CXNK01A8D0C7'}}"]}