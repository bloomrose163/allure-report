{"uid":"dbece549edf9c952","name":"Test - get and filter","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_get_filter","historyId":"f9c2063cb471d206a54e788e64eb4ea3","time":{"start":1749666542100,"stop":1749666545009,"duration":2909},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000027E7ABA02B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027E7D97FC70>\n\n    @allure.title('Test - get and filter')\n    def test_get_filter(self,base_api):\n        # json_data = load_json(file_paths[\"filter\"])\n        # response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        # assert response_create.status_code == 200\n        # model_id = response_create.json()['_id']\n    \n        param = {\"limit\": 2,\"filter\": \"CXNK0151C334\",}\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_system_group.py:190: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749665848420,"stop":1749665848485,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749665848485,"stop":1749665849786,"duration":1301},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749666542096,"stop":1749666542100,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x0000027E7ABA02B0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027E7D97FC70>\n\n    @allure.title('Test - get and filter')\n    def test_get_filter(self,base_api):\n        # json_data = load_json(file_paths[\"filter\"])\n        # response_create = base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        # assert response_create.status_code == 200\n        # model_id = response_create.json()['_id']\n    \n        param = {\"limit\": 2,\"filter\": \"CXNK0151C334\",}\n        response = base_api.get_list_by_param(endpoint,param)\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_system_group.py:190: AssertionError","steps":[],"attachments":[{"uid":"c36fecaaf1b0d57a","name":"Request Info","source":"c36fecaaf1b0d57a.json","type":"application/json","size":192},{"uid":"7a31baa37a625373","name":"Response Info","source":"7a31baa37a625373.json","type":"application/json","size":429}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"8644-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"dbece549edf9c952.json","parameterValues":["'test'"]}