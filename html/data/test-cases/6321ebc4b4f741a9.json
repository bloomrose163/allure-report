{"uid":"6321ebc4b4f741a9","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"bc75a019da3e0a88ce16913844e1666a","time":{"start":1749175298519,"stop":1749175303169,"duration":4650},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000223EC15B010>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000223EEFC1810>\nfile_path = './testdata/ACS/provisioning_record_voice_MGCP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749173219450,"stop":1749173219578,"duration":128},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1749173219578,"stop":1749173220869,"duration":1291},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1749175298506,"stop":1749175298518,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000223EC15B010>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000223EEFC1810>\nfile_path = './testdata/ACS/provisioning_record_voice_MGCP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","steps":[],"attachments":[{"uid":"fcdf7990e2ab51f7","name":"Request Info","source":"fcdf7990e2ab51f7.json","type":"application/json","size":695},{"uid":"57499e3225cafe9c","name":"Response Info","source":"57499e3225cafe9c.json","type":"application/json","size":119},{"uid":"e89e61fc5b29aa37","name":"Request Info","source":"e89e61fc5b29aa37.json","type":"application/json","size":186},{"uid":"7acdec32594b7fc","name":"Response Info","source":"7acdec32594b7fc.json","type":"application/json","size":1638},{"uid":"84402a870c68d8e0","name":"Request Info","source":"84402a870c68d8e0.json","type":"application/json","size":172},{"uid":"e5aa282f170dc005","name":"Response Info","source":"e5aa282f170dc005.json","type":"application/json","size":66},{"uid":"3381fa17e5e7a20","name":"Request Info","source":"3381fa17e5e7a20.json","type":"application/json","size":695},{"uid":"5da1d68eaf8589ce","name":"Response Info","source":"5da1d68eaf8589ce.json","type":"application/json","size":111}],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":8,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"19868-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_MGCP.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"6321ebc4b4f741a9.json","parameterValues":["'test'","'./testdata/ACS/provisioning_record_voice_MGCP.json'"]}