{"uid":"d52dd0bbcba5323d","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud","historyId":"dd949a74941c9f7e345b7c615b885816","time":{"start":1748888341286,"stop":1748888344300,"duration":3014},"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000027D6F516290>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027D6EEBAD10>\nfile_path = './testdata/ACS/provisioning_record_voice_TDMGW.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1748888237032,"stop":1748888237243,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1748888237243,"stop":1748888238670,"duration":1427},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1748888341283,"stop":1748888341285,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code","statusTrace":"self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000027D6F516290>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027D6EEBAD10>\nfile_path = './testdata/ACS/provisioning_record_voice_TDMGW.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n>       assert response_create.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:95: AssertionError","steps":[],"attachments":[{"uid":"d8eed2dd97f81145","name":"Request Info","source":"d8eed2dd97f81145.json","type":"application/json","size":711},{"uid":"264a13a3c56bf8f6","name":"Response Info","source":"264a13a3c56bf8f6.json","type":"application/json","size":119},{"uid":"a3d1ef14ca8d1e36","name":"Request Info","source":"a3d1ef14ca8d1e36.json","type":"application/json","size":185},{"uid":"de30bbaa73e630ed","name":"Response Info","source":"de30bbaa73e630ed.json","type":"application/json","size":1297},{"uid":"5c71cb088587af6e","name":"Request Info","source":"5c71cb088587af6e.json","type":"application/json","size":171},{"uid":"ff1bd2fe590eeb1d","name":"Response Info","source":"ff1bd2fe590eeb1d.json","type":"application/json","size":66},{"uid":"a777593cc063042d","name":"Request Info","source":"a777593cc063042d.json","type":"application/json","size":711},{"uid":"4616f8ce9d1f1890","name":"Response Info","source":"4616f8ce9d1f1890.json","type":"application/json","size":111}],"parameters":[],"attachmentStep":false,"hasContent":true,"stepsCount":0,"attachmentsCount":8,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - ProvisioningRecord"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_provisioning_record"},{"name":"subSuite","value":"TestProvisioningRecord"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"2208-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_provisioning_record"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'dev'"},{"name":"file_path","value":"'./testdata/ACS/provisioning_record_voice_TDMGW.json'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"d52dd0bbcba5323d.json","parameterValues":["'dev'","'./testdata/ACS/provisioning_record_voice_TDMGW.json'"]}