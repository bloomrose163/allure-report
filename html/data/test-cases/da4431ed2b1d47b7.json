{"uid":"da4431ed2b1d47b7","name":"Test - CRUD - create and update service orchestration profile with Video Service","fullName":"testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_updata_video","historyId":"2475b8fc99954b9f5ed9924caa18cb65","time":{"start":1749623110582,"stop":1749623113640,"duration":3058},"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x0000023D6CD31150>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6E206C50>\nbody_key = 'service_orchestration_profile_video'\n\n    @allure.feature('UPDATE')\n    # @allure.issue('GCPT-14802')\n    # @allure.issue('GCPT-14848')\n    @allure.title('Test - CRUD - create and update service orchestration profile with Video Service')\n    @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_video\"])\n    def test_create_updata_video(self,base_api,body_key):\n        json_data = load_body(body_key)\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:195: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749622690689,"stop":1749622690900,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1749622690901,"stop":1749622692264,"duration":1363},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1749623110568,"stop":1749623110581,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 500 == 200\n +  where 500 = <Response [500]>.status_code","statusTrace":"self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x0000023D6CD31150>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023D6E206C50>\nbody_key = 'service_orchestration_profile_video'\n\n    @allure.feature('UPDATE')\n    # @allure.issue('GCPT-14802')\n    # @allure.issue('GCPT-14848')\n    @allure.title('Test - CRUD - create and update service orchestration profile with Video Service')\n    @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_video\"])\n    def test_create_updata_video(self,base_api,body_key):\n        json_data = load_body(body_key)\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 500 == 200\nE        +  where 500 = <Response [500]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:195: AssertionError","steps":[],"attachments":[{"uid":"64b7dcfa03aa49ec","name":"Request Info","source":"64b7dcfa03aa49ec.json","type":"application/json","size":491},{"uid":"1dbc48be68fc02f1","name":"Response Info","source":"1dbc48be68fc02f1.json","type":"application/json","size":225}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"epic","value":"ACS Service Orchestration Profile API"},{"name":"feature","value":"UPDATE"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_service_orchestration_profile"},{"name":"subSuite","value":"TestServiceOrchestrationProfile"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"44408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_service_orchestration_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"},{"name":"body_key","value":"'service_orchestration_profile_video'"}],"links":[{"name":"CTM-315046","url":"CTM-315046","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"da4431ed2b1d47b7.json","parameterValues":["'test'","'service_orchestration_profile_video'"]}