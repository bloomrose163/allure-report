{"uid":"8bb2b7869b55f56b","name":"Test - Query device count with invalid ","fullName":"testcase.ACS.test_device.TestDevice#test_get_invalid_param","historyId":"43cdde2d7b9f9882c6f6916901cb11e1","time":{"start":1749451418071,"stop":1749451423332,"duration":5261},"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001FEFF64F100>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FEFFF3D780>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749451326138,"stop":1749451326517,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"get_and_refresh_access_token","time":{"start":1749451326517,"stop":1749451327902,"duration":1385},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_api","time":{"start":1749451418068,"stop":1749451418071,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 200 == 404\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <testcase.ACS.test_device.TestDevice object at 0x000001FEFF64F100>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FEFFF3D780>\n\n    @allure.title('Test - Query device count with invalid ')\n    @allure.issue('GCPT-14685')\n    # @pytest.mark.skip()\n    def test_get_invalid_param(self,base_api):\n        response = base_api.get_count(endpoint,{\"macAddress\": \"notvalid\"})\n        assert response.status_code == 200\n        assert response.json()[\"count\"] == 0\n        response = base_api.get_list_by_param(endpoint,{\"macAddress\": \"notvalid\"})\n>       assert response.status_code == 404\nE       assert 200 == 404\nE        +  where 200 = <Response [200]>.status_code\n\ntestcase\\ACS\\test_device.py:26: AssertionError","steps":[],"attachments":[{"uid":"50e9f3b1b3c632f","name":"Request Info","source":"50e9f3b1b3c632f.json","type":"application/json","size":175},{"uid":"fda2a7b9f0bc9aa5","name":"Response Info","source":"fda2a7b9f0bc9aa5.json","type":"application/json","size":56},{"uid":"4bae4b6dfdb1d6f5","name":"Request Info","source":"4bae4b6dfdb1d6f5.json","type":"application/json","size":169},{"uid":"42ed1abd43341b1d","name":"Response Info","source":"42ed1abd43341b1d.json","type":"application/json","size":101}],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"Test - device"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_device"},{"name":"subSuite","value":"TestDevice"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"12180-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_device"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'test'"}],"links":[{"name":"GCPT-14685","url":"GCPT-14685","type":"issue"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"8bb2b7869b55f56b.json","parameterValues":["'test'"]}