{"name": "Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted", "status": "broken", "statusDetails": {"message": "KeyError: 'test'", "trace": "self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000002802B11D870>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002802B6546A0>\n\n    @allure.feature('CREATE')\n    # @allure.issue('GCPT-14626')\n    @allure.issue('GCPT-14831')\n    @allure.title('Test - CRUD - create service orchestration profile, display the service orchestration profile and check this profile can be deleted')\n    def test_create_sop_crud(self,base_api):\n        json_data = load_body(\"service_orchestration_profile_create\")\n        json_data[\"name\"] = base_api.generate_ramdom(endpoint)\n>       response= base_api.create(endpoint,json_data,need_random=False, field=\"name\")\n\ntestcase\\ACS\\test_service_orchestration_profile.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_api_acs.py:165: in create\n    return self.request(method='POST',endpoint=endpoint,json=json_data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.base_api_acs.BaseAPIACS object at 0x000002802B6546A0>\nmethod = 'POST', endpoint = 'service-orchestration-profile', kwargs = {}\nurl = 'http://acs-api.testx.xilac.net/cc/service-orchestration-profile'\nheaders = {'Content-Type': 'application/json', 'X-Calix-ClientID': 'KTd0rgovlUvdihkkHGnIMCV23Z8c5Uh1', 'accept': 'application/json', 'x-Calix-Accesstoken': 'AnMR8w9fo23tzDPMqFa10GsLAYYZ'}\ncookies = None, params = None, data = None\njson_data = {'APAS_EnableIPTV_SSID': False, 'AnyPortAnyServiceEnabled': False, 'BridgedInterface': ['5GHz IPTV SSID', 'LAN Port 2'], 'MaxStreams': 0, ...}\nfiles = None\n\n    def request(self, method, endpoint, **kwargs):\n        url = self.base_url + endpoint\n        headers= Default().headers\n        headers = kwargs.pop(\"headers\", headers)\n        cookies = kwargs.pop(\"cookies\", None)\n        params = kwargs.pop(\"params\", None)\n        data = kwargs.pop(\"data\", None)\n        json_data = kwargs.pop(\"json\", None)\n        files = kwargs.pop(\"files\", None)\n        timeout = kwargs.pop(\"timeout\", 10)\n        no_org = kwargs.pop(\"no_org\", False)\n        # TODO  placeholder\n        start_time = time.time()\n        merged_params = self._merge_params(params,no_org)\n        if \"orgId\" and json_data and \"orgId\" in json_data:\n>            json_data[\"orgId\"] = ENV_CONFIG[self.env][\"orgId\"]\nE            KeyError: 'test'\n\nutils\\base_api_acs.py:70: KeyError"}, "parameters": [{"name": "base_api", "value": "'test'"}], "start": 1749781685816, "stop": 1749781685818, "uuid": "58d2a2fd-9e72-4ae7-b308-ca16274bb92b", "historyId": "c0934e2f6dbc0229bd7f6d9f59785128", "testCaseId": "8bb4f2c33f62ec8d424d5e1abc015e49", "fullName": "testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_sop_crud", "labels": [{"name": "epic", "value": "ACS Service Orchestration Profile API"}, {"name": "feature", "value": "CREATE"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_service_orchestration_profile"}, {"name": "subSuite", "value": "TestServiceOrchestrationProfile"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "12432-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_service_orchestration_profile"}], "links": [{"type": "issue", "url": "GCPT-14831", "name": "GCPT-14831"}, {"type": "tms", "url": "CTM-315046", "name": "CTM-315046"}]}