{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F1D50>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB3C1720>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "1836812d-90ed-4210-b412-2887154c8a0e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "28d2bd7b-c336-491b-8e93-2a64fecbac45-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4a57fb8f-7e97-4774-a6f1-376c9027768a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "85cdb491-9fca-4c11-b78e-8e0d89212157-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5eb0ff21-3c61-4cf3-bf15-574702d2df5f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6f9ec1ca-27b1-446d-bd8a-cbd8f5bfb5a0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cd2c5a2e-633c-4311-9467-60faf8615a24-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "51a7b8f5-c02d-49bd-9035-5eb60b374293-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d6edf0b1-be57-4cd2-9858-5999927e7660-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5572ceac-d917-4346-b269-5c6e82a205fa-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1b67cb87-4b21-4717-8a66-9af60302dd72-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "13d7afa4-5b05-4420-8e58-513aca3dcc08-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7b61df47-fa1b-489d-9544-69dbb5f67756-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0d653e8b-982e-40ed-bf26-cf0174f3a9eb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f57e7fce-0c8d-4eed-8a9f-1460ed6c59ed-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1d879bd1-9124-41bc-9e6f-d7245b15e24e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fbe5cbce-8c1c-40c1-91b9-3bb6d6217817-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d93957d3-9709-4de7-8577-5b9896356839-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748341504714, "stop": 1748341516343, "uuid": "8c4cf4e7-76ec-4987-a856-9c503681334f", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "42176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}