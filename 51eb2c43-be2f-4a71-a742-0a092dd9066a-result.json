{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C3BF7BF7F0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0F33640>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "83759215-151c-4631-8b97-7fd42af3f441-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7e28d576-5ad1-481e-be61-b3768589cad1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "09835179-2f26-404a-913d-de78122b55ab-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c67f5816-2b6e-40e4-84b0-a1398c9684ad-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e12188d0-6888-4f52-a3d1-09c78dd79130-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b989a0f9-53c7-412b-9f02-1486649421f2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2797610e-8820-4d4d-930b-fca7298c5b4f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "17ef5a14-e6ea-4d8c-b308-1745c3029db1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4ea83fac-5167-4932-971f-43dcdede6440-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "63f2a341-a67b-4c9e-8d8e-3a317413bb90-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c200b2c8-191a-4046-9d1f-1009809a680b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9792d58c-266a-44a1-9f4a-d9370b3d65de-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0a707ff0-99bf-4142-8d7e-567c4b2b938b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dd281976-9a7f-438f-9286-ea0d169de9a1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c24b4dda-7b6b-4901-894c-af6a8a37d35c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c9038ece-0310-4cb7-9e30-9191adc775ad-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4ecb4dea-22f7-4eb3-b053-067b4825e120-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "908ed1f2-ac7d-495d-a99e-29473375c24d-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749201145467, "stop": 1749201160728, "uuid": "6014b3cb-dbdf-472a-952a-c09314ef3da3", "historyId": "6fd80bcf6ed1fc0324f489703b83de54", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}