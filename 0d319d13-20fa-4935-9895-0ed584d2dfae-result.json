{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 408 == 200\n +  where 408 = <Response [408]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000027D6F515FC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000027D71CDA770>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 408 == 200\nE        +  where 408 = <Response [408]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "27e4084b-5da7-4ba9-92bf-48298024ad9a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "93cb872e-a185-47ff-b969-7b4e8d775fc4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "632e20e3-ec45-43ed-9f9a-9466b18fa945-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4983dddf-7e5f-4118-9a2e-f9039e4eaf9c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7bfc4be4-2bc9-4b7b-aa13-ef782baacf97-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "efc37a78-25f9-46e2-b343-f5fd19efbdeb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "61c96686-e42e-4fc4-8b7b-51be42f3af7b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7e17325e-3053-4145-8665-abd01fbb007d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d04e051d-3fc5-4087-b11a-601046c0c90f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "22c53200-73a8-4ddc-bc7d-5c75b14989cd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ec57bb3a-8c01-4d5c-915c-0c81bfa632b7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "93b095a7-d137-42fe-8660-0c3d9e07d087-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'dev'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748888308603, "stop": 1748888341264, "uuid": "e9f208dc-74eb-4264-963d-59ced1c19a41", "historyId": "ab0fccb012d66c47151964a0e2fb9c6d", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "2208-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}