{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001AED31B3AC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001AED5B71780>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "6271a1e7-ebab-4a8f-998b-523ebdda5508-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1380ef81-9ad8-4ed0-9999-0660fa9866e5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a5a53d10-10b7-4d3b-bc95-5ed7ce92beca-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3a8b91d7-ccd4-4d50-98fb-4ada63ef3f04-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7a76ce7c-b806-476a-bc05-27c872ec0616-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2dbebef8-81ac-4dfe-8530-fa753ae35c79-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fbe7e02b-2175-44e6-b958-2c4969b714d9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4ce002ea-b2e6-4bc3-94d6-944d71635dfe-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9856a2aa-bdf4-470e-9f71-2acb7723917d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "62155029-2c44-42b6-af98-71a086420aab-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "6cfe27a2-d237-41b2-932f-f5fd24c5188c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9391cf6f-8017-4b25-ac78-7bb02afde6d1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "78fe7904-6ec2-44a9-9728-b366bceeb097-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2e1c1433-e4b9-432f-9c01-a740a36f27ca-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c5208442-3626-46d8-82aa-6bd23ee1fef2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9506a524-ca03-416e-845a-8bec66b528bb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a66827cb-26da-4557-bbd5-dea0517957d9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c72b7521-f697-43e1-908d-190ddc46f0eb-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748456243949, "stop": 1748456257769, "uuid": "72843272-33f4-4f9e-952f-35434d4cb1ae", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "43328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}