{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001BC6CECABC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6E2D4790>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "fd5940cb-2c09-49e1-86e1-efe7fcb140e1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f711ab2f-dbb9-4142-b1b9-11d3a7d53df4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "04c41e7c-9233-4ef6-86b3-dc4c7227fc78-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c9557cc7-2e40-49d5-b639-05fab8dad244-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b989fa29-35ea-46ba-bb31-545645e0b56b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "79eb3be6-79b0-4108-bbc6-b43145509c3f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1744df17-d153-4258-b76a-92dec0996ce1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "39932660-0ad7-494e-90b2-a3a790013543-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "23cadc8e-c531-43bf-a5c4-d96db361d131-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "be55611e-70fd-4740-beb0-60d7767c13ef-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "38fad6a0-516b-4443-9bbc-09ea9d975e82-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "05b30f13-beff-4cb6-9972-c785bade499e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f296ea63-9a0b-4e60-b857-fbc34a567a1f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ca7b3590-823c-4f17-a2f3-0206120a7aa3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8fafc945-2cc7-401e-85cb-6e8022d41114-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "44316daa-f6c0-4942-beec-2a71831eda3f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ed7bf7b9-cc36-4f4d-b89a-49bf7631de8b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0f201814-cad9-486c-aaef-1fac27fd9da2-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749140487741, "stop": 1749140498370, "uuid": "98c2079f-e4e3-4637-b34a-2232614cb407", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}