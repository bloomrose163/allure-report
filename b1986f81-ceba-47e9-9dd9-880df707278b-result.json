{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C2C241BBE0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C2C3A4F190>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "89060bbe-d1ee-4a8a-a879-183b205915b7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0628951a-061a-4bd7-98bb-073ef1a9e42e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "311da925-9a6d-4b6a-8561-139615108f2d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "47f8020f-87d3-4185-82eb-b8ef86ed9595-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ac93ed86-0bc8-43b3-b35e-0c182c9e8d6c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "22518d6f-9856-44a0-a23a-db7baab3f3c3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0ba043bc-c86d-4d4f-b0a0-c06b330d26cf-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4938c762-3c26-4064-9b8f-a0d76a3dc877-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "848defd2-51be-4b7b-9178-eba741bd8ade-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b7ce07b9-c1e7-4f4e-9a73-ca58ba5f4e8f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d0fa024e-c1b0-4eaa-bde6-a21c42fb71f0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "cd5094f3-faa1-44bc-8a52-e5e72b07499f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4261a7d8-2f0b-4488-8195-d4123d0e21fa-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2e015f7f-a080-4ad4-b0bd-a61e5c142c48-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9b041b9f-e476-477b-8213-f271f896a556-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fad76811-72d6-4698-ad85-6ff06ad7e4af-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a8d99448-40fd-4328-8ec2-1d395b4e0525-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6b5dee05-c006-42da-9fca-173b5211d25c-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749806477359, "stop": 1749806503354, "uuid": "4baf34b0-9b69-4268-9f98-e1bbb2f367cb", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "5088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}