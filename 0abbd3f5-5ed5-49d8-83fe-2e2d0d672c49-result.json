{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 408 == 200\n +  where 408 = <Response [408]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000023DBDD0C760>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000023DBD836350>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 408 == 200\nE        +  where 408 = <Response [408]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "195ed0e1-6e0e-41a4-ab61-656dd0eba1ee-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fe861051-38d1-4cc5-b782-69c760627fcd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "12f59aa1-3868-47bd-87b5-e5449ed135ea-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f75d1681-e059-40b4-9c0d-e3da1f8928a5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "495be1cb-3221-42f8-8c7c-76e6ea6ab89d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fcb68d4d-765b-41b7-b79d-36892cca82d3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a83702f9-b7fc-4072-9372-a60f5b86cadf-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8a893c8b-7b6c-4c8d-8330-8f994ae03cf4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ca68f632-f1f5-45ad-b178-a18d901a51fe-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d92a2c51-abc7-41b2-bdf2-99a9a9ea0249-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a6beb58d-b5ce-46ab-ad33-0f43521d6d03-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0318a536-92cf-48c4-bf84-59ad3ebf7702-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'dev'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748715391870, "stop": 1748715423998, "uuid": "be1de670-466e-49c7-bec0-069ddca3939b", "historyId": "ab0fccb012d66c47151964a0e2fb9c6d", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "46036-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}