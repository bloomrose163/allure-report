{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001FEFF6ACA30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FE82527730>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "0c6f259f-9a20-42df-a888-ddb844782a1f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e26aa90e-9985-4b2d-8942-190afac95704-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "345927b3-9355-4c81-9e4b-6f162354ca25-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9fd315da-3aec-42c1-9153-43d1a4b91765-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "199b2918-0ffd-438c-95a3-6871a62a65ae-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c69ef156-fb89-4f0e-866a-765693f528f6-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "59a64c7c-f5c0-419e-852a-19febe08cbf9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "321b1d25-d315-4ccd-80a6-b22e38f80004-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a216ae17-d112-4796-aae7-77ca2047e15d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dfc0a088-f5bc-4d15-8524-9283efb44530-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a777323e-cd59-4967-9d21-00d222a98090-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3e3794d2-f964-48bc-ad80-112b1398db5a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "10c38dbf-5c67-402a-b651-a41974229cc4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b5f9eb17-a34c-4000-aa98-d6514fbdcb7b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "def0d248-093a-40e6-b2c6-cf8252db7cc4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f66c7c46-c5a3-4250-bac8-2c20b7b88fea-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "61cca573-da94-4482-aeba-d8d6eed0d9fc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "add09e76-b886-420c-8e72-e1794f9a7d6c-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749451704225, "stop": 1749451721289, "uuid": "d10718b5-1ca6-417d-93eb-c5a85f0bccb5", "historyId": "6fd80bcf6ed1fc0324f489703b83de54", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "12180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}