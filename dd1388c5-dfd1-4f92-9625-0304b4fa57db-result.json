{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000026456A76140>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000026456813280>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "396d506f-2a3c-4dc3-93cb-cc54e7e8760e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c4e6bfbc-0d29-4f47-ba6f-6ab263975b06-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9fdb2237-6869-417e-b26f-7e8c575ff972-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "10b18e9a-c0a9-42e1-830f-532b3dd57301-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1f7afd59-964a-4f6d-886f-5d6d5e505c3b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7decbb78-7a83-4f1b-a579-0e788aa4ac36-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9a7c7f1d-93b2-4720-82d9-2f92785668e1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1e56b6f6-702d-4978-bc00-3ab4d042e796-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5ad8942f-1f4e-4354-b64b-e543c6fdc62a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dc75a889-e8fc-421d-b3c9-14290805b1b3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "730bd681-ebfd-45e8-8192-b73dd5730495-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5c55c814-a746-436b-9000-097ff3f098a2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "77b4be1e-7443-4f95-a51e-127c84aa6cf4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "66e6cd8d-388f-44f0-add4-2bc470c3880a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bf05ba9a-ad82-4599-8e43-f545dd55fbd4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "64a9bc16-cb75-465c-b3dc-70dd9369ad21-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a05d895c-ccbc-4887-825d-5ddbf6fe424a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f2ee1275-1fc7-45d0-906d-57efc0139561-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748945405673, "stop": 1748945414825, "uuid": "1339d7a4-1af6-4c44-a5c0-5e12ef863da2", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "48060-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}