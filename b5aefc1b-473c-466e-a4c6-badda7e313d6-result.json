{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000026456A75FF0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002645907C220>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "ea003660-0f10-450a-b244-dc4f234fc7c0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "39c8693d-791d-4e66-bd3e-6c20b47e2973-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ae8a61f3-3d32-4326-ae0e-c4e4485ee4d0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "21a39f28-8067-4c47-8e78-b625c0379607-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d4ea8bd5-bfb5-48dc-a990-2939715c0e00-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9883dec0-ef50-450e-a725-47ff8260d256-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "87a7d0ec-1e6a-41f5-8019-3e8be870545e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c6047e30-47f1-4f1c-841e-ebc5fba61001-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "30695710-7bef-496c-82ec-273975acc7fc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4b3c63ea-d0f7-406d-a210-f3ff86e82aed-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b83b0421-ac78-4cc0-b359-c0c3fb59a0a7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2d2b01db-9729-4f76-91ac-7e8e80c22dcb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "023e69fd-d7cb-499c-819d-fb23541d72b4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "55b9aaa2-2a47-4996-84a0-8b851c6ddfb3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c93d96ff-e17c-458f-b3bd-28d3ef0eb4c2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0b48007e-5339-4fb0-9a14-1f81c215b239-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c6bc1d83-4b27-4305-881f-e79e8e4ff02f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "681bc2b7-a542-4eae-b280-b22d09556f31-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748945395293, "stop": 1748945405633, "uuid": "530acc5b-74e1-4efa-8c41-6da9843384a7", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "48060-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}