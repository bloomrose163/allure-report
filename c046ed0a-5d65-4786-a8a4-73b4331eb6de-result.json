{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000227BDD77850>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227BDB2CF10>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "8090afdd-e9bc-467b-b2b0-070ca1abee5d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e0332cec-b4e7-43b1-a0e5-118775a388a8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "71d64a7a-9690-4f17-a2c4-e2ce86be278f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "23881000-30c7-4d13-925c-db13c6b1cd81-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e0ec0202-7f33-45ea-917f-09cbda616055-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1325e929-e8e0-4a41-ad6c-86dd0c293c3c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5acb13b6-7044-4f86-89bb-a1e1a6399d72-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bc83ed62-4282-4c58-bee8-87b47ae455d1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "db40fe91-2207-4532-b528-68ef864eb601-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8478428d-af99-46fb-9f2f-1da2b1276249-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d7b2e67d-0298-4be7-9ea6-495f7de1b95f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "036b4008-8e6c-49b1-92b2-08f9544c7f70-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c024de2a-2b42-4f21-8635-02cadf6a23bc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ddd4975d-8770-4a48-b81d-8ee1e9bdcc3d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "32a4813f-bdb3-403d-8d0f-1215868e5ede-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "40a14e6e-b3f3-4384-8b90-de5d4616db63-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0e05032c-ce5a-4056-b56e-fb0903548d65-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8e1b63f6-bed8-4896-8395-521b9a6bf0cd-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748369938956, "stop": 1748369952102, "uuid": "05f77dec-c229-4d78-8d59-46f83423c5fd", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "32716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}