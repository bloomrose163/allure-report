{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001AED31B3B80>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001AED5CE12D0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "dcd7dee2-2a8e-4b34-b26c-455efdb6b046-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "407f3779-7729-42a8-8fda-95f19ec6a9db-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1ab251ac-4fd5-4ea9-8923-1865df7c3cf4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "306d7256-dada-4f5d-818a-702df411927a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3b8eb7ec-53d0-466b-96b7-5f9480e05cb7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "771ffb96-3739-4923-819d-5b9314236c95-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d88f3f53-f1ae-4261-8d2d-3b582c28a78f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dcc96ddd-51fd-4336-aff2-01d50cb59ca5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9ef80b67-8168-4a96-9d0a-702beb595ae0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f39bca6f-6227-4751-99dc-0113298dcdc2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ccc3dc2b-1b18-4fe8-8f6f-89a8b8d1e49a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dbf901af-b9d4-4ccb-8f88-74ed203eb927-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ad078bc2-cd3c-4e58-8474-3ad73b4457c3-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c1d86e13-c46b-4272-b05f-422cd8ef4fa4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "16061205-c07d-4662-9d83-ae763f1a9e2e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "693e5c4f-a401-4037-98dc-f20271295a4a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c509fadd-077a-4a43-8146-bbd82727d6d3-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "92e99889-3fcd-43c4-bc9d-031399915c40-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748456257791, "stop": 1748456270793, "uuid": "ace1b1de-ccf0-41fa-8bf3-773f055d206a", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "43328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}