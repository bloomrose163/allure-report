{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E9AE8DEBF0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AD5C8130>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "a9bcfc11-05a1-40df-b354-88844e33567b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f4681088-b199-4208-b520-d0884252e6de-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fcb01346-1957-4580-bc3b-2636d098b4d9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "75cfccfe-e08c-4ce2-8fb2-7f6615a340b2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8d9c3b38-4b30-47e9-92b3-f38fe7d95361-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "79bbce6a-9305-4afb-b7bd-e874c1c72405-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "29be1981-68f1-4402-8fa9-a6d74202460d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ec86c8ea-ea51-4937-8ae4-df31d2386844-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "57d79029-973f-4ee9-a6f5-1636b6df4a30-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6140ebc7-2e70-4b00-aac9-66369b17ef67-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "05705364-15d9-4d7d-a0d2-bfa993e79903-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8f8ad595-aae3-4b46-b75c-5fb780da4533-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e75ecd3c-86de-4de3-84db-e2feba23984e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3eb9efe2-b459-4f4e-b64c-b12458e3bb70-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "065ce076-1ec2-4a15-83f9-f6b116708c74-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b82fceaf-54f6-48a1-96ef-38ed7eaee3ef-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "db536b2f-3fd8-4e12-87ea-23fba7319da4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "38aa56a8-56e0-4ff9-a215-af090825cb66-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749100716913, "stop": 1749100723908, "uuid": "c720cb13-13ea-44a0-b1b9-77ce856288e2", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "9660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}