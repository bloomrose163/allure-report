{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002B814B58550>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002B816083640>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "2ea5145d-236b-4619-85a0-e6045dac3c47-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e7458bf8-3b65-4b9f-97ff-0d36ba867b07-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b421be73-7739-46c2-95fa-2661d1721215-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b3fdc1e0-ab5f-4cd6-920a-5360a391f89e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fe52355e-a480-4918-bfc1-1c35d794222c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b40aaf9e-77f2-4b6c-9d7c-8c77b7695779-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e74966f8-61f1-4746-9b82-5c59fd1dada6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c285d854-b202-4170-b777-7552515613cd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "daa683b8-d76d-4580-a438-d9210266a3b6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "53450f24-3acf-4862-aff5-7afd2ad3317c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ec6735e8-2755-4970-92b8-c2bc3b2e9cd1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7db3bf80-e383-4f9a-b60f-078f32b2d5d4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e915401f-5cc6-4ab8-af1a-164e5e27f7f4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5e362940-3cd9-4f2f-968c-13d4b9d38b17-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8ba81189-fc79-484d-bab5-51a64d3cd390-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2a2ad74d-70c3-45e4-95ed-124f567c3c21-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f44b40de-318f-4445-a07f-5158766fb525-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2b26d500-be3f-444c-acb1-f2f2c6c68b55-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749406605185, "stop": 1749406623170, "uuid": "590dd3f6-f16b-4444-9a39-eca0ac10996a", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "36588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}