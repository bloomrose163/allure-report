{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 408 == 200\n +  where 408 = <Response [408]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001BC6CECA560>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6E8D69B0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 408 == 200\nE        +  where 408 = <Response [408]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "eedfde05-c183-4dbd-8d71-18e7c895a051-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "44835ec1-899d-4cea-b8b2-fdb330c73e0b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2b015ed8-0305-471b-95a6-9314a382f3ee-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dbd9feee-04cd-45d7-bd7b-2749d195a342-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2ad75a5e-6059-4ebb-8476-67340a044e37-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "60944a2e-de37-4e90-8d04-cff3efe9893c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "83a521d6-ff1a-4f7c-89ea-48a148ee3508-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f08b4f10-7892-44f8-9457-c4dd83dc063f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8e377ec7-3481-497d-b0b6-2560c50c3b51-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6a59e657-f677-432a-ba8c-f10bef43bf5e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "eb82e0d9-4e73-4b00-a694-66d329f712ca-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "cf6033a3-6063-4acf-ab63-19b2986deeb6-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'dev'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749140439748, "stop": 1749140473117, "uuid": "43311ff0-3926-48bf-9ae4-854edb2c3b74", "historyId": "ab0fccb012d66c47151964a0e2fb9c6d", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}