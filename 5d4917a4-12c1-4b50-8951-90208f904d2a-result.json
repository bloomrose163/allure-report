{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001FEFF6AF580>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001FE80FD9450>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "4abb0d1e-a80b-4003-a875-940f5e37f77d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c16dd68c-5515-4950-8461-3a38a214f5d8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2165a3b4-c299-4b99-bd3e-0d66fcaf827b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6d85c37e-beb8-4e08-9da3-5e661c51419f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f1a6578f-e7a4-453d-abb2-c2cf3a44e59e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "43b3a230-bdd9-4770-8d6e-ad2ca6d392bb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "adc9c54c-a2f7-44cc-a9ef-ac6297cf8ae9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0accd4b4-bef4-4c93-8e0f-46295e74aac1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a6c54a76-1e16-49d9-9fe7-4d8ae8eb6112-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1aa6dcb1-d9e4-4358-b754-15c7316b011f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c65571b6-7f37-4a86-9b12-4c77c6ad4c60-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d2b983bc-f102-419e-ac0a-5f6ba2595b86-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749451771607, "stop": 1749451785490, "uuid": "d0062355-fef3-46da-a9cc-5475ee9a1380", "historyId": "e11d44e563c1949d6ba7935d3333fba8", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "12180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}