{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000014D3AF33B20>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000014D3AD69CC0>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "43f9fa9a-7f2b-4b85-a249-02e436e04242-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4e773e93-b8af-473c-8cd4-fb071b67dc51-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "08281dc9-d25b-438e-88c7-5c94ce014cd4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d238c0fc-4acc-473f-a4ef-15c98f08713d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5ef93a72-e4bc-4c60-98f7-dd77bd159520-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "84a1dbb4-edc5-4ec5-970e-4654ad00233c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2ee1dc31-a223-4eb9-878a-cbcdb9d2d253-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d0bf0516-9b04-4d0e-91da-a863de9b072d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d3e2e25a-790a-4947-a574-35f04537f65b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "19d9fde2-4b55-4df0-b246-844881dfaafe-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "af07ed44-695d-4ebc-a88b-65ca5d5ff550-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c79088e1-d2b2-4bc3-98a8-22dfd5deebf4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3339ef02-61ff-433c-b3f5-458ce740a9d9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "23d3d6ed-bb67-40eb-8fcf-f15706413773-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e0ed2772-d74c-40b4-940e-958cfa67afbe-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "faaa6cef-1714-4e51-98fc-2f707e40544d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1ba36b6d-d72c-4b71-beb1-cfeaaee23186-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "15c3e3c0-7fcb-4cf1-9b7e-5645ab8e7fc4-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748496784953, "stop": 1748496797974, "uuid": "970bafd0-e159-4aa0-a1ac-730e1a6628f2", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "12704-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}