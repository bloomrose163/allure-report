{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E9AE8DF280>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9B0EF3850>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "d82df2cf-6285-4d72-bcd1-21e204548d95-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d2882472-00f0-4b88-8d7b-08fe16c3b2db-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "15aff572-bfa6-422e-8fb8-c8788b15f8de-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4e710631-a872-4d8e-bc0e-2a539f45b964-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "29a9c08f-5ae1-45f2-9fef-b6a01e1fcd5b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e7caafbd-00e6-4d73-82a9-323f41a187a5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "afe474c9-e44a-417f-809a-b63b2fe1b879-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ef1701d6-5124-4bda-9d2f-87d2fc2d8a18-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "28ff5241-90a9-4d6e-b894-eab0e25443f6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f69a3b9b-8892-4aeb-9aa3-8057e9912c6c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "95377a1b-c1ee-45cc-b83e-6854b72c1755-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8c3f371e-9415-4cae-9e24-041be0d025e1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bbb6b110-3761-435c-852e-40958c2ef6a8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3f48da0a-790c-4b2d-a59a-882106e2aa2d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "dba69b65-aaed-467d-9b96-869dfb56d947-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "cccaf8cb-87e7-4938-86eb-ddbb77ff1c7f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "611317be-0053-4726-bee1-48f820bc1833-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b06209ae-c3fe-4b46-990d-27f0526e64ae-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749100731766, "stop": 1749100738991, "uuid": "3062fccd-971b-4432-adb3-bbc43a801d4e", "historyId": "6fd80bcf6ed1fc0324f489703b83de54", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "9660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}