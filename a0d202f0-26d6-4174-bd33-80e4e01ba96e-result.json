{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000227BDD77A90>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227BDC3B160>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "8d9c5576-b78b-4635-b695-9a20ab186c1f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7b89e6ba-59aa-47c4-a0e6-25fbf9f6d5e1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5faeee88-ffe5-458a-88ec-2735e5e1d037-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a930a14f-27ae-4af2-aacf-74b065c45102-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "74b317db-588a-4c32-92a6-02501b1f32c6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7fb68d52-bfea-47e1-96f1-5c4153ae220b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "462bc287-017a-48be-9999-e3597469b1d6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a72ea0d5-e9b4-4bf7-be4f-adb6636c321f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "afb29633-83fd-4e3a-8656-baff666f3a40-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d0ee4057-e7ad-4960-80e2-ba4aea56ecc0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "53afef1a-4d91-4b4f-990f-95c2d3c7cbe6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1fd86fab-6179-47fc-bcea-7f333cb044a4-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1748369969491, "stop": 1748369978326, "uuid": "f137b77f-8635-4d52-8689-1b15437f19ed", "historyId": "e11d44e563c1949d6ba7935d3333fba8", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "32716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}