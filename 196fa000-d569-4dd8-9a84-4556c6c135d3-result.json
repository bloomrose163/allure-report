{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000227BDD77040>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227BF4C22F0>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "4b15b62d-4560-4df7-909b-b319352a63ac-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b999870c-1ea3-46b2-9b31-ce77082335a3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ec9de38b-737a-419f-a2cf-7223f99792de-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "99816727-08d9-4c19-af31-65d3449f0133-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "74e04dc9-132e-4249-8694-0f52aa51f025-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7cf44b96-a4e4-4d8e-8d9d-a83308f942f1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "6ff0e7f5-011d-43ec-a8a2-81490b668d6c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9e82bef8-0d26-4d9e-8c40-2e6f515fd1c4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ce9547e8-4c8d-4fbc-a599-cbf8dc4bb953-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3c23d62e-cf3b-45d1-8930-007749a075dd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8cc50078-e240-46ac-be35-5d33dcb2bbfb-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "07fdadf0-e1e1-4076-961b-837cb005c018-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0a5f2ccd-9291-4a1e-8c70-9c1ad6a7b642-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f3ca767e-3213-49d7-b70a-1b9f4d301152-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d865ae7e-2922-4a76-8fa2-0761e17f4b3e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ae7beedc-cd3b-4fda-9a69-ac17e7b74793-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c324bfd1-7d07-4108-8631-34dbd8ba9755-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7a6f9e18-5b44-496c-a486-7e0640fe86e0-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748369903822, "stop": 1748369914729, "uuid": "7fd90205-e5e6-4dc6-9562-e86ee25fc8db", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "32716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}