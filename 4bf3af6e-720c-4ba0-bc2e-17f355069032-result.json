{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D2C1983FA0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D2C2E497B0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "355aee73-8088-4380-9803-a2a1914d1d78-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ca40dee3-c6d0-479d-90bc-ad3258f3b5b3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "07fe1157-279e-4e2e-936a-7bdea3e1f8c2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bfafd693-9d1c-48c0-86e3-2c2b4f167b25-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "032126fb-3f46-49e4-a15a-d4cc4127fdb8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4e2a80d4-1f00-4e55-8867-acad7f651d67-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1978ae24-e5e2-4bab-bddc-bf09935db0e6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9b68a4fe-2ea0-4916-ba8c-421809242abd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "985a57da-86d3-459b-b9e5-a53d0758fb66-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "803ffcf4-2190-405b-8895-7f20f996b3c8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "426d57bf-181a-488c-9520-56ff07d8bde6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4cf83753-5ac3-4f38-8379-dec9056c0c02-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "586cff17-eaf5-4cce-b69c-84d5a2136826-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "528a3f10-1ca5-49c3-98aa-9ce6e03b7e9b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "06df0be4-686a-4bf9-93d3-d17586d11cd6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "288b545c-d62a-4b17-bbe6-3de48eab4906-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "aa78e445-d7d4-4a38-ac59-74e6e53bf810-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9e66d920-ede2-4489-af12-c1b2d9db5108-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749493391879, "stop": 1749493410196, "uuid": "beedf865-1d7d-4541-a194-b60a301a55f7", "historyId": "fc02644e1952cc4fe745a497de8be42e", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "27544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}