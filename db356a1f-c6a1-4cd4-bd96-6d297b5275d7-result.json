{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D1AA252F80>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D1AB480580>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "f0fdfd8f-2196-47c2-8ca9-7ab9756e6be8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "783f977e-125b-41bf-adf7-fece38b1bebb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c21de7b8-f404-41b4-9e0b-a881bfa1e07b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c69b729e-c39b-457d-83fd-7b7740c966ae-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2bcfdbf9-3907-4ec2-a817-6af2591e003b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bab21109-dfbe-4463-980b-8bccc7e47d33-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9db2f3a3-677c-48e3-bce0-ff757bbfc185-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b2c2dbdc-b2c0-4873-836b-812d41c4e488-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "55a16c2a-86a5-4304-bbcf-59773cadff03-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "537c4493-fb63-4601-8ad7-5435d79b6837-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "daab0978-2b26-4e5b-b9bd-c435951388b5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fd53e78f-275a-42fb-b189-130a9ff46374-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "789d979d-ef88-4c05-a7a4-20cbbfd1b475-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5120ece9-261c-4040-b3c1-2509ff0c1487-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "15ded7e3-e550-42f9-b942-2aa72c032ef5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "204891f7-c0a2-4a79-83bc-8995e95c9ec0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c518be55-a8ea-4cec-9a1b-ac4ae421c4c4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ee9362d1-fc40-44b2-bcd7-6b9746f88ffb-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748425982187, "stop": 1748425995697, "uuid": "8451795b-eb2c-4b69-86a2-fe07202c4ce8", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}