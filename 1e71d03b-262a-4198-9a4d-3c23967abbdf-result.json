{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000200752BA8F0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020074F2DD80>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "49d2d9bc-fc85-40cb-8232-8c2b900a5d32-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c64e324a-35f2-4a7f-971f-edef560dacdd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1b570606-e7f0-430e-baed-bbd8a258b6ff-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1502a364-3466-4512-ad50-152c28cccf9d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "375abe6e-0ab6-4442-abca-38f931cc24f4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2a78f070-3dba-4002-9c4a-f03bfb6a2897-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "354b13d0-4aa8-405f-a6fc-b9fc9f2159ad-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c3675142-186e-4381-b50b-de8e7702034e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "6b3a3bb4-e4bb-4784-ba3a-aff4144b3575-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "89340256-7b66-4c60-bbe3-17136c76fc0d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a928b09e-16db-4bbb-9d77-a32df08d6031-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a6fe6bc3-4fd0-44db-a051-b6dee293b468-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e390e6aa-7da9-4ffd-9d11-aceab2570e78-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "86efd462-65b0-4d88-9088-0244a72d9f34-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fa16859d-0277-4872-84c6-f9125f090198-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1153c0c3-8af2-4d27-8a1a-4de3853abbd5-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fb9de035-767f-4aca-8246-88f62d2cf3f8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3b7025bd-5bef-4bef-b259-2629d80170fa-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749031529441, "stop": 1749031535877, "uuid": "b09fe76a-5727-4531-9202-d40956d420b4", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "40176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}