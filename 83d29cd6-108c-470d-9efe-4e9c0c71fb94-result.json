{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C2C241BD30>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C2C51E3B50>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "ac745a8f-838e-4fa4-9f49-ca15538dd6a0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "60f3ef38-5619-4889-ab19-fd69f7c4296e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8925765e-8118-44c0-b7e9-852dbb9412d8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "93d0a385-7723-440c-881b-a7ebce49b45d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1ebf1087-1672-4ab2-a362-f6c3a2be932d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1574c1aa-01c0-4ba1-b0c4-71b6fd9447f8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0c7e9d2b-1c98-43a0-9919-e72f0c03d2c1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "488b05de-4d74-41f5-a309-0e02db80432e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ef299474-2511-47fd-9bbc-45409ddcea44-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "af2fe57a-a088-4ecc-83bb-10b7f35d4623-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "49e8d58d-52b1-4239-b0cc-e7f1ae1be6f4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "983bff7f-acaa-4275-91ee-99f969b01632-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b1c46d6e-4fdd-499c-869b-acb6e1564e59-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f3c9ce4d-0ca0-4a66-a721-698b49e2e6f2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bc9c9b82-4c5f-492f-b23b-e6fc7069de77-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d95b5650-1154-47ec-b8d1-df2b7b805157-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "af7c12cd-aabc-4510-a7c1-5f43c8ddc16f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "01fea16b-8f31-48b4-8941-defaa4754c97-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749806503375, "stop": 1749806533374, "uuid": "7a7a6057-cb17-46df-bf6b-e87e047dd196", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "5088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}