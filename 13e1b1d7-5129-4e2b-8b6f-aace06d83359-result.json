{"name": "Test - CRUD - create service orchestration profile with Data Service and query with name", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x000002B814B5BDC0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000002B816111450>\nbody_key = 'service_orchestration_profile_data_GigaCenter'\n\n    @allure.feature('UPDATE')\n    @allure.issue('GCPT-14802')\n    @allure.issue('GCPT-14848')\n    @allure.title('Test - CRUD - create service orchestration profile with Data Service and query with name')\n    @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\"])\n    def test_create_query_with_params(self,base_api,body_key):\n        json_data = load_body(body_key)\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n        response = base_api.get_by_id_no_org(endpoint,model_id)\n        assert response.status_code == 200\n    \n        response = base_api.update(endpoint,model_id,load_body(\"service_orchestration_profile_data_update\"),need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:138: AssertionError"}, "attachments": [{"name": "Request Info", "source": "403dbd9b-b99f-4075-a8fd-86ffd28d2d8e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "56f5ccac-402a-4f65-b83a-a110f19946d2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "39f35a43-9ff2-4f5e-88f8-6f05d2426919-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d77558ea-d942-4d63-a763-784349befd74-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "12f33b07-a58f-4de6-b260-54597728b153-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "61713027-7f73-4065-90f6-6c92b8b522af-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "body_key", "value": "'service_orchestration_profile_data_GigaCenter'"}], "start": 1749406744162, "stop": 1749406749360, "uuid": "dea6854a-6904-4c0e-9f8a-119d5a475c15", "historyId": "80e8aeab1c6fdf767a6ae6322f1ebb28", "testCaseId": "51c31b42ecc62f3b029b35cbcb5c22e7", "fullName": "testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_query_with_params", "labels": [{"name": "feature", "value": "UPDATE"}, {"name": "epic", "value": "ACS Service Orchestration Profile API"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_service_orchestration_profile"}, {"name": "subSuite", "value": "TestServiceOrchestrationProfile"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "36588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_service_orchestration_profile"}], "links": [{"type": "issue", "url": "GCPT-14848", "name": "GCPT-14848"}, {"type": "issue", "url": "GCPT-14802", "name": "GCPT-14802"}, {"type": "tms", "url": "CTM-315046", "name": "CTM-315046"}]}