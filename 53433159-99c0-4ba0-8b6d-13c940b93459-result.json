{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 408 == 200\n +  where 408 = <Response [408]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001B320C93F10>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001B32226F070>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 408 == 200\nE        +  where 408 = <Response [408]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "a0f18a75-2867-4ba8-843e-db86dbd898ab-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f3934c8a-1b89-43db-804d-dea2ab44e298-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f9094684-74fd-4e65-a8de-60861c4ba80b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "08f34473-1ea0-4df9-b1e0-c99abcc40647-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2c29f380-3555-4cf4-a94b-50dfff7a9360-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6d6a1c1b-81dd-4819-a5cf-eb58ea8976fe-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ee01b7e2-9d1e-42fa-b2a3-c2d77dab02f0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f6fe273f-4817-4d29-9fc1-6bb285675c54-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "45055f46-d2d2-47fa-8fb4-2c97adddbafe-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "58488859-d16f-4ddc-b4b5-28be48990087-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "6527cf26-a0ca-44a0-8126-ada2abf73e02-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ede563ea-3ca3-475c-8516-c1eb8e89febe-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'dev'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748629054356, "stop": 1748629085967, "uuid": "9391f847-93e6-4b09-8d76-d076afde7a47", "historyId": "ab0fccb012d66c47151964a0e2fb9c6d", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50656-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}