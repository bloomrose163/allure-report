{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C3BF7BF1C0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3BFB42530>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "9954f0b2-c17f-45d1-b861-f67e837ebf9e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1cf5230e-991a-4b30-a4f3-3fc2011fac44-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "05d49ff1-c5eb-4cb2-9199-3d901a79d092-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6cfbe7fe-0228-4d99-b4f2-94b496bdc017-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "30867f27-6120-4b14-8a66-980d34c95374-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fb7efaad-687d-4314-9b0c-42b1a13b776c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bb849cec-fc99-4d2c-a521-0a701e57f8e8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b4c0ae5d-51e2-4efd-971c-f4c74c66eede-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "7b9de0cc-35b3-4a4f-9942-9cfa9610da7d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f9e8be47-d870-4bf7-87d9-f3fe0006005b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a84fe97b-7e39-4cfd-9504-42cbfc00b0da-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "db672e05-f1e8-46c4-9eb7-e24f8d080bd4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "73b9e838-3130-4ba5-b43a-3dbdb94d8698-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9d0941c6-4c61-4d4a-b11c-bf04f90124c4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "957d0589-5bff-41de-9a71-33de58611c3d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "77449bd9-f952-444f-b0c3-71601dd4296b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e5545521-a68a-4a1d-a439-1bda6abf3f5f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "54f9eaf1-33e4-457b-95ff-43224489dde3-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749201131300, "stop": 1749201144124, "uuid": "d39d8dc9-fad5-42a3-8c64-f556e567cd06", "historyId": "fc02644e1952cc4fe745a497de8be42e", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}