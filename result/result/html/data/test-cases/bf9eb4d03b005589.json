{"uid":"bf9eb4d03b005589","name":"Test - create provisioning record and get id","fullName":"testcase.ACS.test_system_group.TestSystemGroup#test_crud","historyId":"87e8c836f76e82165f49036f51bc24d1","time":{"start":1747908271569,"stop":1747908274128,"duration":2559},"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001F86124B340>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x000001F861594640>, file_path = './testdata/ACS/system_group_dynamic.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    # @pytest.mark.parametrize('file_path',file_paths.values())\n    @pytest.mark.parametrize('file_path',[file_paths[\"dynamic\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create(endpoint,file_path,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record , not support this PUT in ACS-NG\n        # json_data = load_json(file_paths[\"update\"])\n        # response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"name\")\n        # assert response_put.status_code == 200\n        # # aws return 200 and null body when put configuration profile\n        # if base_api.env != \"aws\":\n        #   assert response_put.json()['_id'] == model_id\n        #   print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n         # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 404\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n>       assert response_get.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_system_group.py:140: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747908265468,"stop":1747908265594,"duration":126},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"get_and_refresh_access_token","time":{"start":1747908265594,"stop":1747908267249,"duration":1655},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_api","time":{"start":1747908271567,"stop":1747908271568,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"self = <testcase.ACS.test_system_group.TestSystemGroup object at 0x000001F86124B340>, base_api = <utils.base_api_acs.BaseAPIACS object at 0x000001F861594640>, file_path = './testdata/ACS/system_group_dynamic.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    # @pytest.mark.parametrize('file_path',file_paths.values())\n    @pytest.mark.parametrize('file_path',[file_paths[\"dynamic\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create(endpoint,file_path,need_random=True, field=\"name\")\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record , not support this PUT in ACS-NG\n        # json_data = load_json(file_paths[\"update\"])\n        # response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"name\")\n        # assert response_put.status_code == 200\n        # # aws return 200 and null body when put configuration profile\n        # if base_api.env != \"aws\":\n        #   assert response_put.json()['_id'] == model_id\n        #   print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n         # delete the record\n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 200\n        assert response_delete.json()['numberOfRecords'] == 1\n    \n        response_delete= base_api.delete(endpoint,params,model_id)\n        assert response_delete.status_code == 404\n    \n        # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n>       assert response_get.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_system_group.py:140: AssertionError","steps":[],"attachments":[{"uid":"affe27c36686e88d","name":"Request Info","source":"affe27c36686e88d.json","type":"application/json","size":243},{"uid":"cf579f4c8b82a00f","name":"Response Info","source":"cf579f4c8b82a00f.json","type":"application/json","size":91},{"uid":"57eeb3c8bd977701","name":"Request Info","source":"57eeb3c8bd977701.json","type":"application/json","size":152},{"uid":"ecd02eadc6afce56","name":"Response Info","source":"ecd02eadc6afce56.json","type":"application/json","size":313},{"uid":"feab35e832af8974","name":"Request Info","source":"feab35e832af8974.json","type":"application/json","size":155},{"uid":"d1be65f43bc3ba67","name":"Response Info","source":"d1be65f43bc3ba67.json","type":"application/json","size":66},{"uid":"9b7dfd9807cfdadc","name":"Request Info","source":"9b7dfd9807cfdadc.json","type":"application/json","size":155},{"uid":"d9e6a13b6ea8ff19","name":"Response Info","source":"d9e6a13b6ea8ff19.json","type":"application/json","size":100},{"uid":"b818b0fa0eaedb1c","name":"Request Info","source":"b818b0fa0eaedb1c.json","type":"application/json","size":152},{"uid":"59c1c33fca9eb334","name":"Response Info","source":"59c1c33fca9eb334.json","type":"application/json","size":100}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":10},"afterStages":[],"labels":[{"name":"epic","value":"Test - SystemGroup API"},{"name":"parentSuite","value":"testcase.ACS"},{"name":"suite","value":"test_system_group"},{"name":"subSuite","value":"TestSystemGroup"},{"name":"host","value":"Cherry-640879"},{"name":"thread","value":"41860-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.ACS.test_system_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"base_api","value":"'aws'"},{"name":"file_path","value":"'./testdata/ACS/system_group_dynamic.json'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"bf9eb4d03b005589.json","parameterValues":["'aws'","'./testdata/ACS/system_group_dynamic.json'"]}