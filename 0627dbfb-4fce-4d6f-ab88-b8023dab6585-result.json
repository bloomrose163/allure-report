{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000227BDD776D0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000227C0BE00A0>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "08f9e250-dd1a-4106-9de1-eefbbc2a7dee-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e09d3422-0992-42bd-ac10-020f62b1c2bf-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "dbd7f844-8ad8-41ec-9bc5-151229bf2405-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a0d322d1-b95a-4b1d-b0fb-2e5b737e435a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5fd3401e-6b4b-4b95-bc83-b66034f96331-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "772b1793-e324-4e5b-bf07-0cffd4d0fe96-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "46ed79b0-5612-4fe5-a595-4063e9f2447b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "17ac1409-75a4-48f4-b214-f9f86094e599-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "15eea007-47fe-4161-abf0-eb50aa9c38c2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bb7e0bce-9f71-46f0-9ebe-ee2c880e5ac7-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4ebed3ef-0d3c-484f-be9d-d6a3f4276ea4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5c1deaf8-0efd-494c-807a-9a28ac416db8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3ab10f66-cf8c-454a-b92c-37c6ba3920d1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "99c33408-0214-48e4-aa77-a3f7c966e9ed-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ca260a3b-2773-416d-ad11-b4a61c61890a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0d92b6e7-1c59-4c60-8016-82a083c04ed3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b086fba6-5594-4111-b511-1b11376d4ecc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "320ef457-75c5-44a8-ab42-22e4f0a63bea-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1748369926842, "stop": 1748369937640, "uuid": "43837d50-96af-4694-a0ad-d14d4b16179e", "historyId": "6fd80bcf6ed1fc0324f489703b83de54", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "32716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}