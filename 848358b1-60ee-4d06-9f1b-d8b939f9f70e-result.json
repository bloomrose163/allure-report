{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001C3BF7BE620>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001C3C0E47010>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "707d3202-3525-4121-a9e0-5879e1fca946-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d15d3686-f898-4dcf-8804-425c06a048b8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3a6eeb9d-a2ab-4e97-9115-eda780ef7bda-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2730414f-ad7d-4646-ad25-18c6831503e2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "54982fe4-b659-45af-a3ef-63fe84fd1f1f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e89e0fd4-e31a-4f81-8944-96a35e143513-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a05a9850-6477-4c2f-81c0-c6c9f6b7939b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1f011c5a-5999-484b-8497-60bddfc9f1f2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c0e052f3-ecc1-4e04-b168-538b22d186b2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d53c2e73-73b6-4a81-9460-3931dc9909fa-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "05f2e80d-ec94-43d7-9250-6e0ad28ddce2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2992edba-2955-4dbd-821d-cc9a447af489-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bdca0abd-2feb-44f6-bab2-65b24100c283-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9dbae1a0-d3f5-439e-ad37-81df2ca80fc0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3c8a55bd-b354-46dc-9da3-154c20ba1622-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f448f656-4bb3-431e-9397-e9f0be938061-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f67be5d8-4c2e-4240-8e7b-a33541d8a6d5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "74bfa55c-cef6-4c9e-934c-1b058b6a70b6-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749201118516, "stop": 1749201131265, "uuid": "981fe961-abd9-4989-a870-226dab24e004", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}