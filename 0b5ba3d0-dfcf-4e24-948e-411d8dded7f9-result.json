{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001BC6CECAE00>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6E8168F0>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "534e37a1-5d6c-4954-83e1-cbd986749ae8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9ec39544-3189-407a-bd54-2e690cc82389-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "83491d3b-e2c3-4b75-89aa-9ba6d2d0c298-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6fa2dc1f-c217-4506-8f89-9777d2f5d7d3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "19c22e60-8d84-4331-a25e-20487e678db6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "880fe08d-08ff-493a-bd9a-c5e5f65d85b3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8bceb4b2-ace0-439d-9990-f405ff6653d9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4e027162-4b42-4b03-9ed1-b4a3d94189a1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1e3fdeb1-e407-4c83-9d75-f9939548916d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "cc68b14d-3442-491e-9a21-717570a66885-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f16aeb1e-23d9-41da-8597-442534ba34fb-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "75b6e2ed-a444-4ed2-8e27-074a9bdd8ff4-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749140512075, "stop": 1749140519163, "uuid": "d6c60d60-1eb9-48e1-a01d-32d22bd48e97", "historyId": "e11d44e563c1949d6ba7935d3333fba8", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}