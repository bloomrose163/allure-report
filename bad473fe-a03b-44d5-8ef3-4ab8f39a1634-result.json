{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x00000200752BAA40>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000200752F68F0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "095f96ee-0007-418b-9e74-37b30d3caf5a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "7463a20a-8840-4a2e-b7a2-54efbf497e88-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0be80465-8336-4fad-984c-5960102f8fcd-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "00be9249-c771-447f-850d-385e0da9eb9b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a074fcca-707c-4435-867a-cf2a38185b88-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "84f7a7ba-c816-467b-9fbd-2e4b3faf05f3-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2e27d229-5977-4c89-8c9f-504439ad6fc0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "683a5f7f-d916-4d02-9aa2-927b6ba98a78-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e3a31d29-d672-4e3b-b5ad-32f4272aff02-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ae681995-eda4-4fa9-a466-fc77619fdb6a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "43aeabc6-2481-4b7c-b4a7-3198d32711a8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "854ab27d-f22e-46f7-a245-d3bc74606bf9-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b785c6d4-7cbb-4ff5-be1d-4669d73aca52-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "42803e35-12c7-4cf9-a08f-5b2a24dfb2e0-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b574222d-c8bc-4e4f-aa45-674ca4915fea-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a16f9f4a-3801-417a-a608-c6b371058332-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9c162537-4620-4dae-8f55-443cac008bff-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3eea555a-ff9d-4792-97de-65a917642abf-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749031535897, "stop": 1749031542559, "uuid": "26caf905-2dbe-408e-b918-8fe4679447cc", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "40176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}