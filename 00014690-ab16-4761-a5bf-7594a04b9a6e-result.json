{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E9AE8DEDA0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AE47E350>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "8ba03be5-7cf1-4cb1-b287-c0b2fba60680-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6001125a-9ca8-4898-9309-a7062a2cc29e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5a74e517-dd45-4dd9-a494-a85c4bab3016-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5a6d95c2-c8a7-442f-a6a6-257b00d9f898-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a12a084f-d689-4504-834e-4907820c2732-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4e7d2c35-83dd-458a-b9e8-f23de2d9c04d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cc82edd0-50a7-423d-960f-464c43a1a8f2-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "199dbb0a-92f8-40dc-906a-fa7aac432791-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9b26c486-fe48-41ab-88a9-03cbd2a14498-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d8912dd0-c763-4c1e-a5b4-9ea340ff6d9c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "617642a1-7497-4cd1-bf9b-c38c1d025a54-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "647d7545-1036-4a18-9883-c7dff6e421b2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ee264965-a99d-41ba-9ed3-ba3b9579a7cd-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "78829f08-fa31-4327-a365-d8f8a19d8833-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "346aea51-e079-4bc4-8c91-3680aa76f7b9-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f89c945f-fe94-4133-9baf-0b23541831d2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5537e57b-8933-4802-bf6f-b091c45ef326-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a5ab9d32-238d-4db7-8a50-e847c64ac433-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749100723924, "stop": 1749100730904, "uuid": "ffb99db5-17f0-47bf-94b3-fe29fbce765c", "historyId": "fc02644e1952cc4fe745a497de8be42e", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "9660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}