{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D2C19D4D60>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D2C33CE800>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "b8727abe-dd8e-487b-ad36-ffb5b4c4c472-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3d3430ab-2c08-4a6e-abf9-2d988497b140-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0a60f0ca-6ceb-4b5c-a7e9-dbf89a5ae347-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9edcf01e-ad5e-4983-8dd1-2ed0c3262e44-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8424b111-2315-42dc-862e-90a7732d9f3d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d72b5aec-b3d7-4487-a395-1770afe89d1c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "75472709-bc1c-40e2-8c24-ee325f9703a3-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "29c3c626-0020-48d6-b91c-5e4d32bdc4ec-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "daaee6d9-1681-4691-96df-97c0c8aab783-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "cf4ac974-cf68-45b3-99db-7c3c7bcbd569-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "05653438-4b40-48b3-9066-932f90ac5b3f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f8324b82-d0cc-48bf-b001-f33788bcb457-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8bdda3cf-41b2-4d90-ae2d-a485c9609100-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "627472aa-7c9c-4e9d-a02a-71b42db75321-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c3c43eca-f4ee-4134-b714-7edb1a6da0dd-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "68d404d3-f9c5-4573-8d0e-c4d8837346db-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ebc6f078-f9b0-4d4d-9162-72dbeff46e31-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2fd37a45-5ddd-4314-b497-9482ebab3c0a-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1749493412321, "stop": 1749493431783, "uuid": "7d2856a5-741b-44da-9373-6ce6e7536e21", "historyId": "6fd80bcf6ed1fc0324f489703b83de54", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "27544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}