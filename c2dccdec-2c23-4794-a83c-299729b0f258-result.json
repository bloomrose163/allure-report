{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002387CF639D0>\nbase_api = <utils.base_api.BaseAPI object at 0x00000238026A5360>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "f2784c71-936b-4c15-b880-59baa6ad1a81-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "33b8de6f-6dc8-4a87-8507-b81b25814b99-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "88b25cdf-8cbf-4569-b08c-650d6189a17c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0b22ac7d-d2a1-4f1b-9889-1c21ce86e0d6-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "aabcd812-8dd7-44e4-83c3-a0115d25aca8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "514b2c9b-5fb5-40ab-be51-f710077466db-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9528297f-8c6b-45f6-b812-01766aff7a15-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f5e9fec5-24e1-4c28-823f-49e2f28dcf1d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "13d22a2e-6257-4290-bef5-154aa9e7c8f8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2d2faccd-51a4-4c62-95df-cd945781d6f4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2697de45-d497-448f-b855-924a517eef31-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8a1fb498-52c7-40ba-babe-7132c85644ee-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fdafab38-3e1a-4025-86c5-d66634ed0527-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e4908ca6-8ea3-4dbf-a33e-4eed3bb55a20-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "3b19b4ed-60c2-4403-a578-587cd9131bdf-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4e627b53-0163-4470-a024-168f81d7dde4-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "95c014ab-9b18-4d3d-bf4b-39d3662d3f6e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "81030346-d93d-4879-babc-0ad7d5d26512-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1749801744858, "stop": 1749801767959, "uuid": "f06471e8-c1c2-4eaa-9708-3957e201ea99", "historyId": "30848868ef8e3aa00ebfe171c6200631", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "41128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}