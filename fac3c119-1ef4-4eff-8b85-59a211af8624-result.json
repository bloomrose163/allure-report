{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F1D80>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB7A72E0>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "1b35f2f6-e8a9-40b2-a1ba-6e03c8405203-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "444b144c-1303-44be-98c6-8d3e05fa7ebc-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ee454bb1-0f3b-4adc-b864-c1d18b317ce6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fbd51f1d-1d22-482c-873c-c1cce044a9f8-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2d1fd76c-5926-43c2-ba63-776fcb5bf580-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "af4916ba-40b3-4ba0-93e6-e122d5a5ab37-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cc0e228f-1824-4ea5-a50e-a37056c5301f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "04aae4a2-b79b-4105-8879-f0e38f3da7f9-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "adc9a1a7-a801-49b3-8083-0bf334603f65-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "75f742a1-2be7-41d4-ba06-f6a5a9ea0833-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2ff33fc4-1551-4748-aa44-dc35b8cb8613-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "00e49e85-a99c-4edc-8c61-d47882554843-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "da93e5a5-94b8-4598-a123-9bc0aa870f23-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "daf4c3e7-98c1-4269-80a0-ce1ea310ff6a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bbac92bf-bf4b-484d-b58c-50679fc25109-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0600d560-d019-460e-8fad-b9040507c824-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a7d80df0-da9c-4a14-87bb-866b080c8a9c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "94239cd7-8b4f-4e20-8375-3e7ea584385e-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1748341490926, "stop": 1748341503535, "uuid": "c6b989bf-6e6f-471b-9986-d11de56fd6e6", "historyId": "6fd80bcf6ed1fc0324f489703b83de54", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "42176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}