{"name": "Test - CRUD - create service orchestration profile with Data Service and query with name", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile object at 0x00000243E941E740>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x00000243EAC68820>\nbody_key = 'service_orchestration_profile_data_PPPoE'\n\n    @allure.feature('UPDATE')\n    @allure.issue('GCPT-14802')\n    @allure.issue('GCPT-14848')\n    @allure.title('Test - CRUD - create service orchestration profile with Data Service and query with name')\n    @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\",\"service_orchestration_profile_voice\",\"service_orchestration_profile_data_PPPoE\",\"service_orchestration_profile_data_GigaCenter\"])\n    # @pytest.mark.parametrize('body_key', [\"service_orchestration_profile_data\"])\n    def test_create_query_with_params(self,base_api,body_key):\n        json_data = load_body(body_key)\n        response= base_api.create(endpoint,json_data,need_random=True, field=\"name\")\n        assert response.status_code == 200\n        model_id = response.json()['_id']\n        print(\"the diff with create body as following: \\n\" , DeepDiff(json_data,response.json()))\n        response = base_api.get_by_id_no_org(endpoint,model_id)\n        assert response.status_code == 200\n    \n        response = base_api.update(endpoint,model_id,load_body(\"service_orchestration_profile_data_update\"),need_random=True, field=\"name\")\n>       assert response.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_service_orchestration_profile.py:138: AssertionError"}, "attachments": [{"name": "Request Info", "source": "5bd733d3-0b50-4079-a418-f8cca2d799c0-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "8a483580-6c26-429a-8b6d-2a1f5b7b1b6e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "646f7dad-eb21-4635-a454-acd451fdcbb4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "49759516-4f26-4f8e-a6a2-b9a9abc67e1a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "301ba94a-6311-422c-9aad-8159a2bbc661-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ab5d894b-33ce-4d29-9b94-1a5473519b4e-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "body_key", "value": "'service_orchestration_profile_data_PPPoE'"}], "start": 1749234076546, "stop": 1749234081752, "uuid": "057bc0ed-5482-4e44-85e2-641405cfcce2", "historyId": "bebbca7e1aeb51f5c95d72130d5429ba", "testCaseId": "51c31b42ecc62f3b029b35cbcb5c22e7", "fullName": "testcase.ACS.test_service_orchestration_profile.TestServiceOrchestrationProfile#test_create_query_with_params", "labels": [{"name": "feature", "value": "UPDATE"}, {"name": "epic", "value": "ACS Service Orchestration Profile API"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_service_orchestration_profile"}, {"name": "subSuite", "value": "TestServiceOrchestrationProfile"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "36908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_service_orchestration_profile"}], "links": [{"type": "issue", "url": "GCPT-14848", "name": "GCPT-14848"}, {"type": "issue", "url": "GCPT-14802", "name": "GCPT-14802"}, {"type": "tms", "url": "CTM-315046", "name": "CTM-315046"}]}