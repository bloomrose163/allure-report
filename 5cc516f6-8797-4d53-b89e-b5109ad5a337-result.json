{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000002387CF63880>\nbase_api = <utils.base_api.BaseAPI object at 0x000002387D271660>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "eeab13f7-c14d-4ce3-8387-ed7a3647a3bc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e7039f7b-94b9-4605-bad7-57bca6587dbb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "51a77eef-d470-49a3-8b64-4085fbb60531-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3a1eb278-9989-4d7f-93c6-561cc496c52f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ce99e070-cd09-4c32-9097-a8ff66fa4661-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5bd6910d-bb31-4547-9766-da50bdc084fd-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c4939d58-021d-439a-8d68-16828332bb02-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a88c8a36-c489-4c40-957d-c1eb292abe1e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "807751f3-4d08-4004-aa11-c3156ceec2ca-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "31f07810-d295-43ee-b142-a0bc5d2ae8f7-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "066f0ab6-4ab2-4f22-8494-1a8dd4738d5b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "0c8c9dad-9b44-4c5c-8747-af65bb9d4687-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0f72fa8b-06cc-4319-a428-24a2e3f318c8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "94c006fc-be9a-4789-b89f-d2c476611377-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "b6253253-60ae-4005-808c-fdabe2d0eed5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a7f95b92-71f3-4b98-9921-630bb47c65f2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a6a0d3ff-6d69-484a-8bd8-5452332b44ce-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "530553aa-a06a-42fa-8aa3-b868b5c69b34-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749801719437, "stop": 1749801744831, "uuid": "3075c943-f290-48de-9fc6-ab67e0e843a4", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "41128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}