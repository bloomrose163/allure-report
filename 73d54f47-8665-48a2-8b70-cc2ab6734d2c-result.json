{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E7BC903940>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E7BC685330>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "28581eab-ddd1-4128-bd4f-e825e0688f6f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d880930e-d759-4881-9aa2-ca814bb0148f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bbc8f7bb-5a2d-4e3d-aec7-0a992c0fdcad-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "61e9fb57-f858-401e-b86d-d10b5c406d99-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4f8043c6-9677-4e00-bcd4-389019fc9e38-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bfd2a24e-c739-495f-9f73-cad5f8a1bc08-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "af68aa81-2e02-4c0e-9064-19b785bdc2c8-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e69ae109-d989-4b22-9ec8-36ea783f7f42-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "54f79594-d8dc-4669-a6e9-5ff03c2043b5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "af1d5bdf-8564-4b07-8eec-64ceec2d2d69-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5018a420-2795-4c38-82da-74c1d1702cb1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "586cac92-78fd-41e8-a47e-ba980edbd271-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "c8548538-c7e1-41e9-bda2-590483f7d53d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a7f1b402-daab-4539-8163-c79df5774d65-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8e1168c3-198f-4a72-a715-8bb4c55b748f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "4587a61c-f792-46cb-b1ad-10bc18735283-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "19c02888-1f04-478c-9e75-904da5c1bca4-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a5d09983-3670-400a-b690-4839ff20fa82-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748496304678, "stop": 1748496316476, "uuid": "dd657da4-fb9d-4244-b2a1-e52327df33bd", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "44636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}