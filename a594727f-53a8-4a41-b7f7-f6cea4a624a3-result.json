{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F0CA0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB52A3E0>\nfile_path = './testdata/ACS/provisioning_record_voice_H248.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "9e9c9060-5746-4d20-ab0d-a7b8a01da905-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "819c6733-d391-40be-bacd-4e8c8a665ecc-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "e098c3ca-cb38-4519-8c8a-757aed231d68-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "74be5351-5c9b-414f-b270-418c7e078145-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a1be8d8a-016b-4bd3-ac76-a76d346ac59d-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f743a02a-4b9f-426d-a2c5-3c47ac4dbd0b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4886582d-f5e3-4a2c-85e6-ca6890fac178-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "ad2d7984-0bc9-4be5-a2c5-c0645cc16f8c-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "efd425ff-6f4a-4e0d-af61-dfa916193b98-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9aff6f12-efdd-49ea-996b-a737cbc358f2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "0864d4bf-63df-4e74-898c-009e7e47d797-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e80d0a1b-c3f5-4fed-80e6-a1a5a516e302-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1317f0ff-f98d-44be-9e9c-697ea266cfaa-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5b0a9da1-9cf6-47c6-926c-1812978da6fc-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "28fa445d-7d25-49d9-9ed8-918296a9ef01-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d4587d33-6029-4789-a60c-9114f74503db-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "1c134f32-0006-44e9-8a95-dccd3b5ad371-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2f99f6a7-55a7-499b-8313-dca7df9fe559-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_H248.json'"}], "start": 1748341477669, "stop": 1748341487288, "uuid": "d3e97c9d-dbf8-4234-9876-297c3ec87b0d", "historyId": "fc02644e1952cc4fe745a497de8be42e", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "42176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}