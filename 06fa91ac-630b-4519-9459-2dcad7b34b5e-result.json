{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001D2C19D5540>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001D2C2E483D0>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "e6875b32-dc68-4752-94c0-ae94ae053d41-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "85d03629-9e04-446d-b53f-aa132103e3aa-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "30fa171d-43b3-4325-abff-f96651beb229-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5be2e881-1650-47a4-9f9d-c534aa15415f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2b6be8c6-0a3c-4ca4-a6ff-ec86099c857c-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b8062951-680d-42ec-b140-a429fbe5b148-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a632982f-ec4e-4a2b-82bd-d8c594b1c5fb-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d910d50c-010d-47fc-a6dd-f84a35b79c9d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "24b3fe77-9b05-44d9-91fa-51674113138e-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c3fed67f-5842-4e36-8c63-3ee0b9599149-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d5d26496-4e64-4743-a896-b2480e2fa8bb-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "1712b24f-e8be-4418-a8e7-2e3bfbea5788-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ec8b68a3-a91a-4f87-bb04-871cbbe95ffe-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "77552ea7-a3f7-4420-9d31-ed8972c7dfd9-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "044ef117-8559-4b89-b4f8-936fdbcb27bc-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "b8952a4d-a909-47fc-96bc-fd6903c8812a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ad3a17d9-9179-47ff-97ee-22f1f51620d7-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "af9fc0a8-31cf-4024-9595-89eee32fb7c9-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749493372346, "stop": 1749493391857, "uuid": "8c324991-00f9-43da-acf1-90946a9b019e", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "27544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}