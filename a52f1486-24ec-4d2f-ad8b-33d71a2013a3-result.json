{"name": "Test - create static group member with patameters {'memberInfo': 'reg123'}- mac address, regId, serial number,provisioning record id", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001BC68E8E860>, s = 'time out'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.ACS.test_static_group_member.TestStaticGroupMember object at 0x000001BC6CF34190>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001BC6D2021A0>\nparam = {'memberInfo': 'reg123'}\n\n    @allure.feature('CREATE')\n    @allure.title('Test - create static group member with patameters {param}- mac address, regId, serial number,provisioning record id')\n    @pytest.mark.parametrize('param',[\n        {\n            \"memberInfo\": \"e4:6c:d1:43:44:0e\"\n        },\n        {\n            \"memberInfo\":\"reg123\"\n        },\n        {\n            \"memberInfo\":\"CXNK01A8D0C7\"\n        },\n        {\n            \"memberInfo\":\"provisioning-record\"\n        }\n        ])\n    def test_create_with_param(self,base_api,param):\n        # create provisioning-record\n        response_create = base_api.create_when_exist(pr_endpoint,file_paths[\"sip\"],{\"deviceId\": \"CXNK01A8D0C7\"},params=None)\n        pr_id = response_create.json()['_id']\n    \n        # create a static system group\n        group_body =  json_data = load_json(file_paths[\"static\"])\n        static_group_id = base_api.create_get_id(group_endpoint,group_body,need_random=True, field=\"name\")\n    \n        #  create a static group member to this group\n        json_data = load_json(file_paths[\"member\"])\n        json_data[\"groupId\"] = static_group_id\n        json_data[\"orgId\"] = ENV_CONFIG[base_api.env][\"orgId\"]\n        if param[\"memberInfo\"] == \"provisioning-record\":\n            json_data[\"memberInfo\"] = pr_id\n        else:\n            json_data[\"memberInfo\"] = param[\"memberInfo\"]\n    \n        response_member = base_api.create(endpoint,json_data,need_random=False, field=None)\n        assert response_member.status_code == 200\n>       member_id = response_member.json()['_id']\n\ntestcase\\ACS\\test_static_group_member.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\chan\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "attachments": [{"name": "Request Info", "source": "feb06aa4-d96f-4e71-bd71-6428d6ab719a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "6938c172-ebf3-432e-b9f8-1733a7215b5d-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "cb3a2832-22f4-458f-9063-a3e050e4e77a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "414c6d00-bc10-42f3-8862-6f134c28fd7a-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "fba3a774-54dd-46cd-814d-d2d91c973e12-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d4010ef0-ea8d-4da5-b868-e90725e0cdc2-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a888db9d-0c89-4be2-9e0d-f6803e587218-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2c5fdc65-2a58-45ed-92a1-cec615907ced-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "f250738e-8b00-4db6-b6b9-aa24856dbbbd-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "54ff9b08-9504-4fd7-bfdf-a101f2d7d72b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ddd0fd20-df3b-4581-8fe2-4a7d63d6871f-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fe7a51a1-dccf-48dc-acda-1b1945f0f397-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'dev'"}, {"name": "param", "value": "{'memberInfo': 'reg123'}"}], "start": 1749140671597, "stop": 1749140708497, "uuid": "d22fd210-6c4a-49a7-b0cd-e40931ed356e", "historyId": "c6fd5bd1c3335a89d0bbe6cea4ee81fd", "testCaseId": "e9e4b5b35b12263a856563c79857a15f", "fullName": "testcase.ACS.test_static_group_member.TestStaticGroupMember#test_create_with_param", "labels": [{"name": "feature", "value": "CREATE"}, {"name": "epic", "value": "ACS Static Group Member API"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_static_group_member"}, {"name": "subSuite", "value": "TestStaticGroupMember"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "50112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_static_group_member"}], "links": [{"type": "tms", "url": "CTM-312349", "name": "CTM-312349"}]}