{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 400 == 200\n +  where 400 = <Response [400]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000020EFA1F0AF0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000020EFB7812A0>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 400 == 200\nE        +  where 400 = <Response [400]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "f90c21bc-0b44-4256-bd5a-4c7fba8e69fd-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c3c8e2e8-f9ab-48c6-9547-3b9f4f5481f6-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8b26c211-5d98-4240-9a54-6d8adcf241ee-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "dcd42caa-7ca7-49b5-8942-2a8d0ded4060-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9a173e01-45c0-4468-9393-4f07521f6465-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bf1fb3e6-50b0-4192-b14c-c86b6093ebdb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d0f61f82-69e3-4742-b06e-210fcdc9c9e5-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "f55d9190-567a-4b9b-b990-a1321de3b770-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "8c1be6a1-8805-49e2-b1c5-c7e2aedd4fa1-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "e3107f50-6a86-48ff-88d8-d0753b369213-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2d039174-3800-4a1a-a114-c100e3745c26-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2b6b5fcf-c3e1-4664-b95b-c866fbe28bbb-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bba5b686-694c-451f-8c22-8140c8e62e3b-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "bc345caa-52a7-45d7-8f8d-a86fddcd9811-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "77b49057-46c8-4b1b-9f19-019f20af1093-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "430a3b7c-077a-43a8-a7e1-ee223e8b604f-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a101febb-57d2-4d1d-b9e6-71ed6b6c1807-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "89fed8a6-003c-45d7-ae04-845d0e5c2b58-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'aws'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1748341468061, "stop": 1748341477652, "uuid": "a59561cc-d17c-4789-96a4-897e4bcaef35", "historyId": "36a260bec491b376f6257a1df08cf3be", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "42176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}