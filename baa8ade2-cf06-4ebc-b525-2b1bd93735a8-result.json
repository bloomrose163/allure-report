{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x0000026456A75BD0>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x0000026458F58430>\nfile_path = './testdata/ACS/provisioning_record_voice_SIP.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "610976aa-20e8-4f18-9ed5-d99af39d30aa-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "c1059926-375b-4bbf-b8f2-78fe5c66b095-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "148abf07-25e3-4790-9df0-4ba871c854fa-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "de70cc4b-6339-4308-978f-005a7e154863-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "5a01064d-61a2-4126-9c4d-0091308f6807-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a113a236-2715-47e3-b886-c7336392db6e-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "53b42b22-fb5e-478c-b859-dfb8f38cad28-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "02d6dc18-5411-48c9-a381-87db427cca48-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "de103e2e-54c5-43bf-b3cf-6f66c01f8624-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "5dd6702b-e7a9-4e45-8cfe-6a83081f64a1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "a738f3b0-f512-49e1-bfb3-1c8fc5d7d229-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "a0242ff7-df12-498a-a459-cc0990ff119b-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_voice_SIP.json'"}], "start": 1748945418414, "stop": 1748945424978, "uuid": "066dc499-c30e-4b88-a8d1-cdbbacde35a8", "historyId": "e11d44e563c1949d6ba7935d3333fba8", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "48060-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}