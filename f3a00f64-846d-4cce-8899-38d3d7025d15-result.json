{"name": "Test - create provisioning record and get id", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <testcase.ACS.test_provisioning_record.TestProvisioningRecord object at 0x000001E9AE8DF400>\nbase_api = <utils.base_api_acs.BaseAPIACS object at 0x000001E9AFACCF70>\nfile_path = './testdata/ACS/provisioning_record_service_off.json'\n\n    @allure.title('Test - create provisioning record and get id')\n    @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"],file_paths[\"H248\"],file_paths[\"tdmgw\"],file_paths[\"sip\"],file_paths[\"mgcp\"]])\n    # @pytest.mark.parametrize('file_path',[file_paths[\"service_off\"]])\n    def test_crud(self,base_api,file_path):\n        json_data = load_json(file_path)\n        response_create = base_api.create_when_exist(endpoint,file_path,{\"deviceId\": \"CXNK00AFB83B\"},params=None)\n        assert response_create.status_code == 200\n        model_id = response_create.json()['_id']\n        print(\"the diff as following:\" , DeepDiff(json_data,response_create.json()))\n    \n    \n       # get info by id\n        response_get = base_api.get_by_id(endpoint,model_id)\n        assert response_get.status_code == 200\n        assert response_get.json()['_id'] == model_id\n    \n        model = endpoint.replace('-', '_')\n        expected_file_path = f\"./testdata/ACS/outputs/get_{model}_by_id.json\"\n        print(f\"the saved/expected file path is {expected_file_path}\")\n        if base_api.env == \"aws\":\n          save_file(expected_file_path,response_get.json())\n        else:\n          expected_response = load_json(expected_file_path)\n          print(\"the diff as following:\" , DeepDiff(expected_response,response_get.json()))\n    \n        # update the record\n        json_data = load_json(file_paths[\"data_dhcp\"])\n        response_put = base_api.update_with_jsondata(endpoint,model_id,json_data,False,\"deviceId\")\n        assert response_put.status_code == 200\n        # aws return 200 and null body when put configuration profile\n        if base_api.env != \"aws\":\n          assert response_put.json()['_id'] == model_id\n          print(\"the diff as following:\" , DeepDiff(json_data,response_put.json()))\n    \n        # get record by parameters\n        response_get = base_api.get_list_by_param(endpoint,{\"deviceId\": \"CXNK00AFB83B\"})\n        assert response_get.status_code == 200\n        body = response_get.json()[0]\n        body[\"video\"][\"Enable\"] = True\n    \n        # update the record by query\n        response_put = base_api.update_with_query(endpoint,body)\n        assert response_get.status_code == 200\n        if base_api.env != \"aws\":\n          assert response_put.json()[\"video\"][\"Enable\"] == True\n    \n    \n    \n        # update apply-pppoe\n        endpoint_apply_pppoe = \"provisioning-record/apply-pppoe\"\n        json_data=None\n        response_put = base_api.update_with_jsondata(endpoint_apply_pppoe,model_id,json_data,need_random=False, field=None)\n>       assert response_put.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\ntestcase\\ACS\\test_provisioning_record.py:141: AssertionError"}, "attachments": [{"name": "Request Info", "source": "4312d4ab-93c2-40f6-b287-bc3c1621f08a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "74b60094-5d43-4ec0-a131-cdab13a1e54b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9bd4a7fb-d23d-413e-9d0f-674f47c026de-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "d9ff21e4-4ffc-426d-a250-25345cac2636-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "ce360613-46c9-4b1d-a133-0c729050c92a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "519c523e-d4b7-4c84-8f13-42d5069c2108-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "2da4ea01-466d-4440-be36-6e304b895cb6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "2e21b98c-f669-4693-8ac8-16bc3f49dfa1-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "4b5ce02d-fa3d-445d-80a5-aaf991acfb87-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "9d0b3abd-0adf-49a3-96aa-68a993b98d26-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "bda5110b-ff56-4ffc-81fd-35f1a74cf27a-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "fc94e968-0a63-42ec-b060-c4dff2bcce65-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "9fdc9c68-083a-49bf-9081-c038e1cfebf6-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "46f7f187-f12b-44e2-85ab-3464c3552073-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "91c2b8f3-7c6c-42f6-8168-5b9f33edbb04-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "3ca977a3-dd3b-43c2-b99f-34c92a90618b-attachment.json", "type": "application/json"}, {"name": "Request Info", "source": "d6d26b85-f5b5-45b7-97c9-ac401891a105-attachment.json", "type": "application/json"}, {"name": "Response Info", "source": "26d1de7c-0231-48fa-82ab-c67f3e5bc427-attachment.json", "type": "application/json"}], "parameters": [{"name": "base_api", "value": "'test'"}, {"name": "file_path", "value": "'./testdata/ACS/provisioning_record_service_off.json'"}], "start": 1749100739828, "stop": 1749100748940, "uuid": "a0999e2a-86d5-49ed-bb1d-af0c834e9e9b", "historyId": "9263e604e50e9044ae7213f6b8554e44", "testCaseId": "8a8796f9f07a30318bcd283bd7e604a7", "fullName": "testcase.ACS.test_provisioning_record.TestProvisioningRecord#test_crud", "labels": [{"name": "epic", "value": "Test - ProvisioningRecord"}, {"name": "parentSuite", "value": "testcase.ACS"}, {"name": "suite", "value": "test_provisioning_record"}, {"name": "subSuite", "value": "TestProvisioningRecord"}, {"name": "host", "value": "Cherry-640879"}, {"name": "thread", "value": "9660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.ACS.test_provisioning_record"}]}